
i2c_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800c084  0800c084  0001c084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0ac  0800c0ac  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0ac  0800c0ac  0001c0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0b4  0800c0b4  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0b4  0800c0b4  0001c0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0b8  0800c0b8  0001c0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800c0bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000091c  20000110  0800c1cc  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  0800c1cc  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4c3  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000472a  00000000  00000000  0003c603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00040d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00041d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c44f  00000000  00000000  00042b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179c0  00000000  00000000  0005ef97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000916da  00000000  00000000  00076957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b0  00000000  00000000  00108084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000110 	.word	0x20000110
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c06c 	.word	0x0800c06c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000114 	.word	0x20000114
 80001d4:	0800c06c 	.word	0x0800c06c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <led_toggle>:

void led_off(){
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
}

void led_toggle(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <led_toggle+0x14>)
 80004e6:	f000 fcf0 	bl	8000eca <HAL_GPIO_TogglePin>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40020800 	.word	0x40020800

080004f4 <my_main_run>:

#include "my_main.h"
#include "led.h"
#include "stm32f4xx_hal.h"

void my_main_run (){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

	for(;;){
		led_toggle();
 80004f8:	f7ff fff0 	bl	80004dc <led_toggle>
		HAL_Delay(1000);
 80004fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000500:	f000 fa10 	bl	8000924 <HAL_Delay>
		led_toggle();
 8000504:	e7f8      	b.n	80004f8 <my_main_run+0x4>

08000506 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 f999 	bl	8000840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f809 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f86f 	bl	80005f4 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000516:	f00b f92b 	bl	800b770 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  my_main_run ();
 800051a:	f7ff ffeb 	bl	80004f4 <my_main_run>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800051e:	f00b f979 	bl	800b814 <MX_USB_HOST_Process>
 8000522:	e7fc      	b.n	800051e <main+0x18>

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f00b fc94 	bl	800be60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <SystemClock_Config+0xc8>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a26      	ldr	r2, [pc, #152]	; (80005ec <SystemClock_Config+0xc8>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <SystemClock_Config+0xc8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <SystemClock_Config+0xcc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <SystemClock_Config+0xcc>)
 800056e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000594:	230f      	movs	r3, #15
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000598:	2390      	movs	r3, #144	; 0x90
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005a0:	2305      	movs	r3, #5
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 f8b3 	bl	8002714 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b4:	f000 f870 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fb16 	bl	8002c04 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005de:	f000 f85b 	bl	8000698 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_GPIO_Init+0x9c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_GPIO_Init+0x9c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a11      	ldr	r2, [pc, #68]	; (8000690 <MX_GPIO_Init+0x9c>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <MX_GPIO_Init+0xa0>)
 8000666:	f000 fc17 	bl	8000e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800066a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_GPIO_Init+0xa0>)
 8000684:	f000 fa84 	bl	8000b90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020800 	.word	0x40020800

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <HAL_MspInit+0x4c>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <HAL_MspInit+0x4c>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <HAL_MspInit+0x4c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	; 0x40
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f8d0 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <OTG_FS_IRQHandler+0x10>)
 800074e:	f000 fe41 	bl	80013d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000718 	.word	0x20000718

0800075c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000764:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <_sbrk+0x5c>)
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <_sbrk+0x60>)
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <_sbrk+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d102      	bne.n	800077e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <_sbrk+0x64>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <_sbrk+0x68>)
 800077c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <_sbrk+0x64>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	693a      	ldr	r2, [r7, #16]
 8000788:	429a      	cmp	r2, r3
 800078a:	d207      	bcs.n	800079c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800078c:	f00b fb20 	bl	800bdd0 <__errno>
 8000790:	4603      	mov	r3, r0
 8000792:	220c      	movs	r2, #12
 8000794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800079a:	e009      	b.n	80007b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <_sbrk+0x64>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <_sbrk+0x64>)
 80007ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ae:	68fb      	ldr	r3, [r7, #12]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20020000 	.word	0x20020000
 80007bc:	00000400 	.word	0x00000400
 80007c0:	2000012c 	.word	0x2000012c
 80007c4:	20000a30 	.word	0x20000a30

080007c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <SystemInit+0x20>)
 80007ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <SystemInit+0x20>)
 80007d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007f2:	490e      	ldr	r1, [pc, #56]	; (800082c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007f4:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000808:	4c0b      	ldr	r4, [pc, #44]	; (8000838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000816:	f7ff ffd7 	bl	80007c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800081a:	f00b fadf 	bl	800bddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800081e:	f7ff fe72 	bl	8000506 <main>
  bx  lr    
 8000822:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000830:	0800c0bc 	.word	0x0800c0bc
  ldr r2, =_sbss
 8000834:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000838:	20000a2c 	.word	0x20000a2c

0800083c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC_IRQHandler>
	...

08000840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_Init+0x40>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <HAL_Init+0x40>)
 800084a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_Init+0x40>)
 8000856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800085a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_Init+0x40>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_Init+0x40>)
 8000862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 f94f 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086e:	200f      	movs	r0, #15
 8000870:	f000 f808 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000874:	f7ff ff16 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023c00 	.word	0x40023c00

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f967 	bl	8000b76 <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008c0:	f000 f92f 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x20>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x24>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_IncTick+0x24>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000008 	.word	0x20000008
 8000908:	20000130 	.word	0x20000130

0800090c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_GetTick+0x14>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000130 	.word	0x20000130

08000924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff ffee 	bl	800090c <HAL_GetTick>
 8000930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800093c:	d005      	beq.n	800094a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_Delay+0x44>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4413      	add	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800094a:	bf00      	nop
 800094c:	f7ff ffde 	bl	800090c <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8f7      	bhi.n	800094c <HAL_Delay+0x28>
  {
  }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000008 	.word	0x20000008

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60d3      	str	r3, [r2, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	db0b      	blt.n	80009fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f003 021f 	and.w	r2, r3, #31
 80009e8:	4907      	ldr	r1, [pc, #28]	; (8000a08 <__NVIC_EnableIRQ+0x38>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	2001      	movs	r0, #1
 80009f2:	fa00 f202 	lsl.w	r2, r0, r2
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aec:	f7ff ff8e 	bl	8000a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff29 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff3e 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff8e 	bl	8000a60 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5d 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff31 	bl	80009d0 <__NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffa2 	bl	8000ac8 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	e159      	b.n	8000e60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f040 8148 	bne.w	8000e5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d005      	beq.n	8000be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d130      	bne.n	8000c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68da      	ldr	r2, [r3, #12]
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c18:	2201      	movs	r2, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	091b      	lsrs	r3, r3, #4
 8000c2e:	f003 0201 	and.w	r2, r3, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d017      	beq.n	8000c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d123      	bne.n	8000cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	691a      	ldr	r2, [r3, #16]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	08da      	lsrs	r2, r3, #3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	69b9      	ldr	r1, [r7, #24]
 8000cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0203 	and.w	r2, r3, #3
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 80a2 	beq.w	8000e5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b57      	ldr	r3, [pc, #348]	; (8000e78 <HAL_GPIO_Init+0x2e8>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a56      	ldr	r2, [pc, #344]	; (8000e78 <HAL_GPIO_Init+0x2e8>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b54      	ldr	r3, [pc, #336]	; (8000e78 <HAL_GPIO_Init+0x2e8>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d32:	4a52      	ldr	r2, [pc, #328]	; (8000e7c <HAL_GPIO_Init+0x2ec>)
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3302      	adds	r3, #2
 8000d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	220f      	movs	r2, #15
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a49      	ldr	r2, [pc, #292]	; (8000e80 <HAL_GPIO_Init+0x2f0>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d019      	beq.n	8000d92 <HAL_GPIO_Init+0x202>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a48      	ldr	r2, [pc, #288]	; (8000e84 <HAL_GPIO_Init+0x2f4>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d013      	beq.n	8000d8e <HAL_GPIO_Init+0x1fe>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a47      	ldr	r2, [pc, #284]	; (8000e88 <HAL_GPIO_Init+0x2f8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d00d      	beq.n	8000d8a <HAL_GPIO_Init+0x1fa>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a46      	ldr	r2, [pc, #280]	; (8000e8c <HAL_GPIO_Init+0x2fc>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d007      	beq.n	8000d86 <HAL_GPIO_Init+0x1f6>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a45      	ldr	r2, [pc, #276]	; (8000e90 <HAL_GPIO_Init+0x300>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_GPIO_Init+0x1f2>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e008      	b.n	8000d94 <HAL_GPIO_Init+0x204>
 8000d82:	2307      	movs	r3, #7
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x204>
 8000d86:	2303      	movs	r3, #3
 8000d88:	e004      	b.n	8000d94 <HAL_GPIO_Init+0x204>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e002      	b.n	8000d94 <HAL_GPIO_Init+0x204>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <HAL_GPIO_Init+0x204>
 8000d92:	2300      	movs	r3, #0
 8000d94:	69fa      	ldr	r2, [r7, #28]
 8000d96:	f002 0203 	and.w	r2, r2, #3
 8000d9a:	0092      	lsls	r2, r2, #2
 8000d9c:	4093      	lsls	r3, r2
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da4:	4935      	ldr	r1, [pc, #212]	; (8000e7c <HAL_GPIO_Init+0x2ec>)
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	3302      	adds	r3, #2
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000db2:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dd6:	4a2f      	ldr	r2, [pc, #188]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e00:	4a24      	ldr	r2, [pc, #144]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e06:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e54:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	61fb      	str	r3, [r7, #28]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	f67f aea2 	bls.w	8000bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40013800 	.word	0x40013800
 8000e80:	40020000 	.word	0x40020000
 8000e84:	40020400 	.word	0x40020400
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	40020c00 	.word	0x40020c00
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40013c00 	.word	0x40013c00

08000e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea8:	787b      	ldrb	r3, [r7, #1]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000eb4:	e003      	b.n	8000ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	041a      	lsls	r2, r3, #16
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	619a      	str	r2, [r3, #24]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000edc:	887a      	ldrh	r2, [r7, #2]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	041a      	lsls	r2, r3, #16
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	400b      	ands	r3, r1
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	619a      	str	r2, [r3, #24]
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f00:	b08f      	sub	sp, #60	; 0x3c
 8000f02:	af0a      	add	r7, sp, #40	; 0x28
 8000f04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e054      	b.n	8000fba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d106      	bne.n	8000f30 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f00a fcaa 	bl	800b884 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2203      	movs	r2, #3
 8000f34:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 f876 	bl	8003040 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	687e      	ldr	r6, [r7, #4]
 8000f5c:	466d      	mov	r5, sp
 8000f5e:	f106 0410 	add.w	r4, r6, #16
 8000f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f72:	1d33      	adds	r3, r6, #4
 8000f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f001 fff0 	bl	8002f5c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2101      	movs	r1, #1
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 f86d 	bl	8003062 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	687e      	ldr	r6, [r7, #4]
 8000f90:	466d      	mov	r5, sp
 8000f92:	f106 0410 	add.w	r4, r6, #16
 8000f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fa6:	1d33      	adds	r3, r6, #4
 8000fa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f002 f9f6 	bl	800339c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fc2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000fc2:	b590      	push	{r4, r7, lr}
 8000fc4:	b089      	sub	sp, #36	; 0x24
 8000fc6:	af04      	add	r7, sp, #16
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4611      	mov	r1, r2
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	70fb      	strb	r3, [r7, #3]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70bb      	strb	r3, [r7, #2]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d101      	bne.n	8000fea <HAL_HCD_HC_Init+0x28>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e076      	b.n	80010d8 <HAL_HCD_HC_Init+0x116>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	212c      	movs	r1, #44	; 0x2c
 8000ff8:	fb01 f303 	mul.w	r3, r1, r3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	333d      	adds	r3, #61	; 0x3d
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	212c      	movs	r1, #44	; 0x2c
 800100a:	fb01 f303 	mul.w	r3, r1, r3
 800100e:	4413      	add	r3, r2
 8001010:	3338      	adds	r3, #56	; 0x38
 8001012:	787a      	ldrb	r2, [r7, #1]
 8001014:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	212c      	movs	r1, #44	; 0x2c
 800101c:	fb01 f303 	mul.w	r3, r1, r3
 8001020:	4413      	add	r3, r2
 8001022:	3340      	adds	r3, #64	; 0x40
 8001024:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001026:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	212c      	movs	r1, #44	; 0x2c
 800102e:	fb01 f303 	mul.w	r3, r1, r3
 8001032:	4413      	add	r3, r2
 8001034:	3339      	adds	r3, #57	; 0x39
 8001036:	78fa      	ldrb	r2, [r7, #3]
 8001038:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	212c      	movs	r1, #44	; 0x2c
 8001040:	fb01 f303 	mul.w	r3, r1, r3
 8001044:	4413      	add	r3, r2
 8001046:	333f      	adds	r3, #63	; 0x3f
 8001048:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800104c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	78ba      	ldrb	r2, [r7, #2]
 8001052:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001056:	b2d0      	uxtb	r0, r2
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	212c      	movs	r1, #44	; 0x2c
 800105c:	fb01 f303 	mul.w	r3, r1, r3
 8001060:	4413      	add	r3, r2
 8001062:	333a      	adds	r3, #58	; 0x3a
 8001064:	4602      	mov	r2, r0
 8001066:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001068:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800106c:	2b00      	cmp	r3, #0
 800106e:	da09      	bge.n	8001084 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	212c      	movs	r1, #44	; 0x2c
 8001076:	fb01 f303 	mul.w	r3, r1, r3
 800107a:	4413      	add	r3, r2
 800107c:	333b      	adds	r3, #59	; 0x3b
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
 8001082:	e008      	b.n	8001096 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	212c      	movs	r1, #44	; 0x2c
 800108a:	fb01 f303 	mul.w	r3, r1, r3
 800108e:	4413      	add	r3, r2
 8001090:	333b      	adds	r3, #59	; 0x3b
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	212c      	movs	r1, #44	; 0x2c
 800109c:	fb01 f303 	mul.w	r3, r1, r3
 80010a0:	4413      	add	r3, r2
 80010a2:	333c      	adds	r3, #60	; 0x3c
 80010a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	787c      	ldrb	r4, [r7, #1]
 80010b0:	78ba      	ldrb	r2, [r7, #2]
 80010b2:	78f9      	ldrb	r1, [r7, #3]
 80010b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	4623      	mov	r3, r4
 80010c6:	f002 faef 	bl	80036a8 <USB_HC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd90      	pop	{r4, r7, pc}

080010e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d101      	bne.n	80010fe <HAL_HCD_HC_Halt+0x1e>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e00f      	b.n	800111e <HAL_HCD_HC_Halt+0x3e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	78fa      	ldrb	r2, [r7, #3]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fd3f 	bl	8003b92 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4603      	mov	r3, r0
 8001138:	70fb      	strb	r3, [r7, #3]
 800113a:	460b      	mov	r3, r1
 800113c:	70bb      	strb	r3, [r7, #2]
 800113e:	4613      	mov	r3, r2
 8001140:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	212c      	movs	r1, #44	; 0x2c
 8001148:	fb01 f303 	mul.w	r3, r1, r3
 800114c:	4413      	add	r3, r2
 800114e:	333b      	adds	r3, #59	; 0x3b
 8001150:	78ba      	ldrb	r2, [r7, #2]
 8001152:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	212c      	movs	r1, #44	; 0x2c
 800115a:	fb01 f303 	mul.w	r3, r1, r3
 800115e:	4413      	add	r3, r2
 8001160:	333f      	adds	r3, #63	; 0x3f
 8001162:	787a      	ldrb	r2, [r7, #1]
 8001164:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001166:	7c3b      	ldrb	r3, [r7, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d112      	bne.n	8001192 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	212c      	movs	r1, #44	; 0x2c
 8001172:	fb01 f303 	mul.w	r3, r1, r3
 8001176:	4413      	add	r3, r2
 8001178:	3342      	adds	r3, #66	; 0x42
 800117a:	2203      	movs	r2, #3
 800117c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	212c      	movs	r1, #44	; 0x2c
 8001184:	fb01 f303 	mul.w	r3, r1, r3
 8001188:	4413      	add	r3, r2
 800118a:	333d      	adds	r3, #61	; 0x3d
 800118c:	7f3a      	ldrb	r2, [r7, #28]
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e008      	b.n	80011a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	212c      	movs	r1, #44	; 0x2c
 8001198:	fb01 f303 	mul.w	r3, r1, r3
 800119c:	4413      	add	r3, r2
 800119e:	3342      	adds	r3, #66	; 0x42
 80011a0:	2202      	movs	r2, #2
 80011a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80011a4:	787b      	ldrb	r3, [r7, #1]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	f200 80c6 	bhi.w	8001338 <HAL_HCD_HC_SubmitRequest+0x210>
 80011ac:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80011ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b2:	bf00      	nop
 80011b4:	080011c5 	.word	0x080011c5
 80011b8:	08001325 	.word	0x08001325
 80011bc:	08001229 	.word	0x08001229
 80011c0:	080012a7 	.word	0x080012a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80011c4:	7c3b      	ldrb	r3, [r7, #16]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	f040 80b8 	bne.w	800133c <HAL_HCD_HC_SubmitRequest+0x214>
 80011cc:	78bb      	ldrb	r3, [r7, #2]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f040 80b4 	bne.w	800133c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80011d4:	8b3b      	ldrh	r3, [r7, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d108      	bne.n	80011ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	212c      	movs	r1, #44	; 0x2c
 80011e0:	fb01 f303 	mul.w	r3, r1, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	3355      	adds	r3, #85	; 0x55
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	212c      	movs	r1, #44	; 0x2c
 80011f2:	fb01 f303 	mul.w	r3, r1, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	3355      	adds	r3, #85	; 0x55
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d109      	bne.n	8001214 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	212c      	movs	r1, #44	; 0x2c
 8001206:	fb01 f303 	mul.w	r3, r1, r3
 800120a:	4413      	add	r3, r2
 800120c:	3342      	adds	r3, #66	; 0x42
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001212:	e093      	b.n	800133c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	212c      	movs	r1, #44	; 0x2c
 800121a:	fb01 f303 	mul.w	r3, r1, r3
 800121e:	4413      	add	r3, r2
 8001220:	3342      	adds	r3, #66	; 0x42
 8001222:	2202      	movs	r2, #2
 8001224:	701a      	strb	r2, [r3, #0]
      break;
 8001226:	e089      	b.n	800133c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d11d      	bne.n	800126a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	212c      	movs	r1, #44	; 0x2c
 8001234:	fb01 f303 	mul.w	r3, r1, r3
 8001238:	4413      	add	r3, r2
 800123a:	3355      	adds	r3, #85	; 0x55
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	212c      	movs	r1, #44	; 0x2c
 8001248:	fb01 f303 	mul.w	r3, r1, r3
 800124c:	4413      	add	r3, r2
 800124e:	3342      	adds	r3, #66	; 0x42
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001254:	e073      	b.n	800133e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	212c      	movs	r1, #44	; 0x2c
 800125c:	fb01 f303 	mul.w	r3, r1, r3
 8001260:	4413      	add	r3, r2
 8001262:	3342      	adds	r3, #66	; 0x42
 8001264:	2202      	movs	r2, #2
 8001266:	701a      	strb	r2, [r3, #0]
      break;
 8001268:	e069      	b.n	800133e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	212c      	movs	r1, #44	; 0x2c
 8001270:	fb01 f303 	mul.w	r3, r1, r3
 8001274:	4413      	add	r3, r2
 8001276:	3354      	adds	r3, #84	; 0x54
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	212c      	movs	r1, #44	; 0x2c
 8001284:	fb01 f303 	mul.w	r3, r1, r3
 8001288:	4413      	add	r3, r2
 800128a:	3342      	adds	r3, #66	; 0x42
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
      break;
 8001290:	e055      	b.n	800133e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	212c      	movs	r1, #44	; 0x2c
 8001298:	fb01 f303 	mul.w	r3, r1, r3
 800129c:	4413      	add	r3, r2
 800129e:	3342      	adds	r3, #66	; 0x42
 80012a0:	2202      	movs	r2, #2
 80012a2:	701a      	strb	r2, [r3, #0]
      break;
 80012a4:	e04b      	b.n	800133e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80012a6:	78bb      	ldrb	r3, [r7, #2]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d11d      	bne.n	80012e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	212c      	movs	r1, #44	; 0x2c
 80012b2:	fb01 f303 	mul.w	r3, r1, r3
 80012b6:	4413      	add	r3, r2
 80012b8:	3355      	adds	r3, #85	; 0x55
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d109      	bne.n	80012d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	212c      	movs	r1, #44	; 0x2c
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	3342      	adds	r3, #66	; 0x42
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80012d2:	e034      	b.n	800133e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	212c      	movs	r1, #44	; 0x2c
 80012da:	fb01 f303 	mul.w	r3, r1, r3
 80012de:	4413      	add	r3, r2
 80012e0:	3342      	adds	r3, #66	; 0x42
 80012e2:	2202      	movs	r2, #2
 80012e4:	701a      	strb	r2, [r3, #0]
      break;
 80012e6:	e02a      	b.n	800133e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	212c      	movs	r1, #44	; 0x2c
 80012ee:	fb01 f303 	mul.w	r3, r1, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	3354      	adds	r3, #84	; 0x54
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	212c      	movs	r1, #44	; 0x2c
 8001302:	fb01 f303 	mul.w	r3, r1, r3
 8001306:	4413      	add	r3, r2
 8001308:	3342      	adds	r3, #66	; 0x42
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
      break;
 800130e:	e016      	b.n	800133e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	212c      	movs	r1, #44	; 0x2c
 8001316:	fb01 f303 	mul.w	r3, r1, r3
 800131a:	4413      	add	r3, r2
 800131c:	3342      	adds	r3, #66	; 0x42
 800131e:	2202      	movs	r2, #2
 8001320:	701a      	strb	r2, [r3, #0]
      break;
 8001322:	e00c      	b.n	800133e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	212c      	movs	r1, #44	; 0x2c
 800132a:	fb01 f303 	mul.w	r3, r1, r3
 800132e:	4413      	add	r3, r2
 8001330:	3342      	adds	r3, #66	; 0x42
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
      break;
 8001336:	e002      	b.n	800133e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001338:	bf00      	nop
 800133a:	e000      	b.n	800133e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800133c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	212c      	movs	r1, #44	; 0x2c
 8001344:	fb01 f303 	mul.w	r3, r1, r3
 8001348:	4413      	add	r3, r2
 800134a:	3344      	adds	r3, #68	; 0x44
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	8b3a      	ldrh	r2, [r7, #24]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	202c      	movs	r0, #44	; 0x2c
 8001358:	fb00 f303 	mul.w	r3, r0, r3
 800135c:	440b      	add	r3, r1
 800135e:	334c      	adds	r3, #76	; 0x4c
 8001360:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	212c      	movs	r1, #44	; 0x2c
 8001368:	fb01 f303 	mul.w	r3, r1, r3
 800136c:	4413      	add	r3, r2
 800136e:	3360      	adds	r3, #96	; 0x60
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	212c      	movs	r1, #44	; 0x2c
 800137a:	fb01 f303 	mul.w	r3, r1, r3
 800137e:	4413      	add	r3, r2
 8001380:	3350      	adds	r3, #80	; 0x50
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	212c      	movs	r1, #44	; 0x2c
 800138c:	fb01 f303 	mul.w	r3, r1, r3
 8001390:	4413      	add	r3, r2
 8001392:	3339      	adds	r3, #57	; 0x39
 8001394:	78fa      	ldrb	r2, [r7, #3]
 8001396:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	212c      	movs	r1, #44	; 0x2c
 800139e:	fb01 f303 	mul.w	r3, r1, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	3361      	adds	r3, #97	; 0x61
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	222c      	movs	r2, #44	; 0x2c
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	3338      	adds	r3, #56	; 0x38
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	18d1      	adds	r1, r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	f002 fa92 	bl	80038ec <USB_HC_StartXfer>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop

080013d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 ff93 	bl	8003316 <USB_GetMode>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	f040 80f6 	bne.w	80015e4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 ff77 	bl	80032f0 <USB_ReadInterrupts>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80ec 	beq.w	80015e2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f001 ff6e 	bl	80032f0 <USB_ReadInterrupts>
 8001414:	4603      	mov	r3, r0
 8001416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800141e:	d104      	bne.n	800142a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001428:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f001 ff5e 	bl	80032f0 <USB_ReadInterrupts>
 8001434:	4603      	mov	r3, r0
 8001436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800143e:	d104      	bne.n	800144a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001448:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f001 ff4e 	bl	80032f0 <USB_ReadInterrupts>
 8001454:	4603      	mov	r3, r0
 8001456:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800145a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800145e:	d104      	bne.n	800146a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001468:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f001 ff3e 	bl	80032f0 <USB_ReadInterrupts>
 8001474:	4603      	mov	r3, r0
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b02      	cmp	r3, #2
 800147c:	d103      	bne.n	8001486 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2202      	movs	r2, #2
 8001484:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f001 ff30 	bl	80032f0 <USB_ReadInterrupts>
 8001490:	4603      	mov	r3, r0
 8001492:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800149a:	d11c      	bne.n	80014d6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10f      	bne.n	80014d6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80014b6:	2110      	movs	r1, #16
 80014b8:	6938      	ldr	r0, [r7, #16]
 80014ba:	f001 fe1f 	bl	80030fc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80014be:	6938      	ldr	r0, [r7, #16]
 80014c0:	f001 fe50 	bl	8003164 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 f826 	bl	800351c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f00a fa47 	bl	800b964 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f001 ff08 	bl	80032f0 <USB_ReadInterrupts>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ea:	d102      	bne.n	80014f2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f001 f89e 	bl	800262e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 fefa 	bl	80032f0 <USB_ReadInterrupts>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b08      	cmp	r3, #8
 8001504:	d106      	bne.n	8001514 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f00a fa10 	bl	800b92c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2208      	movs	r2, #8
 8001512:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f001 fee9 	bl	80032f0 <USB_ReadInterrupts>
 800151e:	4603      	mov	r3, r0
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	2b10      	cmp	r3, #16
 8001526:	d101      	bne.n	800152c <HAL_HCD_IRQHandler+0x158>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <HAL_HCD_IRQHandler+0x15a>
 800152c:	2300      	movs	r3, #0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d012      	beq.n	8001558 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699a      	ldr	r2, [r3, #24]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0210 	bic.w	r2, r2, #16
 8001540:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 ffa1 	bl	800248a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0210 	orr.w	r2, r2, #16
 8001556:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fec7 	bl	80032f0 <USB_ReadInterrupts>
 8001562:	4603      	mov	r3, r0
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800156c:	d13a      	bne.n	80015e4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fafc 	bl	8003b70 <USB_HC_ReadInterrupt>
 8001578:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e025      	b.n	80015cc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d018      	beq.n	80015c6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	015a      	lsls	r2, r3, #5
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015aa:	d106      	bne.n	80015ba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4619      	mov	r1, r3
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f8ab 	bl	800170e <HCD_HC_IN_IRQHandler>
 80015b8:	e005      	b.n	80015c6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4619      	mov	r1, r3
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fbf9 	bl	8001db8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3d4      	bcc.n	8001580 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	e000      	b.n	80015e4 <HAL_HCD_IRQHandler+0x210>
      return;
 80015e2:	bf00      	nop
    }
  }
}
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_HCD_Start+0x16>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e013      	b.n	8001628 <HAL_HCD_Start+0x3e>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	4618      	mov	r0, r3
 8001610:	f001 ffe8 	bl	80035e4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f001 fd00 	bl	800301e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_HCD_Stop+0x16>
 8001642:	2302      	movs	r3, #2
 8001644:	e00d      	b.n	8001662 <HAL_HCD_Stop+0x32>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fbd6 	bl	8003e04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f001 ff8a 	bl	8003590 <USB_ResetPort>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	460b      	mov	r3, r1
 8001690:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	212c      	movs	r1, #44	; 0x2c
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	4413      	add	r3, r2
 800169e:	3360      	adds	r3, #96	; 0x60
 80016a0:	781b      	ldrb	r3, [r3, #0]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	212c      	movs	r1, #44	; 0x2c
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	3350      	adds	r3, #80	; 0x50
 80016c8:	681b      	ldr	r3, [r3, #0]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 ffce 	bl	8003684 <USB_GetCurrentFrame>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f001 ffa9 	bl	8003656 <USB_GetHostSpeed>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	015a      	lsls	r2, r3, #5
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4413      	add	r3, r2
 8001730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b04      	cmp	r3, #4
 800173c:	d11a      	bne.n	8001774 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	015a      	lsls	r2, r3, #5
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4413      	add	r3, r2
 8001746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800174a:	461a      	mov	r2, r3
 800174c:	2304      	movs	r3, #4
 800174e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	212c      	movs	r1, #44	; 0x2c
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4413      	add	r3, r2
 800175c:	3361      	adds	r3, #97	; 0x61
 800175e:	2206      	movs	r2, #6
 8001760:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f002 fa10 	bl	8003b92 <USB_HC_Halt>
 8001772:	e0af      	b.n	80018d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4413      	add	r3, r2
 800177c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800178a:	d11b      	bne.n	80017c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	015a      	lsls	r2, r3, #5
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4413      	add	r3, r2
 8001794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001798:	461a      	mov	r2, r3
 800179a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	212c      	movs	r1, #44	; 0x2c
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	3361      	adds	r3, #97	; 0x61
 80017ae:	2207      	movs	r2, #7
 80017b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 f9e8 	bl	8003b92 <USB_HC_Halt>
 80017c2:	e087      	b.n	80018d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	015a      	lsls	r2, r3, #5
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4413      	add	r3, r2
 80017cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	2b20      	cmp	r3, #32
 80017d8:	d109      	bne.n	80017ee <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	015a      	lsls	r2, r3, #5
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017e6:	461a      	mov	r2, r3
 80017e8:	2320      	movs	r3, #32
 80017ea:	6093      	str	r3, [r2, #8]
 80017ec:	e072      	b.n	80018d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b08      	cmp	r3, #8
 8001802:	d11a      	bne.n	800183a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4413      	add	r3, r2
 800180c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001810:	461a      	mov	r2, r3
 8001812:	2308      	movs	r3, #8
 8001814:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	212c      	movs	r1, #44	; 0x2c
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	3361      	adds	r3, #97	; 0x61
 8001824:	2205      	movs	r2, #5
 8001826:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f002 f9ad 	bl	8003b92 <USB_HC_Halt>
 8001838:	e04c      	b.n	80018d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	015a      	lsls	r2, r3, #5
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4413      	add	r3, r2
 8001842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001850:	d11b      	bne.n	800188a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4413      	add	r3, r2
 800185a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800185e:	461a      	mov	r2, r3
 8001860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001864:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	212c      	movs	r1, #44	; 0x2c
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	4413      	add	r3, r2
 8001872:	3361      	adds	r3, #97	; 0x61
 8001874:	2208      	movs	r2, #8
 8001876:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	4611      	mov	r1, r2
 8001882:	4618      	mov	r0, r3
 8001884:	f002 f985 	bl	8003b92 <USB_HC_Halt>
 8001888:	e024      	b.n	80018d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4413      	add	r3, r2
 8001892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189c:	2b80      	cmp	r3, #128	; 0x80
 800189e:	d119      	bne.n	80018d4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	015a      	lsls	r2, r3, #5
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4413      	add	r3, r2
 80018a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ac:	461a      	mov	r2, r3
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	212c      	movs	r1, #44	; 0x2c
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	3361      	adds	r3, #97	; 0x61
 80018c0:	2206      	movs	r2, #6
 80018c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 f95f 	bl	8003b92 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ea:	d112      	bne.n	8001912 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 f94b 	bl	8003b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	015a      	lsls	r2, r3, #5
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4413      	add	r3, r2
 8001904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001908:	461a      	mov	r2, r3
 800190a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800190e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001910:	e24e      	b.n	8001db0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	015a      	lsls	r2, r3, #5
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4413      	add	r3, r2
 800191a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	f040 80df 	bne.w	8001ae8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d019      	beq.n	8001966 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	212c      	movs	r1, #44	; 0x2c
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	3348      	adds	r3, #72	; 0x48
 8001940:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	0159      	lsls	r1, r3, #5
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	440b      	add	r3, r1
 800194a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001954:	1ad2      	subs	r2, r2, r3
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	202c      	movs	r0, #44	; 0x2c
 800195c:	fb00 f303 	mul.w	r3, r0, r3
 8001960:	440b      	add	r3, r1
 8001962:	3350      	adds	r3, #80	; 0x50
 8001964:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	212c      	movs	r1, #44	; 0x2c
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	3361      	adds	r3, #97	; 0x61
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	212c      	movs	r1, #44	; 0x2c
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	4413      	add	r3, r2
 8001984:	335c      	adds	r3, #92	; 0x5c
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4413      	add	r3, r2
 8001992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001996:	461a      	mov	r2, r3
 8001998:	2301      	movs	r3, #1
 800199a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	212c      	movs	r1, #44	; 0x2c
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	333f      	adds	r3, #63	; 0x3f
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d009      	beq.n	80019c4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	333f      	adds	r3, #63	; 0x3f
 80019be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d111      	bne.n	80019e8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 f8df 	bl	8003b92 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e0:	461a      	mov	r2, r3
 80019e2:	2310      	movs	r3, #16
 80019e4:	6093      	str	r3, [r2, #8]
 80019e6:	e03a      	b.n	8001a5e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	333f      	adds	r3, #63	; 0x3f
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d009      	beq.n	8001a10 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	333f      	adds	r3, #63	; 0x3f
 8001a0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d126      	bne.n	8001a5e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	015a      	lsls	r2, r3, #5
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	0151      	lsls	r1, r2, #5
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	440a      	add	r2, r1
 8001a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a2e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3360      	adds	r3, #96	; 0x60
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	b2d9      	uxtb	r1, r3
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	202c      	movs	r0, #44	; 0x2c
 8001a4c:	fb00 f303 	mul.w	r3, r0, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	3360      	adds	r3, #96	; 0x60
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f009 ff91 	bl	800b980 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d12b      	bne.n	8001abe <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	3348      	adds	r3, #72	; 0x48
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	202c      	movs	r0, #44	; 0x2c
 8001a7c:	fb00 f202 	mul.w	r2, r0, r2
 8001a80:	440a      	add	r2, r1
 8001a82:	3240      	adds	r2, #64	; 0x40
 8001a84:	8812      	ldrh	r2, [r2, #0]
 8001a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 818e 	beq.w	8001db0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3354      	adds	r3, #84	; 0x54
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	f083 0301 	eor.w	r3, r3, #1
 8001aa8:	b2d8      	uxtb	r0, r3
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	212c      	movs	r1, #44	; 0x2c
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3354      	adds	r3, #84	; 0x54
 8001ab8:	4602      	mov	r2, r0
 8001aba:	701a      	strb	r2, [r3, #0]
}
 8001abc:	e178      	b.n	8001db0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	3354      	adds	r3, #84	; 0x54
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	f083 0301 	eor.w	r3, r3, #1
 8001ad2:	b2d8      	uxtb	r0, r3
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	212c      	movs	r1, #44	; 0x2c
 8001ada:	fb01 f303 	mul.w	r3, r1, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	3354      	adds	r3, #84	; 0x54
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	701a      	strb	r2, [r3, #0]
}
 8001ae6:	e163      	b.n	8001db0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	015a      	lsls	r2, r3, #5
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	f040 80f6 	bne.w	8001cec <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3361      	adds	r3, #97	; 0x61
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d109      	bne.n	8001b28 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	212c      	movs	r1, #44	; 0x2c
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3360      	adds	r3, #96	; 0x60
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	e0c9      	b.n	8001cbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3361      	adds	r3, #97	; 0x61
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d109      	bne.n	8001b50 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3360      	adds	r3, #96	; 0x60
 8001b4a:	2205      	movs	r2, #5
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	e0b5      	b.n	8001cbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3361      	adds	r3, #97	; 0x61
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b06      	cmp	r3, #6
 8001b62:	d009      	beq.n	8001b78 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3361      	adds	r3, #97	; 0x61
 8001b72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d150      	bne.n	8001c1a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	335c      	adds	r3, #92	; 0x5c
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	202c      	movs	r0, #44	; 0x2c
 8001b90:	fb00 f303 	mul.w	r3, r0, r3
 8001b94:	440b      	add	r3, r1
 8001b96:	335c      	adds	r3, #92	; 0x5c
 8001b98:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	212c      	movs	r1, #44	; 0x2c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	335c      	adds	r3, #92	; 0x5c
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d912      	bls.n	8001bd4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	212c      	movs	r1, #44	; 0x2c
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	335c      	adds	r3, #92	; 0x5c
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3360      	adds	r3, #96	; 0x60
 8001bce:	2204      	movs	r2, #4
 8001bd0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001bd2:	e073      	b.n	8001cbc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3360      	adds	r3, #96	; 0x60
 8001be2:	2202      	movs	r2, #2
 8001be4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bfc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c04:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c18:	e050      	b.n	8001cbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	212c      	movs	r1, #44	; 0x2c
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	3361      	adds	r3, #97	; 0x61
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d122      	bne.n	8001c74 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	212c      	movs	r1, #44	; 0x2c
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	3360      	adds	r3, #96	; 0x60
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001c56:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c5e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	015a      	lsls	r2, r3, #5
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e023      	b.n	8001cbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3361      	adds	r3, #97	; 0x61
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b07      	cmp	r3, #7
 8001c86:	d119      	bne.n	8001cbc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	335c      	adds	r3, #92	; 0x5c
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	202c      	movs	r0, #44	; 0x2c
 8001ca0:	fb00 f303 	mul.w	r3, r0, r3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	335c      	adds	r3, #92	; 0x5c
 8001ca8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	212c      	movs	r1, #44	; 0x2c
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3360      	adds	r3, #96	; 0x60
 8001cb8:	2204      	movs	r2, #4
 8001cba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	015a      	lsls	r2, r3, #5
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2302      	movs	r3, #2
 8001ccc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	b2d9      	uxtb	r1, r3
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	202c      	movs	r0, #44	; 0x2c
 8001cd8:	fb00 f303 	mul.w	r3, r0, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	3360      	adds	r3, #96	; 0x60
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f009 fe4b 	bl	800b980 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001cea:	e061      	b.n	8001db0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	2b10      	cmp	r3, #16
 8001d00:	d156      	bne.n	8001db0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	212c      	movs	r1, #44	; 0x2c
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	333f      	adds	r3, #63	; 0x3f
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d111      	bne.n	8001d3a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	212c      	movs	r1, #44	; 0x2c
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	335c      	adds	r3, #92	; 0x5c
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f001 ff2d 	bl	8003b92 <USB_HC_Halt>
 8001d38:	e031      	b.n	8001d9e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	212c      	movs	r1, #44	; 0x2c
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	333f      	adds	r3, #63	; 0x3f
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	212c      	movs	r1, #44	; 0x2c
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	333f      	adds	r3, #63	; 0x3f
 8001d5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d11d      	bne.n	8001d9e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	212c      	movs	r1, #44	; 0x2c
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	335c      	adds	r3, #92	; 0x5c
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d110      	bne.n	8001d9e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	212c      	movs	r1, #44	; 0x2c
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	3361      	adds	r3, #97	; 0x61
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fefa 	bl	8003b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	461a      	mov	r2, r3
 8001dac:	2310      	movs	r3, #16
 8001dae:	6093      	str	r3, [r2, #8]
}
 8001db0:	bf00      	nop
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d11a      	bne.n	8001e1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	461a      	mov	r2, r3
 8001df6:	2304      	movs	r3, #4
 8001df8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	3361      	adds	r3, #97	; 0x61
 8001e08:	2206      	movs	r2, #6
 8001e0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 febb 	bl	8003b92 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001e1c:	e331      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	d12e      	bne.n	8001e92 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e40:	461a      	mov	r2, r3
 8001e42:	2320      	movs	r3, #32
 8001e44:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	212c      	movs	r1, #44	; 0x2c
 8001e4c:	fb01 f303 	mul.w	r3, r1, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	333d      	adds	r3, #61	; 0x3d
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	f040 8313 	bne.w	8002482 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	212c      	movs	r1, #44	; 0x2c
 8001e62:	fb01 f303 	mul.w	r3, r1, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	333d      	adds	r3, #61	; 0x3d
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	212c      	movs	r1, #44	; 0x2c
 8001e74:	fb01 f303 	mul.w	r3, r1, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	3360      	adds	r3, #96	; 0x60
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f001 fe81 	bl	8003b92 <USB_HC_Halt>
}
 8001e90:	e2f7      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea8:	d112      	bne.n	8001ed0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 fe62 	bl	8003b92 <USB_HC_Halt>
}
 8001ece:	e2d8      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d140      	bne.n	8001f68 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	335c      	adds	r3, #92	; 0x5c
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	2b40      	cmp	r3, #64	; 0x40
 8001f0c:	d111      	bne.n	8001f32 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	333d      	adds	r3, #61	; 0x3d
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2340      	movs	r3, #64	; 0x40
 8001f30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2301      	movs	r3, #1
 8001f42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	212c      	movs	r1, #44	; 0x2c
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	3361      	adds	r3, #97	; 0x61
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 fe16 	bl	8003b92 <USB_HC_Halt>
}
 8001f66:	e28c      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7a:	2b40      	cmp	r3, #64	; 0x40
 8001f7c:	d12c      	bne.n	8001fd8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3361      	adds	r3, #97	; 0x61
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	333d      	adds	r3, #61	; 0x3d
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	335c      	adds	r3, #92	; 0x5c
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 fde7 	bl	8003b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2340      	movs	r3, #64	; 0x40
 8001fd4:	6093      	str	r3, [r2, #8]
}
 8001fd6:	e254      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d11a      	bne.n	8002024 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	3361      	adds	r3, #97	; 0x61
 800200e:	2205      	movs	r2, #5
 8002010:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f001 fdb8 	bl	8003b92 <USB_HC_Halt>
}
 8002022:	e22e      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	4413      	add	r3, r2
 800202c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b10      	cmp	r3, #16
 8002038:	d140      	bne.n	80020bc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	212c      	movs	r1, #44	; 0x2c
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
 8002046:	335c      	adds	r3, #92	; 0x5c
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	212c      	movs	r1, #44	; 0x2c
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	3361      	adds	r3, #97	; 0x61
 800205a:	2203      	movs	r2, #3
 800205c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	212c      	movs	r1, #44	; 0x2c
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	4413      	add	r3, r2
 800206a:	333d      	adds	r3, #61	; 0x3d
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d112      	bne.n	8002098 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	333c      	adds	r3, #60	; 0x3c
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d108      	bne.n	8002098 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	212c      	movs	r1, #44	; 0x2c
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	4413      	add	r3, r2
 8002092:	333d      	adds	r3, #61	; 0x3d
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f001 fd75 	bl	8003b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	461a      	mov	r2, r3
 80020b6:	2310      	movs	r3, #16
 80020b8:	6093      	str	r3, [r2, #8]
}
 80020ba:	e1e2      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ce:	2b80      	cmp	r3, #128	; 0x80
 80020d0:	d164      	bne.n	800219c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d111      	bne.n	80020fe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3361      	adds	r3, #97	; 0x61
 80020e8:	2206      	movs	r2, #6
 80020ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 fd4b 	bl	8003b92 <USB_HC_Halt>
 80020fc:	e044      	b.n	8002188 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	335c      	adds	r3, #92	; 0x5c
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	202c      	movs	r0, #44	; 0x2c
 8002116:	fb00 f303 	mul.w	r3, r0, r3
 800211a:	440b      	add	r3, r1
 800211c:	335c      	adds	r3, #92	; 0x5c
 800211e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	335c      	adds	r3, #92	; 0x5c
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d920      	bls.n	8002176 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	335c      	adds	r3, #92	; 0x5c
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	3360      	adds	r3, #96	; 0x60
 8002154:	2204      	movs	r2, #4
 8002156:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	b2d9      	uxtb	r1, r3
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	202c      	movs	r0, #44	; 0x2c
 8002162:	fb00 f303 	mul.w	r3, r0, r3
 8002166:	4413      	add	r3, r2
 8002168:	3360      	adds	r3, #96	; 0x60
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f009 fc06 	bl	800b980 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002174:	e008      	b.n	8002188 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	212c      	movs	r1, #44	; 0x2c
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3360      	adds	r3, #96	; 0x60
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	461a      	mov	r2, r3
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	6093      	str	r3, [r2, #8]
}
 800219a:	e172      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b2:	d11b      	bne.n	80021ec <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	212c      	movs	r1, #44	; 0x2c
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	3361      	adds	r3, #97	; 0x61
 80021c2:	2208      	movs	r2, #8
 80021c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 fcde 	bl	8003b92 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e8:	6093      	str	r3, [r2, #8]
}
 80021ea:	e14a      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	f040 813f 	bne.w	8002482 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	3361      	adds	r3, #97	; 0x61
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d17d      	bne.n	8002314 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	3360      	adds	r3, #96	; 0x60
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	333f      	adds	r3, #63	; 0x3f
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d00a      	beq.n	8002254 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	333f      	adds	r3, #63	; 0x3f
 800224c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800224e:	2b03      	cmp	r3, #3
 8002250:	f040 8100 	bne.w	8002454 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d113      	bne.n	8002284 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	212c      	movs	r1, #44	; 0x2c
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4413      	add	r3, r2
 8002268:	3355      	adds	r3, #85	; 0x55
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f083 0301 	eor.w	r3, r3, #1
 8002270:	b2d8      	uxtb	r0, r3
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	3355      	adds	r3, #85	; 0x55
 8002280:	4602      	mov	r2, r0
 8002282:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b01      	cmp	r3, #1
 800228a:	f040 80e3 	bne.w	8002454 <HCD_HC_OUT_IRQHandler+0x69c>
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	334c      	adds	r3, #76	; 0x4c
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80d8 	beq.w	8002454 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	212c      	movs	r1, #44	; 0x2c
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	334c      	adds	r3, #76	; 0x4c
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	202c      	movs	r0, #44	; 0x2c
 80022ba:	fb00 f202 	mul.w	r2, r0, r2
 80022be:	440a      	add	r2, r1
 80022c0:	3240      	adds	r2, #64	; 0x40
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	3b01      	subs	r3, #1
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	202c      	movs	r0, #44	; 0x2c
 80022ce:	fb00 f202 	mul.w	r2, r0, r2
 80022d2:	440a      	add	r2, r1
 80022d4:	3240      	adds	r2, #64	; 0x40
 80022d6:	8812      	ldrh	r2, [r2, #0]
 80022d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80b5 	beq.w	8002454 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	3355      	adds	r3, #85	; 0x55
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	f083 0301 	eor.w	r3, r3, #1
 80022fe:	b2d8      	uxtb	r0, r3
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	3355      	adds	r3, #85	; 0x55
 800230e:	4602      	mov	r2, r0
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	e09f      	b.n	8002454 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	3361      	adds	r3, #97	; 0x61
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d109      	bne.n	800233c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	3360      	adds	r3, #96	; 0x60
 8002336:	2202      	movs	r2, #2
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	e08b      	b.n	8002454 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	3361      	adds	r3, #97	; 0x61
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b04      	cmp	r3, #4
 800234e:	d109      	bne.n	8002364 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3360      	adds	r3, #96	; 0x60
 800235e:	2202      	movs	r2, #2
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	e077      	b.n	8002454 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	3361      	adds	r3, #97	; 0x61
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d109      	bne.n	800238c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	3360      	adds	r3, #96	; 0x60
 8002386:	2205      	movs	r2, #5
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e063      	b.n	8002454 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3361      	adds	r3, #97	; 0x61
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b06      	cmp	r3, #6
 800239e:	d009      	beq.n	80023b4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	3361      	adds	r3, #97	; 0x61
 80023ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d14f      	bne.n	8002454 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	335c      	adds	r3, #92	; 0x5c
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	202c      	movs	r0, #44	; 0x2c
 80023cc:	fb00 f303 	mul.w	r3, r0, r3
 80023d0:	440b      	add	r3, r1
 80023d2:	335c      	adds	r3, #92	; 0x5c
 80023d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	335c      	adds	r3, #92	; 0x5c
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d912      	bls.n	8002410 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	335c      	adds	r3, #92	; 0x5c
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3360      	adds	r3, #96	; 0x60
 800240a:	2204      	movs	r2, #4
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e021      	b.n	8002454 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3360      	adds	r3, #96	; 0x60
 800241e:	2202      	movs	r2, #2
 8002420:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002438:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002440:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	461a      	mov	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	461a      	mov	r2, r3
 8002462:	2302      	movs	r3, #2
 8002464:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	b2d9      	uxtb	r1, r3
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	202c      	movs	r0, #44	; 0x2c
 8002470:	fb00 f303 	mul.w	r3, r0, r3
 8002474:	4413      	add	r3, r2
 8002476:	3360      	adds	r3, #96	; 0x60
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f009 fa7f 	bl	800b980 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002482:	bf00      	nop
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b08a      	sub	sp, #40	; 0x28
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	0c5b      	lsrs	r3, r3, #17
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024be:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d004      	beq.n	80024d0 <HCD_RXQLVL_IRQHandler+0x46>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	f000 80a9 	beq.w	8002620 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80024ce:	e0aa      	b.n	8002626 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80a6 	beq.w	8002624 <HCD_RXQLVL_IRQHandler+0x19a>
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	3344      	adds	r3, #68	; 0x44
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 809b 	beq.w	8002624 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	3350      	adds	r3, #80	; 0x50
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	441a      	add	r2, r3
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	202c      	movs	r0, #44	; 0x2c
 8002508:	fb00 f303 	mul.w	r3, r0, r3
 800250c:	440b      	add	r3, r1
 800250e:	334c      	adds	r3, #76	; 0x4c
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d87a      	bhi.n	800260c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3344      	adds	r3, #68	; 0x44
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	b292      	uxth	r2, r2
 800252e:	4619      	mov	r1, r3
 8002530:	f000 fe86 	bl	8003240 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	3344      	adds	r3, #68	; 0x44
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	441a      	add	r2, r3
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	202c      	movs	r0, #44	; 0x2c
 800254e:	fb00 f303 	mul.w	r3, r0, r3
 8002552:	440b      	add	r3, r1
 8002554:	3344      	adds	r3, #68	; 0x44
 8002556:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3350      	adds	r3, #80	; 0x50
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	441a      	add	r2, r3
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	202c      	movs	r0, #44	; 0x2c
 8002572:	fb00 f303 	mul.w	r3, r0, r3
 8002576:	440b      	add	r3, r1
 8002578:	3350      	adds	r3, #80	; 0x50
 800257a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	0cdb      	lsrs	r3, r3, #19
 800258c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002590:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	3340      	adds	r3, #64	; 0x40
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d13c      	bne.n	8002624 <HCD_RXQLVL_IRQHandler+0x19a>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d039      	beq.n	8002624 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	461a      	mov	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3354      	adds	r3, #84	; 0x54
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	f083 0301 	eor.w	r3, r3, #1
 80025f6:	b2d8      	uxtb	r0, r3
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	3354      	adds	r3, #84	; 0x54
 8002606:	4602      	mov	r2, r0
 8002608:	701a      	strb	r2, [r3, #0]
      break;
 800260a:	e00b      	b.n	8002624 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	3360      	adds	r3, #96	; 0x60
 800261a:	2204      	movs	r2, #4
 800261c:	701a      	strb	r2, [r3, #0]
      break;
 800261e:	e001      	b.n	8002624 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002620:	bf00      	nop
 8002622:	e000      	b.n	8002626 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002624:	bf00      	nop
  }
}
 8002626:	bf00      	nop
 8002628:	3728      	adds	r7, #40	; 0x28
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800265a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b02      	cmp	r3, #2
 8002664:	d10b      	bne.n	800267e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d102      	bne.n	8002676 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f009 f969 	bl	800b948 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b08      	cmp	r3, #8
 8002686:	d132      	bne.n	80026ee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f043 0308 	orr.w	r3, r3, #8
 800268e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b04      	cmp	r3, #4
 8002698:	d126      	bne.n	80026e8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d113      	bne.n	80026ca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80026a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026ac:	d106      	bne.n	80026bc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2102      	movs	r1, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 ff31 	bl	800351c <USB_InitFSLSPClkSel>
 80026ba:	e011      	b.n	80026e0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2101      	movs	r1, #1
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 ff2a 	bl	800351c <USB_InitFSLSPClkSel>
 80026c8:	e00a      	b.n	80026e0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d106      	bne.n	80026e0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d8:	461a      	mov	r2, r3
 80026da:	f64e 2360 	movw	r3, #60000	; 0xea60
 80026de:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f009 f95b 	bl	800b99c <HAL_HCD_PortEnabled_Callback>
 80026e6:	e002      	b.n	80026ee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f009 f965 	bl	800b9b8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d103      	bne.n	8002700 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f043 0320 	orr.w	r3, r3, #32
 80026fe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e267      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d075      	beq.n	800281e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002732:	4b88      	ldr	r3, [pc, #544]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d00c      	beq.n	8002758 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273e:	4b85      	ldr	r3, [pc, #532]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002746:	2b08      	cmp	r3, #8
 8002748:	d112      	bne.n	8002770 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274a:	4b82      	ldr	r3, [pc, #520]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002756:	d10b      	bne.n	8002770 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	4b7e      	ldr	r3, [pc, #504]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d05b      	beq.n	800281c <HAL_RCC_OscConfig+0x108>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d157      	bne.n	800281c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e242      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002778:	d106      	bne.n	8002788 <HAL_RCC_OscConfig+0x74>
 800277a:	4b76      	ldr	r3, [pc, #472]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a75      	ldr	r2, [pc, #468]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e01d      	b.n	80027c4 <HAL_RCC_OscConfig+0xb0>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x98>
 8002792:	4b70      	ldr	r3, [pc, #448]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6f      	ldr	r2, [pc, #444]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b6d      	ldr	r3, [pc, #436]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6c      	ldr	r2, [pc, #432]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0xb0>
 80027ac:	4b69      	ldr	r3, [pc, #420]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a68      	ldr	r2, [pc, #416]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b66      	ldr	r3, [pc, #408]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a65      	ldr	r2, [pc, #404]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe f89e 	bl	800090c <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe f89a 	bl	800090c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e207      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b5b      	ldr	r3, [pc, #364]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0xc0>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe f88a 	bl	800090c <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe f886 	bl	800090c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e1f3      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	4b51      	ldr	r3, [pc, #324]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0xe8>
 800281a:	e000      	b.n	800281e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d063      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800282a:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002836:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800283e:	2b08      	cmp	r3, #8
 8002840:	d11c      	bne.n	800287c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b44      	ldr	r3, [pc, #272]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	4b41      	ldr	r3, [pc, #260]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_RCC_OscConfig+0x152>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e1c7      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4937      	ldr	r1, [pc, #220]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	e03a      	b.n	80028f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002884:	4b34      	ldr	r3, [pc, #208]	; (8002958 <HAL_RCC_OscConfig+0x244>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7fe f83f 	bl	800090c <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002892:	f7fe f83b 	bl	800090c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e1a8      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4925      	ldr	r1, [pc, #148]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]
 80028c4:	e015      	b.n	80028f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCC_OscConfig+0x244>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe f81e 	bl	800090c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d4:	f7fe f81a 	bl	800090c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e187      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d036      	beq.n	800296c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_RCC_OscConfig+0x248>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fd fffe 	bl	800090c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002914:	f7fd fffa 	bl	800090c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e167      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x240>)
 8002928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x200>
 8002932:	e01b      	b.n	800296c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <HAL_RCC_OscConfig+0x248>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293a:	f7fd ffe7 	bl	800090c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	e00e      	b.n	8002960 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002942:	f7fd ffe3 	bl	800090c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d907      	bls.n	8002960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e150      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
 8002954:	40023800 	.word	0x40023800
 8002958:	42470000 	.word	0x42470000
 800295c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b88      	ldr	r3, [pc, #544]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ea      	bne.n	8002942 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8097 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b81      	ldr	r3, [pc, #516]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10f      	bne.n	80029aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b7d      	ldr	r3, [pc, #500]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a7c      	ldr	r2, [pc, #496]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b7a      	ldr	r3, [pc, #488]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b77      	ldr	r3, [pc, #476]	; (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d118      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b74      	ldr	r3, [pc, #464]	; (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a73      	ldr	r2, [pc, #460]	; (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c2:	f7fd ffa3 	bl	800090c <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ca:	f7fd ff9f 	bl	800090c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e10c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	4b6a      	ldr	r3, [pc, #424]	; (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x2ea>
 80029f0:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	4a63      	ldr	r2, [pc, #396]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	; 0x70
 80029fc:	e01c      	b.n	8002a38 <HAL_RCC_OscConfig+0x324>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x30c>
 8002a06:	4b5f      	ldr	r3, [pc, #380]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a5e      	ldr	r2, [pc, #376]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6713      	str	r3, [r2, #112]	; 0x70
 8002a12:	4b5c      	ldr	r3, [pc, #368]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a16:	4a5b      	ldr	r2, [pc, #364]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0x324>
 8002a20:	4b58      	ldr	r3, [pc, #352]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a57      	ldr	r2, [pc, #348]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2c:	4b55      	ldr	r3, [pc, #340]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4a54      	ldr	r2, [pc, #336]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a32:	f023 0304 	bic.w	r3, r3, #4
 8002a36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fd ff64 	bl	800090c <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fd ff60 	bl	800090c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0cb      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	4b49      	ldr	r3, [pc, #292]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0ee      	beq.n	8002a48 <HAL_RCC_OscConfig+0x334>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6c:	f7fd ff4e 	bl	800090c <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fd ff4a 	bl	800090c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0b5      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ee      	bne.n	8002a74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	4a38      	ldr	r2, [pc, #224]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80a1 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab2:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d05c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d141      	bne.n	8002b4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b31      	ldr	r3, [pc, #196]	; (8002b8c <HAL_RCC_OscConfig+0x478>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fd ff1e 	bl	800090c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fd ff1a 	bl	800090c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e087      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	491b      	ldr	r1, [pc, #108]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_OscConfig+0x478>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fd fef3 	bl	800090c <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7fd feef 	bl	800090c <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e05c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x416>
 8002b48:	e054      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_RCC_OscConfig+0x478>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fd fedc 	bl	800090c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fd fed8 	bl	800090c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e045      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x444>
 8002b76:	e03d      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e038      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b90:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <HAL_RCC_OscConfig+0x4ec>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d028      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d121      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d11a      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d111      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d107      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0cc      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d90c      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b63      	ldr	r3, [pc, #396]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0b8      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c58:	4b59      	ldr	r3, [pc, #356]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c70:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4a52      	ldr	r2, [pc, #328]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	494d      	ldr	r1, [pc, #308]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d044      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d119      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e07f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	4b3f      	ldr	r3, [pc, #252]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e06f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e067      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce2:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f023 0203 	bic.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4934      	ldr	r1, [pc, #208]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf4:	f7fd fe0a 	bl	800090c <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f7fd fe06 	bl	800090c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e04f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 020c 	and.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1eb      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d20c      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e032      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4916      	ldr	r1, [pc, #88]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	490e      	ldr	r1, [pc, #56]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d8a:	f000 f821 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	490a      	ldr	r1, [pc, #40]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	5ccb      	ldrb	r3, [r1, r3]
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x1c8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fd6a 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023c00 	.word	0x40023c00
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	0800c09c 	.word	0x0800c09c
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	20000004 	.word	0x20000004

08002dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd4:	b090      	sub	sp, #64	; 0x40
 8002dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
 8002ddc:	2300      	movs	r3, #0
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de0:	2300      	movs	r3, #0
 8002de2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de8:	4b59      	ldr	r3, [pc, #356]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 030c 	and.w	r3, r3, #12
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d00d      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x40>
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	f200 80a1 	bhi.w	8002f3c <HAL_RCC_GetSysClockFreq+0x16c>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x34>
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d003      	beq.n	8002e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e02:	e09b      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e04:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e08:	e09b      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e0a:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e0e:	e098      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e10:	4b4f      	ldr	r3, [pc, #316]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e1a:	4b4d      	ldr	r3, [pc, #308]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d028      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e26:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	099b      	lsrs	r3, r3, #6
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	623b      	str	r3, [r7, #32]
 8002e30:	627a      	str	r2, [r7, #36]	; 0x24
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e3c:	fb03 f201 	mul.w	r2, r3, r1
 8002e40:	2300      	movs	r3, #0
 8002e42:	fb00 f303 	mul.w	r3, r0, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	4a43      	ldr	r2, [pc, #268]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e4a:	fba0 1202 	umull	r1, r2, r0, r2
 8002e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e50:	460a      	mov	r2, r1
 8002e52:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e56:	4413      	add	r3, r2
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	61fa      	str	r2, [r7, #28]
 8002e62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e6a:	f7fd f9b5 	bl	80001d8 <__aeabi_uldivmod>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4613      	mov	r3, r2
 8002e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e76:	e053      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e78:	4b35      	ldr	r3, [pc, #212]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	2200      	movs	r2, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	617a      	str	r2, [r7, #20]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e8a:	f04f 0b00 	mov.w	fp, #0
 8002e8e:	4652      	mov	r2, sl
 8002e90:	465b      	mov	r3, fp
 8002e92:	f04f 0000 	mov.w	r0, #0
 8002e96:	f04f 0100 	mov.w	r1, #0
 8002e9a:	0159      	lsls	r1, r3, #5
 8002e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea0:	0150      	lsls	r0, r2, #5
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	ebb2 080a 	subs.w	r8, r2, sl
 8002eaa:	eb63 090b 	sbc.w	r9, r3, fp
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002eba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ebe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ec2:	ebb2 0408 	subs.w	r4, r2, r8
 8002ec6:	eb63 0509 	sbc.w	r5, r3, r9
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	00eb      	lsls	r3, r5, #3
 8002ed4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ed8:	00e2      	lsls	r2, r4, #3
 8002eda:	4614      	mov	r4, r2
 8002edc:	461d      	mov	r5, r3
 8002ede:	eb14 030a 	adds.w	r3, r4, sl
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	eb45 030b 	adc.w	r3, r5, fp
 8002ee8:	607b      	str	r3, [r7, #4]
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	028b      	lsls	r3, r1, #10
 8002efa:	4621      	mov	r1, r4
 8002efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f00:	4621      	mov	r1, r4
 8002f02:	028a      	lsls	r2, r1, #10
 8002f04:	4610      	mov	r0, r2
 8002f06:	4619      	mov	r1, r3
 8002f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	60fa      	str	r2, [r7, #12]
 8002f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f14:	f7fd f960 	bl	80001d8 <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	0c1b      	lsrs	r3, r3, #16
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f3a:	e002      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3740      	adds	r7, #64	; 0x40
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	00f42400 	.word	0x00f42400
 8002f58:	017d7840 	.word	0x017d7840

08002f5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	f107 001c 	add.w	r0, r7, #28
 8002f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d122      	bne.n	8002fba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f9c0 	bl	8003334 <USB_CoreReset>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	e01a      	b.n	8002ff0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f9b4 	bl	8003334 <USB_CoreReset>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
 8002fe2:	e005      	b.n	8002ff0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d10b      	bne.n	800300e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f043 0206 	orr.w	r2, r3, #6
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800301a:	b004      	add	sp, #16
 800301c:	4770      	bx	lr

0800301e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f043 0201 	orr.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f023 0201 	bic.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d115      	bne.n	80030b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003090:	2001      	movs	r0, #1
 8003092:	f7fd fc47 	bl	8000924 <HAL_Delay>
      ms++;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3301      	adds	r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f93a 	bl	8003316 <USB_GetMode>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d01e      	beq.n	80030e6 <USB_SetCurrentMode+0x84>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b31      	cmp	r3, #49	; 0x31
 80030ac:	d9f0      	bls.n	8003090 <USB_SetCurrentMode+0x2e>
 80030ae:	e01a      	b.n	80030e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d115      	bne.n	80030e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030c2:	2001      	movs	r0, #1
 80030c4:	f7fd fc2e 	bl	8000924 <HAL_Delay>
      ms++;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3301      	adds	r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f921 	bl	8003316 <USB_GetMode>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <USB_SetCurrentMode+0x84>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b31      	cmp	r3, #49	; 0x31
 80030de:	d9f0      	bls.n	80030c2 <USB_SetCurrentMode+0x60>
 80030e0:	e001      	b.n	80030e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e005      	b.n	80030f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b32      	cmp	r3, #50	; 0x32
 80030ea:	d101      	bne.n	80030f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3301      	adds	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <USB_FlushTxFifo+0x64>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e01b      	b.n	8003154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	daf2      	bge.n	800310a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	019b      	lsls	r3, r3, #6
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3301      	adds	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a08      	ldr	r2, [pc, #32]	; (8003160 <USB_FlushTxFifo+0x64>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e006      	b.n	8003154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b20      	cmp	r3, #32
 8003150:	d0f0      	beq.n	8003134 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	00030d40 	.word	0x00030d40

08003164 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3301      	adds	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a11      	ldr	r2, [pc, #68]	; (80031c0 <USB_FlushRxFifo+0x5c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e018      	b.n	80031b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	daf2      	bge.n	8003170 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2210      	movs	r2, #16
 8003192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3301      	adds	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a08      	ldr	r2, [pc, #32]	; (80031c0 <USB_FlushRxFifo+0x5c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e006      	b.n	80031b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d0f0      	beq.n	8003194 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	00030d40 	.word	0x00030d40

080031c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	; 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	4611      	mov	r1, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	460b      	mov	r3, r1
 80031d4:	71fb      	strb	r3, [r7, #7]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80031e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d123      	bne.n	8003232 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80031ea:	88bb      	ldrh	r3, [r7, #4]
 80031ec:	3303      	adds	r3, #3
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	e018      	b.n	800322a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	031a      	lsls	r2, r3, #12
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003204:	461a      	mov	r2, r3
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	3301      	adds	r3, #1
 8003210:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3301      	adds	r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3301      	adds	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	3301      	adds	r3, #1
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	429a      	cmp	r2, r3
 8003230:	d3e2      	bcc.n	80031f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3724      	adds	r7, #36	; 0x24
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003240:	b480      	push	{r7}
 8003242:	b08b      	sub	sp, #44	; 0x2c
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	4613      	mov	r3, r2
 800324c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	b29b      	uxth	r3, r3
 800325c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
 800326a:	e014      	b.n	8003296 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	601a      	str	r2, [r3, #0]
    pDest++;
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	3301      	adds	r3, #1
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	3301      	adds	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	3301      	adds	r3, #1
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	3301      	adds	r3, #1
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	3301      	adds	r3, #1
 8003294:	623b      	str	r3, [r7, #32]
 8003296:	6a3a      	ldr	r2, [r7, #32]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	429a      	cmp	r2, r3
 800329c:	d3e6      	bcc.n	800326c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800329e:	8bfb      	ldrh	r3, [r7, #30]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01e      	beq.n	80032e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ae:	461a      	mov	r2, r3
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	701a      	strb	r2, [r3, #0]
      i++;
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	3301      	adds	r3, #1
 80032ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	3301      	adds	r3, #1
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80032d6:	8bfb      	ldrh	r3, [r7, #30]
 80032d8:	3b01      	subs	r3, #1
 80032da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80032dc:	8bfb      	ldrh	r3, [r7, #30]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1ea      	bne.n	80032b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	372c      	adds	r7, #44	; 0x2c
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4013      	ands	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003308:	68fb      	ldr	r3, [r7, #12]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 0301 	and.w	r3, r3, #1
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3301      	adds	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4a13      	ldr	r2, [pc, #76]	; (8003398 <USB_CoreReset+0x64>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e01b      	b.n	800338a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	daf2      	bge.n	8003340 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3301      	adds	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4a09      	ldr	r2, [pc, #36]	; (8003398 <USB_CoreReset+0x64>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e006      	b.n	800338a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	d0f0      	beq.n	800336a <USB_CoreReset+0x36>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	00030d40 	.word	0x00030d40

0800339c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800339c:	b084      	sub	sp, #16
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80033aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80033bc:	461a      	mov	r2, r3
 80033be:	2300      	movs	r3, #0
 80033c0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d018      	beq.n	8003424 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10a      	bne.n	800340e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	e014      	b.n	8003438 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e009      	b.n	8003438 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003432:	f023 0304 	bic.w	r3, r3, #4
 8003436:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003438:	2110      	movs	r1, #16
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff fe5e 	bl	80030fc <USB_FlushTxFifo>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff fe8a 	bl	8003164 <USB_FlushRxFifo>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	e015      	b.n	800348c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346c:	461a      	mov	r2, r3
 800346e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003472:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003480:	461a      	mov	r2, r3
 8003482:	2300      	movs	r3, #0
 8003484:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	3301      	adds	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	429a      	cmp	r2, r3
 8003492:	d3e5      	bcc.n	8003460 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034a0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a13      	ldr	r2, [pc, #76]	; (8003508 <USB_HostInit+0x16c>)
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a13      	ldr	r2, [pc, #76]	; (800350c <USB_HostInit+0x170>)
 80034c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80034c4:	e009      	b.n	80034da <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a10      	ldr	r2, [pc, #64]	; (8003510 <USB_HostInit+0x174>)
 80034d0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <USB_HostInit+0x178>)
 80034d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f043 0210 	orr.w	r2, r3, #16
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699a      	ldr	r2, [r3, #24]
 80034f0:	4b09      	ldr	r3, [pc, #36]	; (8003518 <USB_HostInit+0x17c>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003504:	b004      	add	sp, #16
 8003506:	4770      	bx	lr
 8003508:	01000200 	.word	0x01000200
 800350c:	00e00300 	.word	0x00e00300
 8003510:	00600080 	.word	0x00600080
 8003514:	004000e0 	.word	0x004000e0
 8003518:	a3200008 	.word	0xa3200008

0800351c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003564:	461a      	mov	r2, r3
 8003566:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800356a:	6053      	str	r3, [r2, #4]
 800356c:	e009      	b.n	8003582 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d106      	bne.n	8003582 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800357a:	461a      	mov	r2, r3
 800357c:	f241 7370 	movw	r3, #6000	; 0x1770
 8003580:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80035ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035be:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80035c0:	2064      	movs	r0, #100	; 0x64
 80035c2:	f7fd f9af 	bl	8000924 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80035ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80035d4:	200a      	movs	r0, #10
 80035d6:	f7fd f9a5 	bl	8000924 <HAL_Delay>

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003608:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <USB_DriveVbus+0x44>
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d106      	bne.n	8003628 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003626:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800362e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003632:	d109      	bne.n	8003648 <USB_DriveVbus+0x64>
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003646:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	0c5b      	lsrs	r3, r3, #17
 8003674:	f003 0303 	and.w	r3, r3, #3
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	b29b      	uxth	r3, r3
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	70fb      	strb	r3, [r7, #3]
 80036ba:	460b      	mov	r3, r1
 80036bc:	70bb      	strb	r3, [r7, #2]
 80036be:	4613      	mov	r3, r2
 80036c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d6:	461a      	mov	r2, r3
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80036de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d87e      	bhi.n	80037e4 <USB_HC_Init+0x13c>
 80036e6:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <USB_HC_Init+0x44>)
 80036e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ec:	080036fd 	.word	0x080036fd
 80036f0:	080037a7 	.word	0x080037a7
 80036f4:	080036fd 	.word	0x080036fd
 80036f8:	08003769 	.word	0x08003769
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4413      	add	r3, r2
 8003704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003708:	461a      	mov	r2, r3
 800370a:	f240 439d 	movw	r3, #1181	; 0x49d
 800370e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003710:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003714:	2b00      	cmp	r3, #0
 8003716:	da10      	bge.n	800373a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	0151      	lsls	r1, r2, #5
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	440a      	add	r2, r1
 800372e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003736:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8003738:	e057      	b.n	80037ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d051      	beq.n	80037ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	440a      	add	r2, r1
 800375c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003760:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003764:	60d3      	str	r3, [r2, #12]
      break;
 8003766:	e040      	b.n	80037ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003774:	461a      	mov	r2, r3
 8003776:	f240 639d 	movw	r3, #1693	; 0x69d
 800377a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800377c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003780:	2b00      	cmp	r3, #0
 8003782:	da34      	bge.n	80037ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	0151      	lsls	r1, r2, #5
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	440a      	add	r2, r1
 800379a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800379e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80037a4:	e023      	b.n	80037ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b2:	461a      	mov	r2, r3
 80037b4:	f240 2325 	movw	r3, #549	; 0x225
 80037b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80037ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	da17      	bge.n	80037f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	0151      	lsls	r1, r2, #5
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	440a      	add	r2, r1
 80037d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80037e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80037e2:	e006      	b.n	80037f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	77fb      	strb	r3, [r7, #31]
      break;
 80037e8:	e004      	b.n	80037f4 <USB_HC_Init+0x14c>
      break;
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <USB_HC_Init+0x14c>
      break;
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <USB_HC_Init+0x14c>
      break;
 80037f2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	440a      	add	r2, r1
 800380a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800380e:	f043 0302 	orr.w	r3, r3, #2
 8003812:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	6939      	ldr	r1, [r7, #16]
 800382a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800382e:	4313      	orrs	r3, r2
 8003830:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800383e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003842:	2b00      	cmp	r3, #0
 8003844:	da03      	bge.n	800384e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	e001      	b.n	8003852 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff feff 	bl	8003656 <USB_GetHostSpeed>
 8003858:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800385a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800385e:	2b02      	cmp	r3, #2
 8003860:	d106      	bne.n	8003870 <USB_HC_Init+0x1c8>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d003      	beq.n	8003870 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e001      	b.n	8003874 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003874:	787b      	ldrb	r3, [r7, #1]
 8003876:	059b      	lsls	r3, r3, #22
 8003878:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800387c:	78bb      	ldrb	r3, [r7, #2]
 800387e:	02db      	lsls	r3, r3, #11
 8003880:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003884:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003886:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800388a:	049b      	lsls	r3, r3, #18
 800388c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003890:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003892:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003894:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003898:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	0159      	lsls	r1, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	440b      	add	r3, r1
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038aa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80038b0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80038b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d003      	beq.n	80038c2 <USB_HC_Init+0x21a>
 80038ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d10f      	bne.n	80038e2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	0151      	lsls	r1, r2, #5
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	440a      	add	r2, r1
 80038d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80038e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3720      	adds	r7, #32
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08c      	sub	sp, #48	; 0x30
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	785b      	ldrb	r3, [r3, #1]
 8003902:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8003904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003908:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d02d      	beq.n	8003972 <USB_HC_StartXfer+0x86>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	791b      	ldrb	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d129      	bne.n	8003972 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d117      	bne.n	8003954 <USB_HC_StartXfer+0x68>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	79db      	ldrb	r3, [r3, #7]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <USB_HC_StartXfer+0x48>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	79db      	ldrb	r3, [r3, #7]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d10f      	bne.n	8003954 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	6a3a      	ldr	r2, [r7, #32]
 8003948:	440a      	add	r2, r1
 800394a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <USB_HC_StartXfer+0x86>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	795b      	ldrb	r3, [r3, #5]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	785b      	ldrb	r3, [r3, #1]
 8003966:	4619      	mov	r1, r3
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fa0f 	bl	8003d8c <USB_DoPing>
      return HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e0f8      	b.n	8003b64 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d018      	beq.n	80039ac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	8912      	ldrh	r2, [r2, #8]
 8003982:	4413      	add	r3, r2
 8003984:	3b01      	subs	r3, #1
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	8912      	ldrh	r2, [r2, #8]
 800398a:	fbb3 f3f2 	udiv	r3, r3, r2
 800398e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8003990:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003992:	8b7b      	ldrh	r3, [r7, #26]
 8003994:	429a      	cmp	r2, r3
 8003996:	d90b      	bls.n	80039b0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8003998:	8b7b      	ldrh	r3, [r7, #26]
 800399a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800399c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	8912      	ldrh	r2, [r2, #8]
 80039a2:	fb03 f202 	mul.w	r2, r3, r2
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	611a      	str	r2, [r3, #16]
 80039aa:	e001      	b.n	80039b0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80039ac:	2301      	movs	r3, #1
 80039ae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	78db      	ldrb	r3, [r3, #3]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d007      	beq.n	80039c8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80039b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	8912      	ldrh	r2, [r2, #8]
 80039be:	fb03 f202 	mul.w	r2, r3, r2
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	611a      	str	r2, [r3, #16]
 80039c6:	e003      	b.n	80039d0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80039d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039da:	04d9      	lsls	r1, r3, #19
 80039dc:	4b63      	ldr	r3, [pc, #396]	; (8003b6c <USB_HC_StartXfer+0x280>)
 80039de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80039e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	7a9b      	ldrb	r3, [r3, #10]
 80039e6:	075b      	lsls	r3, r3, #29
 80039e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80039ec:	69f9      	ldr	r1, [r7, #28]
 80039ee:	0148      	lsls	r0, r1, #5
 80039f0:	6a39      	ldr	r1, [r7, #32]
 80039f2:	4401      	add	r1, r0
 80039f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80039f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80039fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	68d9      	ldr	r1, [r3, #12]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a12:	460a      	mov	r2, r1
 8003a14:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bf0c      	ite	eq
 8003a26:	2301      	moveq	r3, #1
 8003a28:	2300      	movne	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	0151      	lsls	r1, r2, #5
 8003a40:	6a3a      	ldr	r2, [r7, #32]
 8003a42:	440a      	add	r2, r1
 8003a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003a4c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	7e7b      	ldrb	r3, [r7, #25]
 8003a5e:	075b      	lsls	r3, r3, #29
 8003a60:	69f9      	ldr	r1, [r7, #28]
 8003a62:	0148      	lsls	r0, r1, #5
 8003a64:	6a39      	ldr	r1, [r7, #32]
 8003a66:	4401      	add	r1, r0
 8003a68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a86:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	78db      	ldrb	r3, [r3, #3]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	e003      	b.n	8003aa2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003aa0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003aa8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e04e      	b.n	8003b64 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	78db      	ldrb	r3, [r3, #3]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d149      	bne.n	8003b62 <USB_HC_StartXfer+0x276>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d045      	beq.n	8003b62 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	79db      	ldrb	r3, [r3, #7]
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d830      	bhi.n	8003b40 <USB_HC_StartXfer+0x254>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <USB_HC_StartXfer+0x1f8>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003b19 	.word	0x08003b19
 8003aec:	08003af5 	.word	0x08003af5
 8003af0:	08003b19 	.word	0x08003b19
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	3303      	adds	r3, #3
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003afe:	8afa      	ldrh	r2, [r7, #22]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d91c      	bls.n	8003b44 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f043 0220 	orr.w	r2, r3, #32
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	619a      	str	r2, [r3, #24]
        }
        break;
 8003b16:	e015      	b.n	8003b44 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	3303      	adds	r3, #3
 8003b1e:	089b      	lsrs	r3, r3, #2
 8003b20:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003b22:	8afa      	ldrh	r2, [r7, #22]
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d90a      	bls.n	8003b48 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8003b3e:	e003      	b.n	8003b48 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8003b40:	bf00      	nop
 8003b42:	e002      	b.n	8003b4a <USB_HC_StartXfer+0x25e>
        break;
 8003b44:	bf00      	nop
 8003b46:	e000      	b.n	8003b4a <USB_HC_StartXfer+0x25e>
        break;
 8003b48:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	68d9      	ldr	r1, [r3, #12]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	785a      	ldrb	r2, [r3, #1]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2000      	movs	r0, #0
 8003b5a:	9000      	str	r0, [sp, #0]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f7ff fb31 	bl	80031c4 <USB_WritePacket>
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3728      	adds	r7, #40	; 0x28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	1ff80000 	.word	0x1ff80000

08003b70 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	b29b      	uxth	r3, r3
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b089      	sub	sp, #36	; 0x24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	0c9b      	lsrs	r3, r3, #18
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	0fdb      	lsrs	r3, r3, #31
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d104      	bne.n	8003bec <USB_HC_Halt+0x5a>
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e0c8      	b.n	8003d7e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <USB_HC_Halt+0x66>
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d163      	bne.n	8003cc0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	0151      	lsls	r1, r2, #5
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	440a      	add	r2, r1
 8003c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c16:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 80ab 	bne.w	8003d7c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d133      	bne.n	8003c9a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	0151      	lsls	r1, r2, #5
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	440a      	add	r2, r1
 8003c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c50:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	0151      	lsls	r1, r2, #5
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	440a      	add	r2, r1
 8003c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c70:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3301      	adds	r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c7e:	d81d      	bhi.n	8003cbc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c96:	d0ec      	beq.n	8003c72 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003c98:	e070      	b.n	8003d7c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	0151      	lsls	r1, r2, #5
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	440a      	add	r2, r1
 8003cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cb8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003cba:	e05f      	b.n	8003d7c <USB_HC_Halt+0x1ea>
            break;
 8003cbc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003cbe:	e05d      	b.n	8003d7c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	0151      	lsls	r1, r2, #5
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	440a      	add	r2, r1
 8003cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cde:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d133      	bne.n	8003d58 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	0151      	lsls	r1, r2, #5
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	440a      	add	r2, r1
 8003d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d2e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3301      	adds	r3, #1
 8003d34:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d3c:	d81d      	bhi.n	8003d7a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d54:	d0ec      	beq.n	8003d30 <USB_HC_Halt+0x19e>
 8003d56:	e011      	b.n	8003d7c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	0151      	lsls	r1, r2, #5
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	440a      	add	r2, r1
 8003d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	e000      	b.n	8003d7c <USB_HC_Halt+0x1ea>
          break;
 8003d7a:	bf00      	nop
    }
  }

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3724      	adds	r7, #36	; 0x24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8003da0:	2301      	movs	r3, #1
 8003da2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	04da      	lsls	r2, r3, #19
 8003da8:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <USB_DoPing+0x74>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	0151      	lsls	r1, r2, #5
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	440a      	add	r2, r1
 8003db4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003db8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dbc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dd4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ddc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dea:	461a      	mov	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	1ff80000 	.word	0x1ff80000

08003e04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff f911 	bl	8003040 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e1e:	2110      	movs	r1, #16
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff f96b 	bl	80030fc <USB_FlushTxFifo>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff f997 	bl	8003164 <USB_FlushRxFifo>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8003e40:	2300      	movs	r3, #0
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	e01f      	b.n	8003e86 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	3301      	adds	r3, #1
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b0f      	cmp	r3, #15
 8003e8a:	d9dc      	bls.n	8003e46 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	e034      	b.n	8003efc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ea8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003eb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003eb8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ed8:	d80c      	bhi.n	8003ef4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef0:	d0ec      	beq.n	8003ecc <USB_StopHost+0xc8>
 8003ef2:	e000      	b.n	8003ef6 <USB_StopHost+0xf2>
        break;
 8003ef4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b0f      	cmp	r3, #15
 8003f00:	d9c7      	bls.n	8003e92 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff f880 	bl	800301e <USB_EnableGlobalInt>

  return ret;
 8003f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b08b      	sub	sp, #44	; 0x2c
 8003f2c:	af04      	add	r7, sp, #16
 8003f2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f005 ffff 	bl	8009f42 <USBH_FindInterface>
 8003f44:	4603      	mov	r3, r0
 8003f46:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 8003f48:	7c7b      	ldrb	r3, [r7, #17]
 8003f4a:	2bff      	cmp	r3, #255	; 0xff
 8003f4c:	d101      	bne.n	8003f52 <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e1a5      	b.n	800429e <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 454c 	ldr.w	r4, [r3, #1356]	; 0x54c
 8003f58:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8003f5c:	f007 ff62 	bl	800be24 <malloc>
 8003f60:	4603      	mov	r3, r0
 8003f62:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 8003f74:	2302      	movs	r3, #2
 8003f76:	e192      	b.n	800429e <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  (void)USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8003f78:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f007 ff6e 	bl	800be60 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fc0e 	bl	80047a6 <USBH_AUDIO_FindAudioStreamingIN>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fcc8 	bl	8004924 <USBH_AUDIO_FindAudioStreamingOUT>
 8003f94:	4603      	mov	r3, r0
 8003f96:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8003f98:	7afb      	ldrb	r3, [r7, #11]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d104      	bne.n	8003fa8 <USBH_AUDIO_InterfaceInit+0x80>
 8003f9e:	7abb      	ldrb	r3, [r7, #10]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d101      	bne.n	8003fa8 <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e17a      	b.n	800429e <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	75fb      	strb	r3, [r7, #23]
 8003fac:	e0c6      	b.n	800413c <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8003fae:	7dfa      	ldrb	r2, [r7, #23]
 8003fb0:	68f9      	ldr	r1, [r7, #12]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	440b      	add	r3, r1
 8003fbc:	333e      	adds	r3, #62	; 0x3e
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d156      	bne.n	8004072 <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 8003fc4:	7dfa      	ldrb	r2, [r7, #23]
 8003fc6:	68f9      	ldr	r1, [r7, #12]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	440b      	add	r3, r1
 8003fd2:	333a      	adds	r3, #58	; 0x3a
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	8aba      	ldrh	r2, [r7, #20]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d24a      	bcs.n	8004072 <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8003fdc:	7dfa      	ldrb	r2, [r7, #23]
 8003fde:	68f9      	ldr	r1, [r7, #12]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	440b      	add	r3, r1
 8003fea:	333a      	adds	r3, #58	; 0x3a
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8003ff0:	7dfa      	ldrb	r2, [r7, #23]
 8003ff2:	68f9      	ldr	r1, [r7, #12]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	440b      	add	r3, r1
 8003ffe:	333d      	adds	r3, #61	; 0x3d
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8004008:	7dfa      	ldrb	r2, [r7, #23]
 800400a:	68f9      	ldr	r1, [r7, #12]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	440b      	add	r3, r1
 8004016:	333c      	adds	r3, #60	; 0x3c
 8004018:	781a      	ldrb	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 8004020:	7dfa      	ldrb	r2, [r7, #23]
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	440b      	add	r3, r1
 800402e:	3338      	adds	r3, #56	; 0x38
 8004030:	781a      	ldrb	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8004038:	7dfa      	ldrb	r2, [r7, #23]
 800403a:	68f9      	ldr	r1, [r7, #12]
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	440b      	add	r3, r1
 8004046:	333a      	adds	r3, #58	; 0x3a
 8004048:	881a      	ldrh	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8004050:	7dfa      	ldrb	r2, [r7, #23]
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	440b      	add	r3, r1
 800405e:	3340      	adds	r3, #64	; 0x40
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 8004072:	7dfa      	ldrb	r2, [r7, #23]
 8004074:	68f9      	ldr	r1, [r7, #12]
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	440b      	add	r3, r1
 8004080:	330c      	adds	r3, #12
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d156      	bne.n	8004136 <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8004088:	7dfa      	ldrb	r2, [r7, #23]
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	440b      	add	r3, r1
 8004096:	3308      	adds	r3, #8
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	8a7a      	ldrh	r2, [r7, #18]
 800409c:	429a      	cmp	r2, r3
 800409e:	d24a      	bcs.n	8004136 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 80040a0:	7dfa      	ldrb	r2, [r7, #23]
 80040a2:	68f9      	ldr	r1, [r7, #12]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	440b      	add	r3, r1
 80040ae:	3308      	adds	r3, #8
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 80040b4:	7dfa      	ldrb	r2, [r7, #23]
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	440b      	add	r3, r1
 80040c2:	330b      	adds	r3, #11
 80040c4:	781a      	ldrb	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 80040cc:	7dfa      	ldrb	r2, [r7, #23]
 80040ce:	68f9      	ldr	r1, [r7, #12]
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	440b      	add	r3, r1
 80040da:	330a      	adds	r3, #10
 80040dc:	781a      	ldrb	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 80040e4:	7dfa      	ldrb	r2, [r7, #23]
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	440b      	add	r3, r1
 80040f2:	3306      	adds	r3, #6
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 80040fc:	7dfa      	ldrb	r2, [r7, #23]
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	440b      	add	r3, r1
 800410a:	3308      	adds	r3, #8
 800410c:	881a      	ldrh	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8004114:	7dfa      	ldrb	r2, [r7, #23]
 8004116:	68f9      	ldr	r1, [r7, #12]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	440b      	add	r3, r1
 8004122:	3340      	adds	r3, #64	; 0x40
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b2da      	uxtb	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	3301      	adds	r3, #1
 800413a:	75fb      	strb	r3, [r7, #23]
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b04      	cmp	r3, #4
 8004140:	f67f af35 	bls.w	8003fae <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fcac 	bl	8004aa2 <USBH_AUDIO_FindHIDControl>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d103      	bne.n	8004158 <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  (void)USBH_AUDIO_ParseCSDescriptors(phost);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fd24 	bl	8004ba6 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004164:	2b01      	cmp	r3, #1
 8004166:	d12e      	bne.n	80041c6 <USBH_AUDIO_InterfaceInit+0x29e>
  {
    (void)USBH_AUDIO_BuildHeadphonePath(phost);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 ff67 	bl	800503c <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8004174:	4619      	mov	r1, r3
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f007 fa93 	bl	800b6a2 <USBH_AllocPipe>
 800417c:	4603      	mov	r3, r0
 800417e:	461a      	mov	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 80041a4:	9202      	str	r2, [sp, #8]
 80041a6:	2201      	movs	r2, #1
 80041a8:	9201      	str	r2, [sp, #4]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4623      	mov	r3, r4
 80041ae:	4602      	mov	r2, r0
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f007 fa47 	bl	800b644 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->headphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80041bc:	2200      	movs	r2, #0
 80041be:	4619      	mov	r1, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f007 fd6e 	bl	800bca2 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d12e      	bne.n	800422e <USBH_AUDIO_InterfaceInit+0x306>
  {
    (void)USBH_AUDIO_BuildMicrophonePath(phost);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 feab 	bl	8004f2c <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80041dc:	4619      	mov	r1, r3
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f007 fa5f 	bl	800b6a2 <USBH_AllocPipe>
 80041e4:	4603      	mov	r3, r0
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 800420c:	9202      	str	r2, [sp, #8]
 800420e:	2201      	movs	r2, #1
 8004210:	9201      	str	r2, [sp, #4]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	4623      	mov	r3, r4
 8004216:	4602      	mov	r2, r0
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f007 fa13 	bl	800b644 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->microphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8004224:	2200      	movs	r2, #0
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f007 fd3a 	bl	800bca2 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8004234:	2b01      	cmp	r3, #1
 8004236:	d12b      	bne.n	8004290 <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f007 fa2e 	bl	800b6a2 <USBH_AllocPipe>
 8004246:	4603      	mov	r3, r0
 8004248:	461a      	mov	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 800426e:	9202      	str	r2, [sp, #8]
 8004270:	2203      	movs	r2, #3
 8004272:	9201      	str	r2, [sp, #4]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	4623      	mov	r3, r4
 8004278:	4602      	mov	r2, r0
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f007 f9e2 	bl	800b644 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        AUDIO_Handle->control.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8004286:	2200      	movs	r2, #0
 8004288:	4619      	mov	r1, r3
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f007 fd09 	bl	800bca2 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd90      	pop	{r4, r7, pc}

080042a6 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d011      	beq.n	80042e6 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    (void)USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80042c8:	4619      	mov	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f007 f9d9 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80042d6:	4619      	mov	r1, r3
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f007 fa04 	bl	800b6e6 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d011      	beq.n	8004314 <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80042f6:	4619      	mov	r1, r3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f007 f9c2 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f007 f9ed 	bl	800b6e6 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800431a:	2b00      	cmp	r3, #0
 800431c:	d011      	beq.n	8004342 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8004324:	4619      	mov	r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f007 f9ab 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f007 f9d6 	bl	800b6e6 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if ((phost->pActiveClass->pData) != 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	4618      	mov	r0, r3
 8004358:	f007 fd6c 	bl	800be34 <free>
    phost->pActiveClass->pData = 0U;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8004362:	2200      	movs	r2, #0
 8004364:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004382:	2301      	movs	r3, #1
 8004384:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	3b01      	subs	r3, #1
 8004390:	2b06      	cmp	r3, #6
 8004392:	f200 80be 	bhi.w	8004512 <USBH_AUDIO_ClassRequest+0x1a2>
 8004396:	a201      	add	r2, pc, #4	; (adr r2, 800439c <USBH_AUDIO_ClassRequest+0x2c>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	080043b9 	.word	0x080043b9
 80043a0:	080044fb 	.word	0x080044fb
 80043a4:	080043b9 	.word	0x080043b9
 80043a8:	080043fb 	.word	0x080043fb
 80043ac:	08004473 	.word	0x08004473
 80043b0:	080044b7 	.word	0x080044b7
 80043b4:	0800445f 	.word	0x0800445f
  {
    case AUDIO_REQ_INIT:
    case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d117      	bne.n	80043f2 <USBH_AUDIO_ClassRequest+0x82>
      {
        req_status = USBH_SetInterface(phost,
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80043c8:	2200      	movs	r2, #0
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f006 fb96 	bl	800aafe <USBH_SetInterface>
 80043d2:	4603      	mov	r3, r0
 80043d4:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d103      	bne.n	80043e4 <USBH_AUDIO_ClassRequest+0x74>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2204      	movs	r2, #4
 80043e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80043e2:	e098      	b.n	8004516 <USBH_AUDIO_ClassRequest+0x1a6>
        else if (req_status == USBH_NOT_SUPPORTED)
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	f040 8095 	bne.w	8004516 <USBH_AUDIO_ClassRequest+0x1a6>
          status = USBH_FAIL;
 80043ec:	2302      	movs	r3, #2
 80043ee:	75fb      	strb	r3, [r7, #23]
      break;
 80043f0:	e091      	b.n	8004516 <USBH_AUDIO_ClassRequest+0x1a6>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2204      	movs	r2, #4
 80043f6:	701a      	strb	r2, [r3, #0]
      break;
 80043f8:	e08d      	b.n	8004516 <USBH_AUDIO_ClassRequest+0x1a6>

    case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004400:	2b01      	cmp	r3, #1
 8004402:	d125      	bne.n	8004450 <USBH_AUDIO_ClassRequest+0xe0>
      {
        req_status = USBH_SetInterface(phost,
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800440a:	2200      	movs	r2, #0
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f006 fb75 	bl	800aafe <USBH_SetInterface>
 8004414:	4603      	mov	r3, r0
 8004416:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d112      	bne.n	8004444 <USBH_AUDIO_ClassRequest+0xd4>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2207      	movs	r2, #7
 8004422:	701a      	strb	r2, [r3, #0]
          AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2206      	movs	r2, #6
 8004428:	705a      	strb	r2, [r3, #1]

          AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
          AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8004442:	e06a      	b.n	800451a <USBH_AUDIO_ClassRequest+0x1aa>
        else if (req_status == USBH_NOT_SUPPORTED)
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d167      	bne.n	800451a <USBH_AUDIO_ClassRequest+0x1aa>
          status = USBH_FAIL;
 800444a:	2302      	movs	r3, #2
 800444c:	75fb      	strb	r3, [r7, #23]
      break;
 800444e:	e064      	b.n	800451a <USBH_AUDIO_ClassRequest+0x1aa>
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2207      	movs	r2, #7
 8004454:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2206      	movs	r2, #6
 800445a:	705a      	strb	r2, [r3, #1]
      break;
 800445c:	e05d      	b.n	800451a <USBH_AUDIO_ClassRequest+0x1aa>

    case AUDIO_REQ_CS_REQUESTS:
      if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f938 	bl	80046d4 <USBH_AUDIO_HandleCSRequest>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d159      	bne.n	800451e <USBH_AUDIO_ClassRequest+0x1ae>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2205      	movs	r2, #5
 800446e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004470:	e055      	b.n	800451e <USBH_AUDIO_ClassRequest+0x1ae>

    case AUDIO_REQ_SET_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8004478:	2b01      	cmp	r3, #1
 800447a:	d118      	bne.n	80044ae <USBH_AUDIO_ClassRequest+0x13e>
      {
        req_status = USBH_SetInterface(phost,
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8004488:	461a      	mov	r2, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f006 fb37 	bl	800aafe <USBH_SetInterface>
 8004490:	4603      	mov	r3, r0
 8004492:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       AUDIO_Handle->microphone.AltSettings);

        if (req_status == USBH_OK)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <USBH_AUDIO_ClassRequest+0x132>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2206      	movs	r2, #6
 800449e:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80044a0:	e03f      	b.n	8004522 <USBH_AUDIO_ClassRequest+0x1b2>
        else if (req_status == USBH_NOT_SUPPORTED)
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d13c      	bne.n	8004522 <USBH_AUDIO_ClassRequest+0x1b2>
          status = USBH_FAIL;
 80044a8:	2302      	movs	r3, #2
 80044aa:	75fb      	strb	r3, [r7, #23]
      break;
 80044ac:	e039      	b.n	8004522 <USBH_AUDIO_ClassRequest+0x1b2>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2206      	movs	r2, #6
 80044b2:	701a      	strb	r2, [r3, #0]
      break;
 80044b4:	e035      	b.n	8004522 <USBH_AUDIO_ClassRequest+0x1b2>
    case AUDIO_REQ_SET_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d118      	bne.n	80044f2 <USBH_AUDIO_ClassRequest+0x182>
      {
        req_status = USBH_SetInterface(phost,
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 80044cc:	461a      	mov	r2, r3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f006 fb15 	bl	800aafe <USBH_SetInterface>
 80044d4:	4603      	mov	r3, r0
 80044d6:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       AUDIO_Handle->headphone.AltSettings);

        if (req_status == USBH_OK)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <USBH_AUDIO_ClassRequest+0x176>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2202      	movs	r2, #2
 80044e2:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80044e4:	e01f      	b.n	8004526 <USBH_AUDIO_ClassRequest+0x1b6>
        else if (req_status == USBH_NOT_SUPPORTED)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d11c      	bne.n	8004526 <USBH_AUDIO_ClassRequest+0x1b6>
          status = USBH_FAIL;
 80044ec:	2302      	movs	r3, #2
 80044ee:	75fb      	strb	r3, [r7, #23]
      break;
 80044f0:	e019      	b.n	8004526 <USBH_AUDIO_ClassRequest+0x1b6>
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2202      	movs	r2, #2
 80044f6:	701a      	strb	r2, [r3, #0]
      break;
 80044f8:	e015      	b.n	8004526 <USBH_AUDIO_ClassRequest+0x1b6>
    case AUDIO_REQ_IDLE:
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2201      	movs	r2, #1
 80044fe:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8004506:	2102      	movs	r1, #2
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
      status  = USBH_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004510:	e00a      	b.n	8004528 <USBH_AUDIO_ClassRequest+0x1b8>

    default:
      break;
 8004512:	bf00      	nop
 8004514:	e008      	b.n	8004528 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8004516:	bf00      	nop
 8004518:	e006      	b.n	8004528 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 800451a:	bf00      	nop
 800451c:	e004      	b.n	8004528 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 800451e:	bf00      	nop
 8004520:	e002      	b.n	8004528 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8004522:	bf00      	nop
 8004524:	e000      	b.n	8004528 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8004526:	bf00      	nop
  }
  return status;
 8004528:	7dfb      	ldrb	r3, [r7, #23]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop

08004534 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af02      	add	r7, sp, #8
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
 8004540:	4613      	mov	r3, r2
 8004542:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8004552:	2301      	movs	r3, #1
 8004554:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	785b      	ldrb	r3, [r3, #1]
 800455a:	3b04      	subs	r3, #4
 800455c:	2b04      	cmp	r3, #4
 800455e:	f200 80aa 	bhi.w	80046b6 <USBH_AUDIO_CSRequest+0x182>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <USBH_AUDIO_CSRequest+0x34>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	080045c5 	.word	0x080045c5
 800456c:	0800460b 	.word	0x0800460b
 8004570:	0800457d 	.word	0x0800457d
 8004574:	0800466b 	.word	0x0800466b
 8004578:	080046b1 	.word	0x080046b1
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	2302      	movs	r3, #2
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	78bb      	ldrb	r3, [r7, #2]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	2302      	movs	r3, #2
 8004588:	2106      	movs	r1, #6
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fe94 	bl	80052b8 <USBH_AC_GetCur>
 8004590:	4603      	mov	r3, r0
 8004592:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	2b01      	cmp	r3, #1
 8004598:	f000 808f 	beq.w	80046ba <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2204      	movs	r2, #4
 80045a0:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80045ae:	3302      	adds	r3, #2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	4313      	orrs	r3, r2
 80045b8:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 80045ba:	897a      	ldrh	r2, [r7, #10]
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 80045c2:	e07a      	b.n	80046ba <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	2302      	movs	r3, #2
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	78bb      	ldrb	r3, [r7, #2]
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	2302      	movs	r3, #2
 80045d0:	2106      	movs	r1, #6
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f001 f835 	bl	8005642 <USBH_AC_GetMin>
 80045d8:	4603      	mov	r3, r0
 80045da:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d06d      	beq.n	80046be <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2205      	movs	r2, #5
 80045e6:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80045f4:	3302      	adds	r3, #2
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4313      	orrs	r3, r2
 80045fe:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8004600:	897a      	ldrh	r2, [r7, #10]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8004608:	e059      	b.n	80046be <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	2302      	movs	r3, #2
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	78bb      	ldrb	r3, [r7, #2]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2302      	movs	r3, #2
 8004616:	2106      	movs	r1, #6
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fee4 	bl	80053e6 <USBH_AC_GetMax>
 800461e:	4603      	mov	r3, r0
 8004620:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d04c      	beq.n	80046c2 <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2207      	movs	r2, #7
 800462c:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800463a:	3302      	adds	r3, #2
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	b29b      	uxth	r3, r3
 8004642:	4313      	orrs	r3, r2
 8004644:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8004646:	897a      	ldrh	r2, [r7, #10]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800465a:	429a      	cmp	r2, r3
 800465c:	d231      	bcs.n	80046c2 <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8004664:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 8004668:	e02b      	b.n	80046c2 <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	2302      	movs	r3, #2
 800466e:	9301      	str	r3, [sp, #4]
 8004670:	78bb      	ldrb	r3, [r7, #2]
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	2302      	movs	r3, #2
 8004676:	2106      	movs	r1, #6
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 ff4b 	bl	8005514 <USBH_AC_GetRes>
 800467e:	4603      	mov	r3, r0
 8004680:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d01e      	beq.n	80046c6 <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2208      	movs	r2, #8
 800468c:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800469a:	3302      	adds	r3, #2
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	4313      	orrs	r3, r2
 80046a4:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 80046a6:	89ba      	ldrh	r2, [r7, #12]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 80046ae:	e00a      	b.n	80046c6 <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	75fb      	strb	r3, [r7, #23]
      break;
 80046b4:	e008      	b.n	80046c8 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 80046b6:	bf00      	nop
 80046b8:	e006      	b.n	80046c8 <USBH_AUDIO_CSRequest+0x194>
      break;
 80046ba:	bf00      	nop
 80046bc:	e004      	b.n	80046c8 <USBH_AUDIO_CSRequest+0x194>
      break;
 80046be:	bf00      	nop
 80046c0:	e002      	b.n	80046c8 <USBH_AUDIO_CSRequest+0x194>
      break;
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <USBH_AUDIO_CSRequest+0x194>
      break;
 80046c6:	bf00      	nop
  }
  return status;
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop

080046d4 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80046fa:	461a      	mov	r2, r3
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff ff19 	bl	8004534 <USBH_AUDIO_CSRequest>
 8004702:	4603      	mov	r3, r0
 8004704:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8004706:	7bbb      	ldrb	r3, [r7, #14]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d01c      	beq.n	8004746 <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d10c      	bne.n	8004730 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]
 800472e:	e007      	b.n	8004740 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8004736:	3b01      	subs	r3, #1
 8004738:	b2da      	uxtb	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2206      	movs	r2, #6
 8004744:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return status;
 8004746:	7bfb      	ldrb	r3, [r7, #15]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800476c:	2b01      	cmp	r3, #1
 800476e:	d102      	bne.n	8004776 <USBH_AUDIO_Process+0x26>
  {
    (void)USBH_AUDIO_OutputStream(phost);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f001 f8e7 	bl	8005944 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800477c:	2b01      	cmp	r3, #1
 800477e:	d102      	bne.n	8004786 <USBH_AUDIO_Process+0x36>
  {
    (void)USBH_AUDIO_InputStream(phost);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 f81d 	bl	80057c0 <USBH_AUDIO_InputStream>
  }

  return status;
 8004786:	7bfb      	ldrb	r3, [r7, #15]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 80047ae:	2302      	movs	r3, #2
 80047b0:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80047c0:	2300      	movs	r3, #0
 80047c2:	73fb      	strb	r3, [r7, #15]
 80047c4:	e09e      	b.n	8004904 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	2132      	movs	r1, #50	; 0x32
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	f203 3347 	addw	r3, r3, #839	; 0x347
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	f040 8090 	bne.w	80048fe <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	2132      	movs	r1, #50	; 0x32
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80047ee:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	f040 8084 	bne.w	80048fe <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	2132      	movs	r1, #50	; 0x32
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	4413      	add	r3, r2
 8004802:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	b25b      	sxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	da77      	bge.n	80048fe <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	2132      	movs	r1, #50	; 0x32
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	4413      	add	r3, r2
 800481a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800481e:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 8004820:	2b00      	cmp	r3, #0
 8004822:	d06c      	beq.n	80048fe <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	7bba      	ldrb	r2, [r7, #14]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	2032      	movs	r0, #50	; 0x32
 800482c:	fb00 f303 	mul.w	r3, r0, r3
 8004830:	440b      	add	r3, r1
 8004832:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004836:	7818      	ldrb	r0, [r3, #0]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	440b      	add	r3, r1
 8004844:	3306      	adds	r3, #6
 8004846:	4602      	mov	r2, r0
 8004848:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	7bba      	ldrb	r2, [r7, #14]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	2032      	movs	r0, #50	; 0x32
 8004852:	fb00 f303 	mul.w	r3, r0, r3
 8004856:	440b      	add	r3, r1
 8004858:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800485c:	8818      	ldrh	r0, [r3, #0]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	440b      	add	r3, r1
 800486a:	3308      	adds	r3, #8
 800486c:	4602      	mov	r2, r0
 800486e:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	7bba      	ldrb	r2, [r7, #14]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	2032      	movs	r0, #50	; 0x32
 8004878:	fb00 f303 	mul.w	r3, r0, r3
 800487c:	440b      	add	r3, r1
 800487e:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8004882:	7818      	ldrb	r0, [r3, #0]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	440b      	add	r3, r1
 8004890:	330b      	adds	r3, #11
 8004892:	4602      	mov	r2, r0
 8004894:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	7bba      	ldrb	r2, [r7, #14]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	2032      	movs	r0, #50	; 0x32
 800489e:	fb00 f303 	mul.w	r3, r0, r3
 80048a2:	440b      	add	r3, r1
 80048a4:	f203 3345 	addw	r3, r3, #837	; 0x345
 80048a8:	7818      	ldrb	r0, [r3, #0]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	440b      	add	r3, r1
 80048b6:	330a      	adds	r3, #10
 80048b8:	4602      	mov	r2, r0
 80048ba:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	2132      	movs	r1, #50	; 0x32
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	4413      	add	r3, r2
 80048c8:	f203 3352 	addw	r3, r3, #850	; 0x352
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	7bba      	ldrb	r2, [r7, #14]
 80048d0:	b298      	uxth	r0, r3
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	440b      	add	r3, r1
 80048de:	330e      	adds	r3, #14
 80048e0:	4602      	mov	r2, r0
 80048e2:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 80048e4:	7bba      	ldrb	r2, [r7, #14]
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	440b      	add	r3, r1
 80048f2:	330c      	adds	r3, #12
 80048f4:	2201      	movs	r2, #1
 80048f6:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80048f8:	7bbb      	ldrb	r3, [r7, #14]
 80048fa:	3301      	adds	r3, #1
 80048fc:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	3301      	adds	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b09      	cmp	r3, #9
 8004908:	f67f af5d 	bls.w	80047c6 <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 800490c:	7bbb      	ldrb	r3, [r7, #14]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8004916:	7b7b      	ldrb	r3, [r7, #13]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 800492c:	2302      	movs	r3, #2
 800492e:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800493e:	2300      	movs	r3, #0
 8004940:	73fb      	strb	r3, [r7, #15]
 8004942:	e09e      	b.n	8004a82 <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	2132      	movs	r1, #50	; 0x32
 800494a:	fb01 f303 	mul.w	r3, r1, r3
 800494e:	4413      	add	r3, r2
 8004950:	f203 3347 	addw	r3, r3, #839	; 0x347
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	f040 8090 	bne.w	8004a7c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	2132      	movs	r1, #50	; 0x32
 8004962:	fb01 f303 	mul.w	r3, r1, r3
 8004966:	4413      	add	r3, r2
 8004968:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800496c:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800496e:	2b02      	cmp	r3, #2
 8004970:	f040 8084 	bne.w	8004a7c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	2132      	movs	r1, #50	; 0x32
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	4413      	add	r3, r2
 8004980:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	b25b      	sxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	db77      	blt.n	8004a7c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	2132      	movs	r1, #50	; 0x32
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	4413      	add	r3, r2
 8004998:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800499c:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d06c      	beq.n	8004a7c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	7bba      	ldrb	r2, [r7, #14]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	2032      	movs	r0, #50	; 0x32
 80049aa:	fb00 f303 	mul.w	r3, r0, r3
 80049ae:	440b      	add	r3, r1
 80049b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80049b4:	7818      	ldrb	r0, [r3, #0]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	440b      	add	r3, r1
 80049c2:	3338      	adds	r3, #56	; 0x38
 80049c4:	4602      	mov	r2, r0
 80049c6:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	7bba      	ldrb	r2, [r7, #14]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	2032      	movs	r0, #50	; 0x32
 80049d0:	fb00 f303 	mul.w	r3, r0, r3
 80049d4:	440b      	add	r3, r1
 80049d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80049da:	8818      	ldrh	r0, [r3, #0]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	440b      	add	r3, r1
 80049e8:	333a      	adds	r3, #58	; 0x3a
 80049ea:	4602      	mov	r2, r0
 80049ec:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	7bba      	ldrb	r2, [r7, #14]
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	2032      	movs	r0, #50	; 0x32
 80049f6:	fb00 f303 	mul.w	r3, r0, r3
 80049fa:	440b      	add	r3, r1
 80049fc:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8004a00:	7818      	ldrb	r0, [r3, #0]
 8004a02:	68b9      	ldr	r1, [r7, #8]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	440b      	add	r3, r1
 8004a0e:	333d      	adds	r3, #61	; 0x3d
 8004a10:	4602      	mov	r2, r0
 8004a12:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	7bba      	ldrb	r2, [r7, #14]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	2032      	movs	r0, #50	; 0x32
 8004a1c:	fb00 f303 	mul.w	r3, r0, r3
 8004a20:	440b      	add	r3, r1
 8004a22:	f203 3345 	addw	r3, r3, #837	; 0x345
 8004a26:	7818      	ldrb	r0, [r3, #0]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	440b      	add	r3, r1
 8004a34:	333c      	adds	r3, #60	; 0x3c
 8004a36:	4602      	mov	r2, r0
 8004a38:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	2132      	movs	r1, #50	; 0x32
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	7bba      	ldrb	r2, [r7, #14]
 8004a4e:	b298      	uxth	r0, r3
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	440b      	add	r3, r1
 8004a5c:	3340      	adds	r3, #64	; 0x40
 8004a5e:	4602      	mov	r2, r0
 8004a60:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 8004a62:	7bba      	ldrb	r2, [r7, #14]
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	440b      	add	r3, r1
 8004a70:	333e      	adds	r3, #62	; 0x3e
 8004a72:	2201      	movs	r2, #1
 8004a74:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8004a76:	7bbb      	ldrb	r3, [r7, #14]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b09      	cmp	r3, #9
 8004a86:	f67f af5d 	bls.w	8004944 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8004a8a:	7bbb      	ldrb	r3, [r7, #14]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8004a94:	7b7b      	ldrb	r3, [r7, #13]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 8004ab8:	23ff      	movs	r3, #255	; 0xff
 8004aba:	2201      	movs	r2, #1
 8004abc:	2101      	movs	r1, #1
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f005 fa3f 	bl	8009f42 <USBH_FindInterface>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2bff      	cmp	r3, #255	; 0xff
 8004acc:	d002      	beq.n	8004ad4 <USBH_AUDIO_FindHIDControl+0x32>
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b09      	cmp	r3, #9
 8004ad2:	d901      	bls.n	8004ad8 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e062      	b.n	8004b9e <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	73fb      	strb	r3, [r7, #15]
 8004adc:	e05b      	b.n	8004b96 <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	2132      	movs	r1, #50	; 0x32
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	f203 3347 	addw	r3, r3, #839	; 0x347
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d14d      	bne.n	8004b90 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	2132      	movs	r1, #50	; 0x32
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004b04:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d042      	beq.n	8004b90 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	2132      	movs	r1, #50	; 0x32
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	da36      	bge.n	8004b90 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	2132      	movs	r1, #50	; 0x32
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	2132      	movs	r1, #50	; 0x32
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004b4a:	881a      	ldrh	r2, [r3, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	2132      	movs	r1, #50	; 0x32
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	2132      	movs	r1, #50	; 0x32
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004b7a:	781a      	ldrb	r2, [r3, #0]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	73bb      	strb	r3, [r7, #14]
        break;
 8004b8e:	e005      	b.n	8004b9c <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	3301      	adds	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	2b09      	cmp	r3, #9
 8004b9a:	d9a0      	bls.n	8004ade <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8004b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b088      	sub	sp, #32
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	331c      	adds	r3, #28
 8004bc8:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 8004bca:	2309      	movs	r3, #9
 8004bcc:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 8004bee:	e03d      	b.n	8004c6c <USBH_AUDIO_ParseCSDescriptors+0xc6>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8004bf0:	f107 030c 	add.w	r3, r7, #12
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	69b8      	ldr	r0, [r7, #24]
 8004bf8:	f006 fa7e 	bl	800b0f8 <USBH_GetNextDesc>
 8004bfc:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d002      	beq.n	8004c0c <USBH_AUDIO_ParseCSDescriptors+0x66>
 8004c06:	2b24      	cmp	r3, #36	; 0x24
 8004c08:	d00f      	beq.n	8004c2a <USBH_AUDIO_ParseCSDescriptors+0x84>
 8004c0a:	e02e      	b.n	8004c6a <USBH_AUDIO_ParseCSDescriptors+0xc4>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	789b      	ldrb	r3, [r3, #2]
 8004c10:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	78db      	ldrb	r3, [r3, #3]
 8004c16:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 8004c18:	7bfa      	ldrb	r2, [r7, #15]
 8004c1a:	7dbb      	ldrb	r3, [r7, #22]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f005 f9d5 	bl	8009fce <USBH_FindInterfaceIndex>
 8004c24:	4603      	mov	r3, r0
 8004c26:	75fb      	strb	r3, [r7, #23]
        break;
 8004c28:	e020      	b.n	8004c6c <USBH_AUDIO_ParseCSDescriptors+0xc6>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8004c30:	7dba      	ldrb	r2, [r7, #22]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d81a      	bhi.n	8004c6c <USBH_AUDIO_ParseCSDescriptors+0xc6>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	2bff      	cmp	r3, #255	; 0xff
 8004c3a:	d002      	beq.n	8004c42 <USBH_AUDIO_ParseCSDescriptors+0x9c>
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
 8004c3e:	2b09      	cmp	r3, #9
 8004c40:	d902      	bls.n	8004c48 <USBH_AUDIO_ParseCSDescriptors+0xa2>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
            status = USBH_FAIL;
 8004c42:	2302      	movs	r3, #2
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e00f      	b.n	8004c68 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          }
          else
          {

            (void)ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	2132      	movs	r1, #50	; 0x32
 8004c54:	fb01 f303 	mul.w	r3, r1, r3
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4619      	mov	r1, r3
 8004c64:	f000 f80e 	bl	8004c84 <ParseCSDescriptors>
                                     phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                                     (uint8_t *)pdesc);
          }
        }
        break;
 8004c68:	e000      	b.n	8004c6c <USBH_AUDIO_ParseCSDescriptors+0xc6>

      default:
        break;
 8004c6a:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b3 233a 	ldrh.w	r2, [r3, #826]	; 0x33a
 8004c72:	89bb      	ldrh	r3, [r7, #12]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d8bb      	bhi.n	8004bf0 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 8004c78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8004c92:	7afb      	ldrb	r3, [r7, #11]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d163      	bne.n	8004d60 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	2b05      	cmp	r3, #5
 8004ca2:	f200 8081 	bhi.w	8004da8 <ParseCSDescriptors+0x124>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <ParseCSDescriptors+0x28>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004cc5 	.word	0x08004cc5
 8004cb0:	08004ccd 	.word	0x08004ccd
 8004cb4:	08004ce9 	.word	0x08004ce9
 8004cb8:	08004d43 	.word	0x08004d43
 8004cbc:	08004d25 	.word	0x08004d25
 8004cc0:	08004d07 	.word	0x08004d07
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	601a      	str	r2, [r3, #0]
        break;
 8004cca:	e070      	b.n	8004dae <ParseCSDescriptors+0x12a>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	b291      	uxth	r1, r2
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	605a      	str	r2, [r3, #4]
        break;
 8004ce6:	e062      	b.n	8004dae <ParseCSDescriptors+0x12a>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	b291      	uxth	r1, r2
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	605a      	str	r2, [r3, #4]
        break;
 8004d04:	e053      	b.n	8004dae <ParseCSDescriptors+0x12a>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	b291      	uxth	r1, r2
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	605a      	str	r2, [r3, #4]
        break;
 8004d22:	e044      	b.n	8004dae <ParseCSDescriptors+0x12a>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	b291      	uxth	r1, r2
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	3310      	adds	r3, #16
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	605a      	str	r2, [r3, #4]
        break;
 8004d40:	e035      	b.n	8004dae <ParseCSDescriptors+0x12a>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	b291      	uxth	r1, r2
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	330c      	adds	r3, #12
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	605a      	str	r2, [r3, #4]
        break;
 8004d5e:	e026      	b.n	8004dae <ParseCSDescriptors+0x12a>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8004d60:	7afb      	ldrb	r3, [r7, #11]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d122      	bne.n	8004dac <ParseCSDescriptors+0x128>
    {
      switch (pdesc[2])
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3302      	adds	r3, #2
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d002      	beq.n	8004d76 <ParseCSDescriptors+0xf2>
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d00a      	beq.n	8004d8a <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 8004d74:	e01b      	b.n	8004dae <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	330a      	adds	r3, #10
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4413      	add	r3, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	605a      	str	r2, [r3, #4]
          break;
 8004d88:	e011      	b.n	8004dae <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	b291      	uxth	r1, r2
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	330a      	adds	r3, #10
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4413      	add	r3, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	609a      	str	r2, [r3, #8]
          break;
 8004da6:	e002      	b.n	8004dae <ParseCSDescriptors+0x12a>
        break;
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <ParseCSDescriptors+0x12a>
      }
    }
 8004dac:	bf00      	nop
  }

  return USBH_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifier
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73fb      	strb	r3, [r7, #15]
 8004dd6:	e01b      	b.n	8004e10 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	3322      	adds	r3, #34	; 0x22
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	791b      	ldrb	r3, [r3, #4]
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d10e      	bne.n	8004e0a <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	3322      	adds	r3, #34	; 0x22
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	78db      	ldrb	r3, [r3, #3]
 8004dfa:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	041a      	lsls	r2, r3, #16
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004e08:	e089      	b.n	8004f1e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d3dc      	bcc.n	8004dd8 <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	e026      	b.n	8004e72 <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	3326      	adds	r3, #38	; 0x26
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	795b      	ldrb	r3, [r3, #5]
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d009      	beq.n	8004e4c <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	3326      	adds	r3, #38	; 0x26
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d10f      	bne.n	8004e6c <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	3326      	adds	r3, #38	; 0x26
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	78db      	ldrb	r3, [r3, #3]
 8004e5a:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	041b      	lsls	r3, r3, #16
 8004e60:	461a      	mov	r2, r3
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e6a:	e058      	b.n	8004f1e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d3d1      	bcc.n	8004e24 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8004e80:	2300      	movs	r3, #0
 8004e82:	73fb      	strb	r3, [r7, #15]
 8004e84:	e01c      	b.n	8004ec0 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	332a      	adds	r3, #42	; 0x2a
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	795b      	ldrb	r3, [r3, #5]
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d10f      	bne.n	8004eba <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	332a      	adds	r3, #42	; 0x2a
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	78db      	ldrb	r3, [r3, #3]
 8004ea8:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	041b      	lsls	r3, r3, #16
 8004eae:	461a      	mov	r2, r3
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8004eb8:	e031      	b.n	8004f1e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d3db      	bcc.n	8004e86 <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find Output Terminal Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
 8004ed2:	e01c      	b.n	8004f0e <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	331e      	adds	r3, #30
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	79db      	ldrb	r3, [r3, #7]
 8004ee2:	78fa      	ldrb	r2, [r7, #3]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d10f      	bne.n	8004f08 <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	331e      	adds	r3, #30
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	78db      	ldrb	r3, [r3, #3]
 8004ef6:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	041b      	lsls	r3, r3, #16
 8004efc:	461a      	mov	r2, r3
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004f06:	e00a      	b.n	8004f1e <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	73fb      	strb	r3, [r7, #15]
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d3db      	bcc.n	8004ed4 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
	...

08004f2c <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8004f34:	2300      	movs	r3, #0
 8004f36:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8004f46:	2300      	movs	r3, #0
 8004f48:	75bb      	strb	r3, [r7, #22]
 8004f4a:	e02c      	b.n	8004fa6 <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201U)
 8004f4c:	7dbb      	ldrb	r3, [r7, #22]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	331a      	adds	r3, #26
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	791b      	ldrb	r3, [r3, #4]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	7dbb      	ldrb	r3, [r7, #22]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	331a      	adds	r3, #26
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	795b      	ldrb	r3, [r3, #5]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	021b      	lsls	r3, r3, #8
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	430b      	orrs	r3, r1
 8004f72:	f240 2201 	movw	r2, #513	; 0x201
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d112      	bne.n	8004fa0 <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8004f7a:	7dbb      	ldrb	r3, [r7, #22]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	331a      	adds	r3, #26
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	78db      	ldrb	r3, [r3, #3]
 8004f88:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8004f8a:	7dbb      	ldrb	r3, [r7, #22]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	331a      	adds	r3, #26
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	79da      	ldrb	r2, [r3, #7]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 8004f9e:	e009      	b.n	8004fb4 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8004fa0:	7dbb      	ldrb	r3, [r7, #22]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	75bb      	strb	r3, [r7, #22]
 8004fa6:	7dbb      	ldrb	r3, [r7, #22]
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d3cb      	bcc.n	8004f4c <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff feff 	bl	8004dbc <USBH_AUDIO_FindLinkedUnit>
 8004fbe:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e034      	b.n	8005034 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	0a1b      	lsrs	r3, r3, #8
 8004fd2:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	0c1b      	lsrs	r3, r3, #16
 8004fd8:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8004fda:	7abb      	ldrb	r3, [r7, #10]
 8004fdc:	3b03      	subs	r3, #3
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d81e      	bhi.n	8005020 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08005017 	.word	0x08005017
 8004fec:	08005003 	.word	0x08005003
 8004ff0:	0800500d 	.word	0x0800500d
 8004ff4:	08004ff9 	.word	0x08004ff9
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	7afa      	ldrb	r2, [r7, #11]
 8004ffc:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 8005000:	e011      	b.n	8005026 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	7afa      	ldrb	r2, [r7, #11]
 8005006:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 800500a:	e00c      	b.n	8005026 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	7afa      	ldrb	r2, [r7, #11]
 8005010:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 8005014:	e007      	b.n	8005026 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	7afa      	ldrb	r2, [r7, #11]
 800501a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 800501e:	e002      	b.n	8005026 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 8005020:	2302      	movs	r3, #2
 8005022:	757b      	strb	r3, [r7, #21]
        break;
 8005024:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8005026:	7abb      	ldrb	r3, [r7, #10]
 8005028:	2b03      	cmp	r3, #3
 800502a:	d002      	beq.n	8005032 <USBH_AUDIO_BuildMicrophonePath+0x106>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1c0      	bne.n	8004fb4 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 8005032:	7d7b      	ldrb	r3, [r7, #21]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8005044:	2300      	movs	r3, #0
 8005046:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8005056:	2300      	movs	r3, #0
 8005058:	757b      	strb	r3, [r7, #21]
 800505a:	e02c      	b.n	80050b6 <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101U)
 800505c:	7d7b      	ldrb	r3, [r7, #21]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	331a      	adds	r3, #26
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	791b      	ldrb	r3, [r3, #4]
 800506a:	4619      	mov	r1, r3
 800506c:	7d7b      	ldrb	r3, [r7, #21]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	331a      	adds	r3, #26
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	795b      	ldrb	r3, [r3, #5]
 800507a:	b29b      	uxth	r3, r3
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	b29b      	uxth	r3, r3
 8005080:	430b      	orrs	r3, r1
 8005082:	f240 1201 	movw	r2, #257	; 0x101
 8005086:	4293      	cmp	r3, r2
 8005088:	d112      	bne.n	80050b0 <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800508a:	7d7b      	ldrb	r3, [r7, #21]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	331a      	adds	r3, #26
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	78db      	ldrb	r3, [r3, #3]
 8005098:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800509a:	7d7b      	ldrb	r3, [r7, #21]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	331a      	adds	r3, #26
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	79da      	ldrb	r2, [r3, #7]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 80050ae:	e009      	b.n	80050c4 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80050b0:	7d7b      	ldrb	r3, [r7, #21]
 80050b2:	3301      	adds	r3, #1
 80050b4:	757b      	strb	r3, [r7, #21]
 80050b6:	7d7b      	ldrb	r3, [r7, #21]
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d3cb      	bcc.n	800505c <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80050c4:	2300      	movs	r3, #0
 80050c6:	75bb      	strb	r3, [r7, #22]
 80050c8:	e011      	b.n	80050ee <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 80050ca:	7dbb      	ldrb	r3, [r7, #22]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	3317      	adds	r3, #23
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4413      	add	r3, r2
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	78db      	ldrb	r3, [r3, #3]
 80050d8:	7dfa      	ldrb	r2, [r7, #23]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d104      	bne.n	80050e8 <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	7dba      	ldrb	r2, [r7, #22]
 80050e2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 80050e6:	e009      	b.n	80050fc <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80050e8:	7dbb      	ldrb	r3, [r7, #22]
 80050ea:	3301      	adds	r3, #1
 80050ec:	75bb      	strb	r3, [r7, #22]
 80050ee:	7dbb      	ldrb	r3, [r7, #22]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d3e6      	bcc.n	80050ca <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
 80050fe:	4619      	mov	r1, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff fe5b 	bl	8004dbc <USBH_AUDIO_FindLinkedUnit>
 8005106:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 800510e:	2302      	movs	r3, #2
 8005110:	e053      	b.n	80051ba <USBH_AUDIO_BuildHeadphonePath+0x17e>
    }

    Index = (uint8_t)(value & 0xFFU);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	0a1b      	lsrs	r3, r3, #8
 800511a:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8005122:	7afb      	ldrb	r3, [r7, #11]
 8005124:	3b03      	subs	r3, #3
 8005126:	2b03      	cmp	r3, #3
 8005128:	d83c      	bhi.n	80051a4 <USBH_AUDIO_BuildHeadphonePath+0x168>
 800512a:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	0800515f 	.word	0x0800515f
 8005134:	0800514b 	.word	0x0800514b
 8005138:	08005155 	.word	0x08005155
 800513c:	08005141 	.word	0x08005141
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	7dba      	ldrb	r2, [r7, #22]
 8005144:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 8005148:	e030      	b.n	80051ac <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	7dba      	ldrb	r2, [r7, #22]
 800514e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 8005152:	e02b      	b.n	80051ac <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	7dba      	ldrb	r2, [r7, #22]
 8005158:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 800515c:	e026      	b.n	80051ac <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	7dba      	ldrb	r2, [r7, #22]
 8005162:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 8005166:	7dbb      	ldrb	r3, [r7, #22]
 8005168:	2b03      	cmp	r3, #3
 800516a:	d818      	bhi.n	800519e <USBH_AUDIO_BuildHeadphonePath+0x162>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103U)
 800516c:	7dbb      	ldrb	r3, [r7, #22]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	331e      	adds	r3, #30
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	791b      	ldrb	r3, [r3, #4]
 800517a:	4619      	mov	r1, r3
 800517c:	7dbb      	ldrb	r3, [r7, #22]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	331e      	adds	r3, #30
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	795b      	ldrb	r3, [r3, #5]
 800518a:	b29b      	uxth	r3, r3
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	b29b      	uxth	r3, r3
 8005190:	430b      	orrs	r3, r1
 8005192:	f240 1203 	movw	r2, #259	; 0x103
 8005196:	4293      	cmp	r3, r2
 8005198:	d007      	beq.n	80051aa <USBH_AUDIO_BuildHeadphonePath+0x16e>
          {
            return  USBH_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e00d      	b.n	80051ba <USBH_AUDIO_BuildHeadphonePath+0x17e>
          }
        }
        else
        {
          ret = USBH_FAIL;
 800519e:	2302      	movs	r3, #2
 80051a0:	753b      	strb	r3, [r7, #20]
        }
        break;
 80051a2:	e002      	b.n	80051aa <USBH_AUDIO_BuildHeadphonePath+0x16e>

      default:
        ret = USBH_FAIL;
 80051a4:	2302      	movs	r3, #2
 80051a6:	753b      	strb	r3, [r7, #20]
        break;
 80051a8:	e000      	b.n	80051ac <USBH_AUDIO_BuildHeadphonePath+0x170>
        break;
 80051aa:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 80051ac:	7afb      	ldrb	r3, [r7, #11]
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d002      	beq.n	80051b8 <USBH_AUDIO_BuildHeadphonePath+0x17c>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1a1      	bne.n	80050fc <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 80051b8:	7d3b      	ldrb	r3, [r7, #20]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop

080051c4 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	4608      	mov	r0, r1
 80051ce:	4611      	mov	r1, r2
 80051d0:	461a      	mov	r2, r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	70fb      	strb	r3, [r7, #3]
 80051d6:	460b      	mov	r3, r1
 80051d8:	70bb      	strb	r3, [r7, #2]
 80051da:	4613      	mov	r3, r2
 80051dc:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	82fb      	strh	r3, [r7, #22]
 80051e2:	2300      	movs	r3, #0
 80051e4:	82bb      	strh	r3, [r7, #20]
 80051e6:	2300      	movs	r3, #0
 80051e8:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d002      	beq.n	8005204 <USBH_AC_SetCur+0x40>
 80051fe:	2b06      	cmp	r3, #6
 8005200:	d018      	beq.n	8005234 <USBH_AC_SetCur+0x70>
 8005202:	e035      	b.n	8005270 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	78db      	ldrb	r3, [r3, #3]
 800520a:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800520c:	2300      	movs	r3, #0
 800520e:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8005210:	7afb      	ldrb	r3, [r7, #11]
 8005212:	b29b      	uxth	r3, r3
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	b29a      	uxth	r2, r3
 8005218:	7abb      	ldrb	r3, [r7, #10]
 800521a:	b29b      	uxth	r3, r3
 800521c:	4313      	orrs	r3, r2
 800521e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8005220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005224:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 800522e:	2301      	movs	r3, #1
 8005230:	827b      	strh	r3, [r7, #18]
      break;
 8005232:	e020      	b.n	8005276 <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8005234:	78bb      	ldrb	r3, [r7, #2]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	3322      	adds	r3, #34	; 0x22
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	78db      	ldrb	r3, [r3, #3]
 8005242:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8005244:	2300      	movs	r3, #0
 8005246:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8005248:	7afb      	ldrb	r3, [r7, #11]
 800524a:	b29b      	uxth	r3, r3
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	b29a      	uxth	r2, r3
 8005250:	7abb      	ldrb	r3, [r7, #10]
 8005252:	b29b      	uxth	r3, r3
 8005254:	4313      	orrs	r3, r2
 8005256:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8005258:	787b      	ldrb	r3, [r7, #1]
 800525a:	b29b      	uxth	r3, r3
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	b29a      	uxth	r2, r3
 8005260:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005264:	b29b      	uxth	r3, r3
 8005266:	4313      	orrs	r3, r2
 8005268:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800526a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800526c:	827b      	strh	r3, [r7, #18]
      break;
 800526e:	e002      	b.n	8005276 <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 8005270:	2302      	movs	r3, #2
 8005272:	747b      	strb	r3, [r7, #17]
      break;
 8005274:	bf00      	nop
  }

  if (ret != USBH_OK)
 8005276:	7c7b      	ldrb	r3, [r7, #17]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 800527c:	7c7b      	ldrb	r3, [r7, #17]
 800527e:	e017      	b.n	80052b0 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2221      	movs	r2, #33	; 0x21
 8005284:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8afa      	ldrh	r2, [r7, #22]
 8005290:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8aba      	ldrh	r2, [r7, #20]
 8005296:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	8a7a      	ldrh	r2, [r7, #18]
 800529c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80052a4:	8a7a      	ldrh	r2, [r7, #18]
 80052a6:	4619      	mov	r1, r3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f005 ff40 	bl	800b12e <USBH_CtlReq>
 80052ae:	4603      	mov	r3, r0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	4608      	mov	r0, r1
 80052c2:	4611      	mov	r1, r2
 80052c4:	461a      	mov	r2, r3
 80052c6:	4603      	mov	r3, r0
 80052c8:	70fb      	strb	r3, [r7, #3]
 80052ca:	460b      	mov	r3, r1
 80052cc:	70bb      	strb	r3, [r7, #2]
 80052ce:	4613      	mov	r3, r2
 80052d0:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	82fb      	strh	r3, [r7, #22]
 80052d6:	2300      	movs	r3, #0
 80052d8:	82bb      	strh	r3, [r7, #20]
 80052da:	2300      	movs	r3, #0
 80052dc:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	743b      	strb	r3, [r7, #16]
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	2b06      	cmp	r3, #6
 80052f8:	d01e      	beq.n	8005338 <USBH_AC_GetCur+0x80>
 80052fa:	2b06      	cmp	r3, #6
 80052fc:	dc4f      	bgt.n	800539e <USBH_AC_GetCur+0xe6>
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d002      	beq.n	8005308 <USBH_AC_GetCur+0x50>
 8005302:	2b03      	cmp	r3, #3
 8005304:	d036      	beq.n	8005374 <USBH_AC_GetCur+0xbc>
 8005306:	e04a      	b.n	800539e <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	78db      	ldrb	r3, [r3, #3]
 800530e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8005310:	2300      	movs	r3, #0
 8005312:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8005314:	7c3b      	ldrb	r3, [r7, #16]
 8005316:	b29b      	uxth	r3, r3
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	b29a      	uxth	r2, r3
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	b29b      	uxth	r3, r3
 8005320:	4313      	orrs	r3, r2
 8005322:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8005324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005328:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2200      	movs	r2, #0
 800532e:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8005332:	2301      	movs	r3, #1
 8005334:	827b      	strh	r3, [r7, #18]
      break;
 8005336:	e035      	b.n	80053a4 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8005338:	78bb      	ldrb	r3, [r7, #2]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	3322      	adds	r3, #34	; 0x22
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	78db      	ldrb	r3, [r3, #3]
 8005346:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8005348:	2300      	movs	r3, #0
 800534a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800534c:	7c3b      	ldrb	r3, [r7, #16]
 800534e:	b29b      	uxth	r3, r3
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	b29a      	uxth	r2, r3
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	b29b      	uxth	r3, r3
 8005358:	4313      	orrs	r3, r2
 800535a:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800535c:	787b      	ldrb	r3, [r7, #1]
 800535e:	b29b      	uxth	r3, r3
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	b29a      	uxth	r2, r3
 8005364:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005368:	b29b      	uxth	r3, r3
 800536a:	4313      	orrs	r3, r2
 800536c:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800536e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005370:	827b      	strh	r3, [r7, #18]
      break;
 8005372:	e017      	b.n	80053a4 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537a:	78db      	ldrb	r3, [r3, #3]
 800537c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8005382:	7c3b      	ldrb	r3, [r7, #16]
 8005384:	b29b      	uxth	r3, r3
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	b29a      	uxth	r2, r3
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	b29b      	uxth	r3, r3
 800538e:	4313      	orrs	r3, r2
 8005390:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8005392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005396:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8005398:	2301      	movs	r3, #1
 800539a:	827b      	strh	r3, [r7, #18]
      break;
 800539c:	e002      	b.n	80053a4 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 800539e:	2302      	movs	r3, #2
 80053a0:	747b      	strb	r3, [r7, #17]
      break;
 80053a2:	bf00      	nop
  }

  if (ret != USBH_OK)
 80053a4:	7c7b      	ldrb	r3, [r7, #17]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <USBH_AC_GetCur+0xf6>
  {
    return ret;
 80053aa:	7c7b      	ldrb	r3, [r7, #17]
 80053ac:	e017      	b.n	80053de <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	22a1      	movs	r2, #161	; 0xa1
 80053b2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2281      	movs	r2, #129	; 0x81
 80053b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8afa      	ldrh	r2, [r7, #22]
 80053be:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8aba      	ldrh	r2, [r7, #20]
 80053c4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8a7a      	ldrh	r2, [r7, #18]
 80053ca:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80053d2:	8a7a      	ldrh	r2, [r7, #18]
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f005 fea9 	bl	800b12e <USBH_CtlReq>
 80053dc:	4603      	mov	r3, r0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b086      	sub	sp, #24
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	4608      	mov	r0, r1
 80053f0:	4611      	mov	r1, r2
 80053f2:	461a      	mov	r2, r3
 80053f4:	4603      	mov	r3, r0
 80053f6:	70fb      	strb	r3, [r7, #3]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70bb      	strb	r3, [r7, #2]
 80053fc:	4613      	mov	r3, r2
 80053fe:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	82fb      	strh	r3, [r7, #22]
 8005404:	2300      	movs	r3, #0
 8005406:	82bb      	strh	r3, [r7, #20]
 8005408:	2300      	movs	r3, #0
 800540a:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	743b      	strb	r3, [r7, #16]
 8005410:	2300      	movs	r3, #0
 8005412:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	2b06      	cmp	r3, #6
 8005426:	d01e      	beq.n	8005466 <USBH_AC_GetMax+0x80>
 8005428:	2b06      	cmp	r3, #6
 800542a:	dc4f      	bgt.n	80054cc <USBH_AC_GetMax+0xe6>
 800542c:	2b02      	cmp	r3, #2
 800542e:	d002      	beq.n	8005436 <USBH_AC_GetMax+0x50>
 8005430:	2b03      	cmp	r3, #3
 8005432:	d036      	beq.n	80054a2 <USBH_AC_GetMax+0xbc>
 8005434:	e04a      	b.n	80054cc <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	78db      	ldrb	r3, [r3, #3]
 800543c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8005442:	7c3b      	ldrb	r3, [r7, #16]
 8005444:	b29b      	uxth	r3, r3
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	b29a      	uxth	r2, r3
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	b29b      	uxth	r3, r3
 800544e:	4313      	orrs	r3, r2
 8005450:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8005452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005456:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2200      	movs	r2, #0
 800545c:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8005460:	2301      	movs	r3, #1
 8005462:	827b      	strh	r3, [r7, #18]
      break;
 8005464:	e035      	b.n	80054d2 <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8005466:	78bb      	ldrb	r3, [r7, #2]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	3322      	adds	r3, #34	; 0x22
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	78db      	ldrb	r3, [r3, #3]
 8005474:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8005476:	2300      	movs	r3, #0
 8005478:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 800547a:	7c3b      	ldrb	r3, [r7, #16]
 800547c:	b29b      	uxth	r3, r3
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	b29a      	uxth	r2, r3
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	b29b      	uxth	r3, r3
 8005486:	4313      	orrs	r3, r2
 8005488:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800548a:	787b      	ldrb	r3, [r7, #1]
 800548c:	b29b      	uxth	r3, r3
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	b29a      	uxth	r2, r3
 8005492:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005496:	b29b      	uxth	r3, r3
 8005498:	4313      	orrs	r3, r2
 800549a:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800549c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800549e:	827b      	strh	r3, [r7, #18]
      break;
 80054a0:	e017      	b.n	80054d2 <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a8:	78db      	ldrb	r3, [r3, #3]
 80054aa:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 80054b0:	7c3b      	ldrb	r3, [r7, #16]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	4313      	orrs	r3, r2
 80054be:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 80054c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054c4:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 80054c6:	2301      	movs	r3, #1
 80054c8:	827b      	strh	r3, [r7, #18]
      break;
 80054ca:	e002      	b.n	80054d2 <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 80054cc:	2302      	movs	r3, #2
 80054ce:	747b      	strb	r3, [r7, #17]
      break;
 80054d0:	bf00      	nop
  }

  if (ret != USBH_OK)
 80054d2:	7c7b      	ldrb	r3, [r7, #17]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <USBH_AC_GetMax+0xf6>
  {
    return ret;
 80054d8:	7c7b      	ldrb	r3, [r7, #17]
 80054da:	e017      	b.n	800550c <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	22a1      	movs	r2, #161	; 0xa1
 80054e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2283      	movs	r2, #131	; 0x83
 80054e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8afa      	ldrh	r2, [r7, #22]
 80054ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	8aba      	ldrh	r2, [r7, #20]
 80054f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	8a7a      	ldrh	r2, [r7, #18]
 80054f8:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005500:	8a7a      	ldrh	r2, [r7, #18]
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f005 fe12 	bl	800b12e <USBH_CtlReq>
 800550a:	4603      	mov	r3, r0

}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	4608      	mov	r0, r1
 800551e:	4611      	mov	r1, r2
 8005520:	461a      	mov	r2, r3
 8005522:	4603      	mov	r3, r0
 8005524:	70fb      	strb	r3, [r7, #3]
 8005526:	460b      	mov	r3, r1
 8005528:	70bb      	strb	r3, [r7, #2]
 800552a:	4613      	mov	r3, r2
 800552c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	82fb      	strh	r3, [r7, #22]
 8005532:	2300      	movs	r3, #0
 8005534:	82bb      	strh	r3, [r7, #20]
 8005536:	2300      	movs	r3, #0
 8005538:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	743b      	strb	r3, [r7, #16]
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	2b06      	cmp	r3, #6
 8005554:	d01e      	beq.n	8005594 <USBH_AC_GetRes+0x80>
 8005556:	2b06      	cmp	r3, #6
 8005558:	dc4f      	bgt.n	80055fa <USBH_AC_GetRes+0xe6>
 800555a:	2b02      	cmp	r3, #2
 800555c:	d002      	beq.n	8005564 <USBH_AC_GetRes+0x50>
 800555e:	2b03      	cmp	r3, #3
 8005560:	d036      	beq.n	80055d0 <USBH_AC_GetRes+0xbc>
 8005562:	e04a      	b.n	80055fa <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005568:	78db      	ldrb	r3, [r3, #3]
 800556a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800556c:	2300      	movs	r3, #0
 800556e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8005570:	7c3b      	ldrb	r3, [r7, #16]
 8005572:	b29b      	uxth	r3, r3
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	b29a      	uxth	r2, r3
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	b29b      	uxth	r3, r3
 800557c:	4313      	orrs	r3, r2
 800557e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8005580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005584:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2200      	movs	r2, #0
 800558a:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 800558e:	2301      	movs	r3, #1
 8005590:	827b      	strh	r3, [r7, #18]
      break;
 8005592:	e035      	b.n	8005600 <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8005594:	78bb      	ldrb	r3, [r7, #2]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	3322      	adds	r3, #34	; 0x22
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	78db      	ldrb	r3, [r3, #3]
 80055a2:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80055a4:	2300      	movs	r3, #0
 80055a6:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80055a8:	7c3b      	ldrb	r3, [r7, #16]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	4313      	orrs	r3, r2
 80055b6:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80055b8:	787b      	ldrb	r3, [r7, #1]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	b29a      	uxth	r2, r3
 80055c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	4313      	orrs	r3, r2
 80055c8:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80055ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055cc:	827b      	strh	r3, [r7, #18]
      break;
 80055ce:	e017      	b.n	8005600 <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d6:	78db      	ldrb	r3, [r3, #3]
 80055d8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80055de:	7c3b      	ldrb	r3, [r7, #16]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	4313      	orrs	r3, r2
 80055ec:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 80055ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055f2:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 80055f4:	2301      	movs	r3, #1
 80055f6:	827b      	strh	r3, [r7, #18]
      break;
 80055f8:	e002      	b.n	8005600 <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 80055fa:	2302      	movs	r3, #2
 80055fc:	747b      	strb	r3, [r7, #17]
      break;
 80055fe:	bf00      	nop
  }

  if (ret != USBH_OK)
 8005600:	7c7b      	ldrb	r3, [r7, #17]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <USBH_AC_GetRes+0xf6>
  {
    return ret;
 8005606:	7c7b      	ldrb	r3, [r7, #17]
 8005608:	e017      	b.n	800563a <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	22a1      	movs	r2, #161	; 0xa1
 800560e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2284      	movs	r2, #132	; 0x84
 8005614:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	8afa      	ldrh	r2, [r7, #22]
 800561a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8aba      	ldrh	r2, [r7, #20]
 8005620:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8a7a      	ldrh	r2, [r7, #18]
 8005626:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800562e:	8a7a      	ldrh	r2, [r7, #18]
 8005630:	4619      	mov	r1, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f005 fd7b 	bl	800b12e <USBH_CtlReq>
 8005638:	4603      	mov	r3, r0

}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b086      	sub	sp, #24
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	4608      	mov	r0, r1
 800564c:	4611      	mov	r1, r2
 800564e:	461a      	mov	r2, r3
 8005650:	4603      	mov	r3, r0
 8005652:	70fb      	strb	r3, [r7, #3]
 8005654:	460b      	mov	r3, r1
 8005656:	70bb      	strb	r3, [r7, #2]
 8005658:	4613      	mov	r3, r2
 800565a:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	82fb      	strh	r3, [r7, #22]
 8005660:	2300      	movs	r3, #0
 8005662:	82bb      	strh	r3, [r7, #20]
 8005664:	2300      	movs	r3, #0
 8005666:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	743b      	strb	r3, [r7, #16]
 800566c:	2300      	movs	r3, #0
 800566e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	2b06      	cmp	r3, #6
 8005682:	d01e      	beq.n	80056c2 <USBH_AC_GetMin+0x80>
 8005684:	2b06      	cmp	r3, #6
 8005686:	dc4f      	bgt.n	8005728 <USBH_AC_GetMin+0xe6>
 8005688:	2b02      	cmp	r3, #2
 800568a:	d002      	beq.n	8005692 <USBH_AC_GetMin+0x50>
 800568c:	2b03      	cmp	r3, #3
 800568e:	d036      	beq.n	80056fe <USBH_AC_GetMin+0xbc>
 8005690:	e04a      	b.n	8005728 <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	78db      	ldrb	r3, [r3, #3]
 8005698:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800569a:	2300      	movs	r3, #0
 800569c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800569e:	7c3b      	ldrb	r3, [r7, #16]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	4313      	orrs	r3, r2
 80056ac:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80056ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056b2:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80056bc:	2301      	movs	r3, #1
 80056be:	827b      	strh	r3, [r7, #18]
      break;
 80056c0:	e035      	b.n	800572e <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80056c2:	78bb      	ldrb	r3, [r7, #2]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	3322      	adds	r3, #34	; 0x22
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	78db      	ldrb	r3, [r3, #3]
 80056d0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80056d6:	7c3b      	ldrb	r3, [r7, #16]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	b29a      	uxth	r2, r3
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	4313      	orrs	r3, r2
 80056e4:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80056e6:	787b      	ldrb	r3, [r7, #1]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	4313      	orrs	r3, r2
 80056f6:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80056f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056fa:	827b      	strh	r3, [r7, #18]
      break;
 80056fc:	e017      	b.n	800572e <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005704:	78db      	ldrb	r3, [r3, #3]
 8005706:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8005708:	2300      	movs	r3, #0
 800570a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800570c:	7c3b      	ldrb	r3, [r7, #16]
 800570e:	b29b      	uxth	r3, r3
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	b29a      	uxth	r2, r3
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	b29b      	uxth	r3, r3
 8005718:	4313      	orrs	r3, r2
 800571a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800571c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005720:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8005722:	2301      	movs	r3, #1
 8005724:	827b      	strh	r3, [r7, #18]
      break;
 8005726:	e002      	b.n	800572e <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 8005728:	2302      	movs	r3, #2
 800572a:	747b      	strb	r3, [r7, #17]
      break;
 800572c:	bf00      	nop
  }

  if (ret != USBH_OK)
 800572e:	7c7b      	ldrb	r3, [r7, #17]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <USBH_AC_GetMin+0xf6>
  {
    return ret;
 8005734:	7c7b      	ldrb	r3, [r7, #17]
 8005736:	e017      	b.n	8005768 <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	22a1      	movs	r2, #161	; 0xa1
 800573c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2282      	movs	r2, #130	; 0x82
 8005742:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8afa      	ldrh	r2, [r7, #22]
 8005748:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	8aba      	ldrh	r2, [r7, #20]
 800574e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8a7a      	ldrh	r2, [r7, #18]
 8005754:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800575c:	8a7a      	ldrh	r2, [r7, #18]
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f005 fce4 	bl	800b12e <USBH_CtlReq>
 8005766:	4603      	mov	r3, r0

}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	460b      	mov	r3, r1
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 800577e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005782:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8005784:	7afb      	ldrb	r3, [r7, #11]
 8005786:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 8005788:	2303      	movs	r3, #3
 800578a:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2222      	movs	r2, #34	; 0x22
 8005790:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8afa      	ldrh	r2, [r7, #22]
 800579c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8aba      	ldrh	r2, [r7, #20]
 80057a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8a7a      	ldrh	r2, [r7, #18]
 80057a8:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 80057aa:	8a7b      	ldrh	r3, [r7, #18]
 80057ac:	461a      	mov	r2, r3
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f005 fcbc 	bl	800b12e <USBH_CtlReq>
 80057b6:	4603      	mov	r3, r0

}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]

  return status;
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80057e4:	2301      	movs	r3, #1
 80057e6:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	78db      	ldrb	r3, [r3, #3]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	f200 8090 	bhi.w	8005922 <USBH_AUDIO_Control+0x146>
 8005802:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <USBH_AUDIO_Control+0x2c>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	0800581d 	.word	0x0800581d
 800580c:	08005871 	.word	0x08005871
 8005810:	08005923 	.word	0x08005923
 8005814:	080058ef 	.word	0x080058ef
 8005818:	08005909 	.word	0x08005909
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d17d      	bne.n	8005926 <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        (void)USBH_InterruptReceiveData(phost,
 8005842:	b2da      	uxtb	r2, r3
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f005 fec0 	bl	800b5d0 <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	2202      	movs	r2, #2
 800586c:	70da      	strb	r2, [r3, #3]
      }
      break;
 800586e:	e05a      	b.n	8005926 <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f006 f9f1 	bl	800bc60 <USBH_LL_GetURBState>
 800587e:	4603      	mov	r3, r0
 8005880:	2b01      	cmp	r3, #1
 8005882:	d114      	bne.n	80058ae <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005890:	3302      	adds	r3, #2
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	021b      	lsls	r3, r3, #8
 8005896:	b29b      	uxth	r3, r3
 8005898:	4313      	orrs	r3, r2
 800589a:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 800589c:	89fb      	ldrh	r3, [r7, #14]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	4619      	mov	r1, r3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f97a 	bl	8005b9c <USBH_AUDIO_SetControlAttribute>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d03d      	beq.n	800592a <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d333      	bcc.n	800592e <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        (void)USBH_InterruptReceiveData(phost,
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f005 fe72 	bl	800b5d0 <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

      }
      break;
 80058ec:	e01f      	b.n	800592e <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 80058ee:	2101      	movs	r1, #1
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f953 	bl	8005b9c <USBH_AUDIO_SetControlAttribute>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11a      	bne.n	8005932 <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2201      	movs	r2, #1
 8005900:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005906:	e014      	b.n	8005932 <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8005908:	2102      	movs	r1, #2
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f946 	bl	8005b9c <USBH_AUDIO_SetControlAttribute>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10f      	bne.n	8005936 <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2201      	movs	r2, #1
 800591a:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005920:	e009      	b.n	8005936 <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 8005922:	bf00      	nop
 8005924:	e008      	b.n	8005938 <USBH_AUDIO_Control+0x15c>
      break;
 8005926:	bf00      	nop
 8005928:	e006      	b.n	8005938 <USBH_AUDIO_Control+0x15c>
          break;
 800592a:	bf00      	nop
 800592c:	e004      	b.n	8005938 <USBH_AUDIO_Control+0x15c>
      break;
 800592e:	bf00      	nop
 8005930:	e002      	b.n	8005938 <USBH_AUDIO_Control+0x15c>
      break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <USBH_AUDIO_Control+0x15c>
      break;
 8005936:	bf00      	nop
  }

  return status;
 8005938:	7dfb      	ldrb	r3, [r7, #23]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop

08005944 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 800594c:	2301      	movs	r3, #1
 800594e:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	789b      	ldrb	r3, [r3, #2]
 800595e:	3b01      	subs	r3, #1
 8005960:	2b04      	cmp	r3, #4
 8005962:	d85c      	bhi.n	8005a1e <USBH_AUDIO_OutputStream+0xda>
 8005964:	a201      	add	r2, pc, #4	; (adr r2, 800596c <USBH_AUDIO_OutputStream+0x28>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	08005981 	.word	0x08005981
 8005970:	080059dd 	.word	0x080059dd
 8005974:	080059a7 	.word	0x080059a7
 8005978:	08005a13 	.word	0x08005a13
 800597c:	08005a0d 	.word	0x08005a0d
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	3317      	adds	r3, #23
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4413      	add	r3, r2
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	79db      	ldrb	r3, [r3, #7]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2203      	movs	r2, #3
 800599a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800599c:	e044      	b.n	8005a28 <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2202      	movs	r2, #2
 80059a2:	709a      	strb	r2, [r3, #2]
      break;
 80059a4:	e040      	b.n	8005a28 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	3317      	adds	r3, #23
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	4413      	add	r3, r2
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	3308      	adds	r3, #8
 80059b8:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff fed3 	bl	8005770 <USBH_AUDIO_SetEndpointControls>
 80059ca:	4603      	mov	r3, r0
 80059cc:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d126      	bne.n	8005a22 <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2205      	movs	r2, #5
 80059d8:	709a      	strb	r2, [r3, #2]
      }
      break;
 80059da:	e022      	b.n	8005a22 <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80059e2:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff febe 	bl	8005770 <USBH_AUDIO_SetEndpointControls>
 80059f4:	4603      	mov	r3, r0
 80059f6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d113      	bne.n	8005a26 <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2205      	movs	r2, #5
 8005a02:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f96e 	bl	8005ce6 <USBH_AUDIO_FrequencySet>
      }
      break;
 8005a0a:	e00c      	b.n	8005a26 <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005a10:	e00a      	b.n	8005a28 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      (void)USBH_AUDIO_Transmit(phost);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f80e 	bl	8005a34 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a1c:	e004      	b.n	8005a28 <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 8005a1e:	bf00      	nop
 8005a20:	e002      	b.n	8005a28 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8005a22:	bf00      	nop
 8005a24:	e000      	b.n	8005a28 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8005a26:	bf00      	nop
  }

  return status;
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop

08005a34 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	791b      	ldrb	r3, [r3, #4]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d002      	beq.n	8005a58 <USBH_AUDIO_Transmit+0x24>
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d033      	beq.n	8005abe <USBH_AUDIO_Transmit+0x8a>
 8005a56:	e096      	b.n	8005b86 <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f040 8092 	bne.w	8005b8c <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2202      	movs	r2, #2
 8005a78:	711a      	strb	r2, [r3, #4]
        (void)USBH_IsocSendData(phost,
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                                AUDIO_Handle->headphone.buf,
                                (uint32_t)AUDIO_Handle->headphone.frame_length,
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        (void)USBH_IsocSendData(phost,
 8005a86:	461a      	mov	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f005 fdbd 	bl	800b60e <USBH_IsocSendData>
                                AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005abc:	e066      	b.n	8005b8c <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f006 f8ca 	bl	800bc60 <USBH_LL_GetURBState>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d15e      	bne.n	8005b90 <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d352      	bcc.n	8005b90 <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d102      	bne.n	8005b06 <USBH_AUDIO_Transmit+0xd2>
        {
          (void)USBH_AUDIO_Control(phost);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff fe6b 	bl	80057dc <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d82b      	bhi.n	8005b6e <USBH_AUDIO_Transmit+0x13a>
        {
          (void)USBH_IsocSendData(phost,
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                                  AUDIO_Handle->headphone.cbuf,
                                  (uint32_t)AUDIO_Handle->headphone.frame_length,
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          (void)USBH_IsocSendData(phost,
 8005b22:	461a      	mov	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f005 fd6f 	bl	800b60e <USBH_IsocSendData>
                                  AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8005b3c:	441a      	add	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8005b50:	441a      	add	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8005b64:	441a      	add	r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 8005b6c:	e010      	b.n	8005b90 <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b74:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2205      	movs	r2, #5
 8005b7c:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f8bb 	bl	8005cfa <USBH_AUDIO_BufferEmptyCallback>
      break;
 8005b84:	e004      	b.n	8005b90 <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 8005b86:	2302      	movs	r3, #2
 8005b88:	73fb      	strb	r3, [r7, #15]
      break;
 8005b8a:	e002      	b.n	8005b92 <USBH_AUDIO_Transmit+0x15e>
      break;
 8005b8c:	bf00      	nop
 8005b8e:	e000      	b.n	8005b92 <USBH_AUDIO_Transmit+0x15e>
      break;
 8005b90:	bf00      	nop
  }
  return status;
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d002      	beq.n	8005bc2 <USBH_AUDIO_SetControlAttribute+0x26>
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d00b      	beq.n	8005bd8 <USBH_AUDIO_SetControlAttribute+0x3c>
 8005bc0:	e015      	b.n	8005bee <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005bce:	441a      	add	r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 8005bd6:	e00d      	b.n	8005bf4 <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005be4:	1ad2      	subs	r2, r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 8005bec:	e002      	b.n	8005bf4 <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 8005bee:	2302      	movs	r3, #2
 8005bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf2:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d905      	bls.n	8005c10 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d205      	bcs.n	8005c2c <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f827 	bl	8005c94 <AUDIO_SetVolume>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d01e      	beq.n	8005c8a <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d10e      	bne.n	8005c74 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
 8005c72:	e007      	b.n	8005c84 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2206      	movs	r2, #6
 8005c88:	705a      	strb	r2, [r3, #1]
  }


  return status;
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	70fb      	strb	r3, [r7, #3]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	70bb      	strb	r3, [r7, #2]
 8005caa:	4613      	mov	r3, r2
 8005cac:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	883a      	ldrh	r2, [r7, #0]
 8005cc0:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 8005cc4:	78fa      	ldrb	r2, [r7, #3]
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	78bb      	ldrb	r3, [r7, #2]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	2302      	movs	r3, #2
 8005cd0:	2106      	movs	r1, #6
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff fa76 	bl	80051c4 <USBH_AC_SetCur>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005d0e:	b590      	push	{r4, r7, lr}
 8005d10:	b089      	sub	sp, #36	; 0x24
 8005d12:	af04      	add	r7, sp, #16
 8005d14:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005d16:	2301      	movs	r3, #1
 8005d18:	2202      	movs	r2, #2
 8005d1a:	2102      	movs	r1, #2
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f004 f910 	bl	8009f42 <USBH_FindInterface>
 8005d22:	4603      	mov	r3, r0
 8005d24:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	2bff      	cmp	r3, #255	; 0xff
 8005d2a:	d002      	beq.n	8005d32 <USBH_CDC_InterfaceInit+0x24>
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	2b09      	cmp	r3, #9
 8005d30:	d901      	bls.n	8005d36 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d32:	2302      	movs	r3, #2
 8005d34:	e13d      	b.n	8005fb2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f004 f8e5 	bl	8009f0a <USBH_SelectInterface>
 8005d40:	4603      	mov	r3, r0
 8005d42:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005d44:	7bbb      	ldrb	r3, [r7, #14]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e131      	b.n	8005fb2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 454c 	ldr.w	r4, [r3, #1356]	; 0x54c
 8005d54:	2050      	movs	r0, #80	; 0x50
 8005d56:	f006 f865 	bl	800be24 <malloc>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e11f      	b.n	8005fb2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005d72:	2250      	movs	r2, #80	; 0x50
 8005d74:	2100      	movs	r1, #0
 8005d76:	68b8      	ldr	r0, [r7, #8]
 8005d78:	f006 f872 	bl	800be60 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	2132      	movs	r1, #50	; 0x32
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	4413      	add	r3, r2
 8005d88:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	b25b      	sxtb	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	da15      	bge.n	8005dc0 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	2132      	movs	r1, #50	; 0x32
 8005d9a:	fb01 f303 	mul.w	r3, r1, r3
 8005d9e:	4413      	add	r3, r2
 8005da0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005da4:	781a      	ldrb	r2, [r3, #0]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	2132      	movs	r1, #50	; 0x32
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005dba:	881a      	ldrh	r2, [r3, #0]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f005 fc6b 	bl	800b6a2 <USBH_AllocPipe>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	461a      	mov	r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	7819      	ldrb	r1, [r3, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	7858      	ldrb	r0, [r3, #1]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	8952      	ldrh	r2, [r2, #10]
 8005dec:	9202      	str	r2, [sp, #8]
 8005dee:	2203      	movs	r2, #3
 8005df0:	9201      	str	r2, [sp, #4]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	4623      	mov	r3, r4
 8005df6:	4602      	mov	r2, r0
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f005 fc23 	bl	800b644 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2200      	movs	r2, #0
 8005e04:	4619      	mov	r1, r3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f005 ff4b 	bl	800bca2 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	2200      	movs	r2, #0
 8005e10:	210a      	movs	r1, #10
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f004 f895 	bl	8009f42 <USBH_FindInterface>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	2bff      	cmp	r3, #255	; 0xff
 8005e20:	d002      	beq.n	8005e28 <USBH_CDC_InterfaceInit+0x11a>
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	2b09      	cmp	r3, #9
 8005e26:	d901      	bls.n	8005e2c <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e0c2      	b.n	8005fb2 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	2132      	movs	r1, #50	; 0x32
 8005e32:	fb01 f303 	mul.w	r3, r1, r3
 8005e36:	4413      	add	r3, r2
 8005e38:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	b25b      	sxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	da16      	bge.n	8005e72 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	2132      	movs	r1, #50	; 0x32
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	2132      	movs	r1, #50	; 0x32
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e6a:	881a      	ldrh	r2, [r3, #0]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	835a      	strh	r2, [r3, #26]
 8005e70:	e015      	b.n	8005e9e <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	2132      	movs	r1, #50	; 0x32
 8005e78:	fb01 f303 	mul.w	r3, r1, r3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e82:	781a      	ldrb	r2, [r3, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	2132      	movs	r1, #50	; 0x32
 8005e8e:	fb01 f303 	mul.w	r3, r1, r3
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e98:	881a      	ldrh	r2, [r3, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	2132      	movs	r1, #50	; 0x32
 8005ea4:	fb01 f303 	mul.w	r3, r1, r3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	da16      	bge.n	8005ee4 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	2132      	movs	r1, #50	; 0x32
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ec6:	781a      	ldrb	r2, [r3, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	2132      	movs	r1, #50	; 0x32
 8005ed2:	fb01 f303 	mul.w	r3, r1, r3
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005edc:	881a      	ldrh	r2, [r3, #0]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	835a      	strh	r2, [r3, #26]
 8005ee2:	e015      	b.n	8005f10 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	2132      	movs	r1, #50	; 0x32
 8005eea:	fb01 f303 	mul.w	r3, r1, r3
 8005eee:	4413      	add	r3, r2
 8005ef0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ef4:	781a      	ldrb	r2, [r3, #0]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	2132      	movs	r1, #50	; 0x32
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f0a:	881a      	ldrh	r2, [r3, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	7b9b      	ldrb	r3, [r3, #14]
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f005 fbc3 	bl	800b6a2 <USBH_AllocPipe>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	461a      	mov	r2, r3
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	7bdb      	ldrb	r3, [r3, #15]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f005 fbb9 	bl	800b6a2 <USBH_AllocPipe>
 8005f30:	4603      	mov	r3, r0
 8005f32:	461a      	mov	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	7b59      	ldrb	r1, [r3, #13]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	7b98      	ldrb	r0, [r3, #14]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	8b12      	ldrh	r2, [r2, #24]
 8005f50:	9202      	str	r2, [sp, #8]
 8005f52:	2202      	movs	r2, #2
 8005f54:	9201      	str	r2, [sp, #4]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	4623      	mov	r3, r4
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f005 fb71 	bl	800b644 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	7b19      	ldrb	r1, [r3, #12]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	7bd8      	ldrb	r0, [r3, #15]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	8b52      	ldrh	r2, [r2, #26]
 8005f7a:	9202      	str	r2, [sp, #8]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	9201      	str	r2, [sp, #4]
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	4623      	mov	r3, r4
 8005f84:	4602      	mov	r2, r0
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f005 fb5c 	bl	800b644 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	7b5b      	ldrb	r3, [r3, #13]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f005 fe80 	bl	800bca2 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	7b1b      	ldrb	r3, [r3, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f005 fe79 	bl	800bca2 <USBH_LL_SetToggle>

  return USBH_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd90      	pop	{r4, r7, pc}

08005fba <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00e      	beq.n	8005ff2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f005 fb51 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f005 fb7d 	bl	800b6e6 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	7b1b      	ldrb	r3, [r3, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00e      	beq.n	8006018 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	7b1b      	ldrb	r3, [r3, #12]
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f005 fb3e 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	7b1b      	ldrb	r3, [r3, #12]
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f005 fb6a 	bl	800b6e6 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	7b5b      	ldrb	r3, [r3, #13]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00e      	beq.n	800603e <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	7b5b      	ldrb	r3, [r3, #13]
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f005 fb2b 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	7b5b      	ldrb	r3, [r3, #13]
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f005 fb57 	bl	800b6e6 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	4618      	mov	r0, r3
 8006054:	f005 feee 	bl	800be34 <free>
    phost->pActiveClass->pData = 0U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800605e:	2200      	movs	r2, #0
 8006060:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3340      	adds	r3, #64	; 0x40
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f8b2 	bl	80061ee <GetLineCoding>
 800608a:	4603      	mov	r3, r0
 800608c:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800608e:	7afb      	ldrb	r3, [r7, #11]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d105      	bne.n	80060a0 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 800609a:	2102      	movs	r1, #2
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80060a0:	7afb      	ldrb	r3, [r7, #11]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80060b4:	2301      	movs	r3, #1
 80060b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d877      	bhi.n	80061c0 <USBH_CDC_Process+0x114>
 80060d0:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <USBH_CDC_Process+0x2c>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	080060ed 	.word	0x080060ed
 80060dc:	080060f3 	.word	0x080060f3
 80060e0:	08006123 	.word	0x08006123
 80060e4:	08006197 	.word	0x08006197
 80060e8:	080061a5 	.word	0x080061a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	73fb      	strb	r3, [r7, #15]
      break;
 80060f0:	e06d      	b.n	80061ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f897 	bl	800622c <SetLineCoding>
 80060fe:	4603      	mov	r3, r0
 8006100:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006102:	7bbb      	ldrb	r3, [r7, #14]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d104      	bne.n	8006112 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006110:	e058      	b.n	80061c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006112:	7bbb      	ldrb	r3, [r7, #14]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d055      	beq.n	80061c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2204      	movs	r2, #4
 800611c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006120:	e050      	b.n	80061c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	3340      	adds	r3, #64	; 0x40
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f860 	bl	80061ee <GetLineCoding>
 800612e:	4603      	mov	r3, r0
 8006130:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006132:	7bbb      	ldrb	r3, [r7, #14]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d126      	bne.n	8006186 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614a:	791b      	ldrb	r3, [r3, #4]
 800614c:	429a      	cmp	r2, r3
 800614e:	d13b      	bne.n	80061c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800615a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800615c:	429a      	cmp	r2, r3
 800615e:	d133      	bne.n	80061c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800616a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800616c:	429a      	cmp	r2, r3
 800616e:	d12b      	bne.n	80061c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006178:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800617a:	429a      	cmp	r2, r3
 800617c:	d124      	bne.n	80061c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f958 	bl	8006434 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006184:	e020      	b.n	80061c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006186:	7bbb      	ldrb	r3, [r7, #14]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d01d      	beq.n	80061c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2204      	movs	r2, #4
 8006190:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006194:	e018      	b.n	80061c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f867 	bl	800626a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8da 	bl	8006356 <CDC_ProcessReception>
      break;
 80061a2:	e014      	b.n	80061ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80061a4:	2100      	movs	r1, #0
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f004 fcf4 	bl	800ab94 <USBH_ClrFeature>
 80061ac:	4603      	mov	r3, r0
 80061ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061b0:	7bbb      	ldrb	r3, [r7, #14]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10a      	bne.n	80061cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80061be:	e005      	b.n	80061cc <USBH_CDC_Process+0x120>

    default:
      break;
 80061c0:	bf00      	nop
 80061c2:	e004      	b.n	80061ce <USBH_CDC_Process+0x122>
      break;
 80061c4:	bf00      	nop
 80061c6:	e002      	b.n	80061ce <USBH_CDC_Process+0x122>
      break;
 80061c8:	bf00      	nop
 80061ca:	e000      	b.n	80061ce <USBH_CDC_Process+0x122>
      break;
 80061cc:	bf00      	nop

  }

  return status;
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	22a1      	movs	r2, #161	; 0xa1
 80061fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2221      	movs	r2, #33	; 0x21
 8006202:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2207      	movs	r2, #7
 8006214:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2207      	movs	r2, #7
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f004 ff86 	bl	800b12e <USBH_CtlReq>
 8006222:	4603      	mov	r3, r0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2221      	movs	r2, #33	; 0x21
 800623a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2207      	movs	r2, #7
 8006252:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2207      	movs	r2, #7
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f004 ff67 	bl	800b12e <USBH_CtlReq>
 8006260:	4603      	mov	r3, r0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b086      	sub	sp, #24
 800626e:	af02      	add	r7, sp, #8
 8006270:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800627c:	2300      	movs	r3, #0
 800627e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006286:	2b01      	cmp	r3, #1
 8006288:	d002      	beq.n	8006290 <CDC_ProcessTransmission+0x26>
 800628a:	2b02      	cmp	r3, #2
 800628c:	d023      	beq.n	80062d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800628e:	e05e      	b.n	800634e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	8b12      	ldrh	r2, [r2, #24]
 8006298:	4293      	cmp	r3, r2
 800629a:	d90b      	bls.n	80062b4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	69d9      	ldr	r1, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8b1a      	ldrh	r2, [r3, #24]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	7b5b      	ldrb	r3, [r3, #13]
 80062a8:	2001      	movs	r0, #1
 80062aa:	9000      	str	r0, [sp, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f005 f94c 	bl	800b54a <USBH_BulkSendData>
 80062b2:	e00b      	b.n	80062cc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	7b5b      	ldrb	r3, [r3, #13]
 80062c2:	2001      	movs	r0, #1
 80062c4:	9000      	str	r0, [sp, #0]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f005 f93f 	bl	800b54a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062d4:	e03b      	b.n	800634e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	7b5b      	ldrb	r3, [r3, #13]
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f005 fcbf 	bl	800bc60 <USBH_LL_GetURBState>
 80062e2:	4603      	mov	r3, r0
 80062e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80062e6:	7afb      	ldrb	r3, [r7, #11]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d128      	bne.n	800633e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	8b12      	ldrh	r2, [r2, #24]
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d90e      	bls.n	8006316 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	8b12      	ldrh	r2, [r2, #24]
 8006300:	1a9a      	subs	r2, r3, r2
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	8b12      	ldrh	r2, [r2, #24]
 800630e:	441a      	add	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	61da      	str	r2, [r3, #28]
 8006314:	e002      	b.n	800631c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	d004      	beq.n	800632e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800632c:	e00e      	b.n	800634c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f868 	bl	800640c <USBH_CDC_TransmitCallback>
      break;
 800633c:	e006      	b.n	800634c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800633e:	7afb      	ldrb	r3, [r7, #11]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d103      	bne.n	800634c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800634c:	bf00      	nop
  }
}
 800634e:	bf00      	nop
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b086      	sub	sp, #24
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006368:	2300      	movs	r3, #0
 800636a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006372:	2b03      	cmp	r3, #3
 8006374:	d002      	beq.n	800637c <CDC_ProcessReception+0x26>
 8006376:	2b04      	cmp	r3, #4
 8006378:	d00e      	beq.n	8006398 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800637a:	e043      	b.n	8006404 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	6a19      	ldr	r1, [r3, #32]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	8b5a      	ldrh	r2, [r3, #26]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	7b1b      	ldrb	r3, [r3, #12]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f005 f903 	bl	800b594 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2204      	movs	r2, #4
 8006392:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006396:	e035      	b.n	8006404 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	7b1b      	ldrb	r3, [r3, #12]
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f005 fc5e 	bl	800bc60 <USBH_LL_GetURBState>
 80063a4:	4603      	mov	r3, r0
 80063a6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80063a8:	7cfb      	ldrb	r3, [r7, #19]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d129      	bne.n	8006402 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	7b1b      	ldrb	r3, [r3, #12]
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f005 fbc1 	bl	800bb3c <USBH_LL_GetLastXferSize>
 80063ba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d016      	beq.n	80063f4 <CDC_ProcessReception+0x9e>
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	8b5b      	ldrh	r3, [r3, #26]
 80063ca:	461a      	mov	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d910      	bls.n	80063f4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1ad2      	subs	r2, r2, r3
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6a1a      	ldr	r2, [r3, #32]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	441a      	add	r2, r3
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2203      	movs	r2, #3
 80063ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80063f2:	e006      	b.n	8006402 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f80f 	bl	8006420 <USBH_CDC_ReceiveCallback>
      break;
 8006402:	bf00      	nop
  }
}
 8006404:	bf00      	nop
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006448:	b590      	push	{r4, r7, lr}
 800644a:	b08b      	sub	sp, #44	; 0x2c
 800644c:	af04      	add	r7, sp, #16
 800644e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800645a:	7919      	ldrb	r1, [r3, #4]
 800645c:	23ff      	movs	r3, #255	; 0xff
 800645e:	2201      	movs	r2, #1
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f003 fd6e 	bl	8009f42 <USBH_FindInterface>
 8006466:	4603      	mov	r3, r0
 8006468:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800646a:	7dbb      	ldrb	r3, [r7, #22]
 800646c:	2bff      	cmp	r3, #255	; 0xff
 800646e:	d002      	beq.n	8006476 <USBH_HID_InterfaceInit+0x2e>
 8006470:	7dbb      	ldrb	r3, [r7, #22]
 8006472:	2b09      	cmp	r3, #9
 8006474:	d901      	bls.n	800647a <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006476:	2302      	movs	r3, #2
 8006478:	e108      	b.n	800668c <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 800647a:	7dbb      	ldrb	r3, [r7, #22]
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f003 fd43 	bl	8009f0a <USBH_SelectInterface>
 8006484:	4603      	mov	r3, r0
 8006486:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8006488:	7d7b      	ldrb	r3, [r7, #21]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 800648e:	2302      	movs	r3, #2
 8006490:	e0fc      	b.n	800668c <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 454c 	ldr.w	r4, [r3, #1356]	; 0x54c
 8006498:	2034      	movs	r0, #52	; 0x34
 800649a:	f005 fcc3 	bl	800be24 <malloc>
 800649e:	4603      	mov	r3, r0
 80064a0:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 80064b2:	2302      	movs	r3, #2
 80064b4:	e0ea      	b.n	800668c <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 80064b6:	2234      	movs	r2, #52	; 0x34
 80064b8:	2100      	movs	r1, #0
 80064ba:	6938      	ldr	r0, [r7, #16]
 80064bc:	f005 fcd0 	bl	800be60 <memset>

  HID_Handle->state = HID_ERROR;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	2207      	movs	r2, #7
 80064c4:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80064c6:	7dbb      	ldrb	r3, [r7, #22]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	2132      	movs	r1, #50	; 0x32
 80064cc:	fb01 f303 	mul.w	r3, r1, r3
 80064d0:	4413      	add	r3, r2
 80064d2:	f203 3349 	addw	r3, r3, #841	; 0x349
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d103      	bne.n	80064e4 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4a6d      	ldr	r2, [pc, #436]	; (8006694 <USBH_HID_InterfaceInit+0x24c>)
 80064e0:	631a      	str	r2, [r3, #48]	; 0x30
 80064e2:	e010      	b.n	8006506 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 80064e4:	7dbb      	ldrb	r3, [r7, #22]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	2132      	movs	r1, #50	; 0x32
 80064ea:	fb01 f303 	mul.w	r3, r1, r3
 80064ee:	4413      	add	r3, r2
 80064f0:	f203 3349 	addw	r3, r3, #841	; 0x349
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d103      	bne.n	8006502 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	4a66      	ldr	r2, [pc, #408]	; (8006698 <USBH_HID_InterfaceInit+0x250>)
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
 8006500:	e001      	b.n	8006506 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8006502:	2302      	movs	r3, #2
 8006504:	e0c2      	b.n	800668c <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2200      	movs	r2, #0
 800650a:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2200      	movs	r2, #0
 8006510:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006512:	7dbb      	ldrb	r3, [r7, #22]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	2132      	movs	r1, #50	; 0x32
 8006518:	fb01 f303 	mul.w	r3, r1, r3
 800651c:	4413      	add	r3, r2
 800651e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006522:	781a      	ldrb	r2, [r3, #0]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006528:	7dbb      	ldrb	r3, [r7, #22]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	2132      	movs	r1, #50	; 0x32
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	4413      	add	r3, r2
 8006534:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006538:	881a      	ldrh	r2, [r3, #0]
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800653e:	7dbb      	ldrb	r3, [r7, #22]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	2132      	movs	r1, #50	; 0x32
 8006544:	fb01 f303 	mul.w	r3, r1, r3
 8006548:	4413      	add	r3, r2
 800654a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	b29a      	uxth	r2, r3
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	8b9b      	ldrh	r3, [r3, #28]
 800655a:	2b09      	cmp	r3, #9
 800655c:	d802      	bhi.n	8006564 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	220a      	movs	r2, #10
 8006562:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8006564:	7dbb      	ldrb	r3, [r7, #22]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	2132      	movs	r1, #50	; 0x32
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	4413      	add	r3, r2
 8006570:	f203 3346 	addw	r3, r3, #838	; 0x346
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b05      	cmp	r3, #5
 8006578:	bf28      	it	cs
 800657a:	2305      	movcs	r3, #5
 800657c:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800657e:	2300      	movs	r3, #0
 8006580:	75fb      	strb	r3, [r7, #23]
 8006582:	e07d      	b.n	8006680 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8006584:	7dbb      	ldrb	r3, [r7, #22]
 8006586:	7df9      	ldrb	r1, [r7, #23]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	3101      	adds	r1, #1
 800658c:	00c9      	lsls	r1, r1, #3
 800658e:	2032      	movs	r0, #50	; 0x32
 8006590:	fb00 f303 	mul.w	r3, r0, r3
 8006594:	440b      	add	r3, r1
 8006596:	4413      	add	r3, r2
 8006598:	f203 3346 	addw	r3, r3, #838	; 0x346
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	b25b      	sxtb	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	da35      	bge.n	8006610 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 80065a4:	7dbb      	ldrb	r3, [r7, #22]
 80065a6:	7df9      	ldrb	r1, [r7, #23]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	3101      	adds	r1, #1
 80065ac:	00c9      	lsls	r1, r1, #3
 80065ae:	2032      	movs	r0, #50	; 0x32
 80065b0:	fb00 f303 	mul.w	r3, r0, r3
 80065b4:	440b      	add	r3, r1
 80065b6:	4413      	add	r3, r2
 80065b8:	f203 3346 	addw	r3, r3, #838	; 0x346
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	791b      	ldrb	r3, [r3, #4]
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f005 f86a 	bl	800b6a2 <USBH_AllocPipe>
 80065ce:	4603      	mov	r3, r0
 80065d0:	461a      	mov	r2, r3
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	7859      	ldrb	r1, [r3, #1]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	7918      	ldrb	r0, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	8b12      	ldrh	r2, [r2, #24]
 80065ee:	9202      	str	r2, [sp, #8]
 80065f0:	2203      	movs	r2, #3
 80065f2:	9201      	str	r2, [sp, #4]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	4623      	mov	r3, r4
 80065f8:	4602      	mov	r2, r0
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f005 f822 	bl	800b644 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	785b      	ldrb	r3, [r3, #1]
 8006604:	2200      	movs	r2, #0
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f005 fb4a 	bl	800bca2 <USBH_LL_SetToggle>
 800660e:	e034      	b.n	800667a <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8006610:	7dbb      	ldrb	r3, [r7, #22]
 8006612:	7df9      	ldrb	r1, [r7, #23]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	3101      	adds	r1, #1
 8006618:	00c9      	lsls	r1, r1, #3
 800661a:	2032      	movs	r0, #50	; 0x32
 800661c:	fb00 f303 	mul.w	r3, r0, r3
 8006620:	440b      	add	r3, r1
 8006622:	4413      	add	r3, r2
 8006624:	f203 3346 	addw	r3, r3, #838	; 0x346
 8006628:	781a      	ldrb	r2, [r3, #0]
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	78db      	ldrb	r3, [r3, #3]
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f005 f834 	bl	800b6a2 <USBH_AllocPipe>
 800663a:	4603      	mov	r3, r0
 800663c:	461a      	mov	r2, r3
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	7819      	ldrb	r1, [r3, #0]
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	78d8      	ldrb	r0, [r3, #3]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	8b12      	ldrh	r2, [r2, #24]
 800665a:	9202      	str	r2, [sp, #8]
 800665c:	2203      	movs	r2, #3
 800665e:	9201      	str	r2, [sp, #4]
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	4623      	mov	r3, r4
 8006664:	4602      	mov	r2, r0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f004 ffec 	bl	800b644 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2200      	movs	r2, #0
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f005 fb14 	bl	800bca2 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	3301      	adds	r3, #1
 800667e:	75fb      	strb	r3, [r7, #23]
 8006680:	7dfa      	ldrb	r2, [r7, #23]
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	429a      	cmp	r2, r3
 8006686:	f4ff af7d 	bcc.w	8006584 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	bd90      	pop	{r4, r7, pc}
 8006694:	08006cc5 	.word	0x08006cc5
 8006698:	08006d6d 	.word	0x08006d6d

0800669c <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	785b      	ldrb	r3, [r3, #1]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00e      	beq.n	80066d4 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f004 ffe0 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	785b      	ldrb	r3, [r3, #1]
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f005 f80c 	bl	800b6e6 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00e      	beq.n	80066fa <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f004 ffcd 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f004 fff9 	bl	800b6e6 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00b      	beq.n	800671e <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	4618      	mov	r0, r3
 8006710:	f005 fb90 	bl	800be34 <free>
    phost->pActiveClass->pData = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800671a:	2200      	movs	r2, #0
 800671c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8006730:	2301      	movs	r3, #1
 8006732:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8006734:	2301      	movs	r3, #1
 8006736:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	795b      	ldrb	r3, [r3, #5]
 8006746:	2b05      	cmp	r3, #5
 8006748:	d860      	bhi.n	800680c <USBH_HID_ClassRequest+0xe4>
 800674a:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <USBH_HID_ClassRequest+0x28>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	08006769 	.word	0x08006769
 8006754:	0800680d 	.word	0x0800680d
 8006758:	08006783 	.word	0x08006783
 800675c:	08006769 	.word	0x08006769
 8006760:	080067ad 	.word	0x080067ad
 8006764:	080067d7 	.word	0x080067d7
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	331c      	adds	r3, #28
 8006772:	4619      	mov	r1, r3
 8006774:	4610      	mov	r0, r2
 8006776:	f000 f9cd 	bl	8006b14 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2202      	movs	r2, #2
 800677e:	715a      	strb	r2, [r3, #5]

      break;
 8006780:	e04b      	b.n	800681a <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f930 	bl	80069ee <USBH_HID_GetHIDReportDescriptor>
 800678e:	4603      	mov	r3, r0
 8006790:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d103      	bne.n	80067a0 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2204      	movs	r2, #4
 800679c:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800679e:	e037      	b.n	8006810 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 80067a0:	7bbb      	ldrb	r3, [r7, #14]
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d134      	bne.n	8006810 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 80067a6:	2302      	movs	r3, #2
 80067a8:	73fb      	strb	r3, [r7, #15]
      break;
 80067aa:	e031      	b.n	8006810 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 80067ac:	2200      	movs	r2, #0
 80067ae:	2100      	movs	r1, #0
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f935 	bl	8006a20 <USBH_HID_SetIdle>
 80067b6:	4603      	mov	r3, r0
 80067b8:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d103      	bne.n	80067c8 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2205      	movs	r2, #5
 80067c4:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 80067c6:	e025      	b.n	8006814 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d122      	bne.n	8006814 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2205      	movs	r2, #5
 80067d2:	715a      	strb	r2, [r3, #5]
      break;
 80067d4:	e01e      	b.n	8006814 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 80067d6:	2100      	movs	r1, #0
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f975 	bl	8006ac8 <USBH_HID_SetProtocol>
 80067de:	4603      	mov	r3, r0
 80067e0:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 80067e2:	7bbb      	ldrb	r3, [r7, #14]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10b      	bne.n	8006800 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2201      	movs	r2, #1
 80067ec:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 80067f4:	2102      	movs	r1, #2
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4798      	blx	r3
        status = USBH_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 80067fe:	e00b      	b.n	8006818 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8006800:	7bbb      	ldrb	r3, [r7, #14]
 8006802:	2b03      	cmp	r3, #3
 8006804:	d108      	bne.n	8006818 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8006806:	2302      	movs	r3, #2
 8006808:	73fb      	strb	r3, [r7, #15]
      break;
 800680a:	e005      	b.n	8006818 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 800680c:	bf00      	nop
 800680e:	e004      	b.n	800681a <USBH_HID_ClassRequest+0xf2>
      break;
 8006810:	bf00      	nop
 8006812:	e002      	b.n	800681a <USBH_HID_ClassRequest+0xf2>
      break;
 8006814:	bf00      	nop
 8006816:	e000      	b.n	800681a <USBH_HID_ClassRequest+0xf2>
      break;
 8006818:	bf00      	nop
  }

  return status;
 800681a:	7bfb      	ldrb	r3, [r7, #15]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af02      	add	r7, sp, #8
 800682a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	789b      	ldrb	r3, [r3, #2]
 800683e:	2b06      	cmp	r3, #6
 8006840:	f200 80a9 	bhi.w	8006996 <USBH_HID_Process+0x172>
 8006844:	a201      	add	r2, pc, #4	; (adr r2, 800684c <USBH_HID_Process+0x28>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006869 	.word	0x08006869
 8006850:	08006879 	.word	0x08006879
 8006854:	08006997 	.word	0x08006997
 8006858:	08006997 	.word	0x08006997
 800685c:	080068e9 	.word	0x080068e9
 8006860:	080068d3 	.word	0x080068d3
 8006864:	08006917 	.word	0x08006917
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	2201      	movs	r2, #1
 8006874:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006876:	e093      	b.n	80069a0 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	695a      	ldr	r2, [r3, #20]
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	8b1b      	ldrh	r3, [r3, #24]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	2200      	movs	r2, #0
 8006888:	2101      	movs	r1, #1
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f8f0 	bl	8006a70 <USBH_HID_GetReport>
 8006890:	4603      	mov	r3, r0
 8006892:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006894:	7dfb      	ldrb	r3, [r7, #23]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d103      	bne.n	80068a2 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2205      	movs	r2, #5
 800689e:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068a0:	e07e      	b.n	80069a0 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d105      	bne.n	80068b4 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2201      	movs	r2, #1
 80068ac:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	75fb      	strb	r3, [r7, #23]
      break;
 80068b2:	e075      	b.n	80069a0 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d105      	bne.n	80068c6 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2205      	movs	r2, #5
 80068be:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	75fb      	strb	r3, [r7, #23]
      break;
 80068c4:	e06c      	b.n	80069a0 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2207      	movs	r2, #7
 80068ca:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80068cc:	2302      	movs	r3, #2
 80068ce:	75fb      	strb	r3, [r7, #23]
      break;
 80068d0:	e066      	b.n	80069a0 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d05c      	beq.n	800699a <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2204      	movs	r2, #4
 80068e4:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068e6:	e058      	b.n	800699a <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f004 fe6a 	bl	800b5d0 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2206      	movs	r2, #6
 8006900:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8006914:	e044      	b.n	80069a0 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f005 f99f 	bl	800bc60 <USBH_LL_GetURBState>
 8006922:	4603      	mov	r3, r0
 8006924:	2b01      	cmp	r3, #1
 8006926:	d120      	bne.n	800696a <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f005 f904 	bl	800bb3c <USBH_LL_GetLastXferSize>
 8006934:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800693c:	2b00      	cmp	r3, #0
 800693e:	d12e      	bne.n	800699e <USBH_HID_Process+0x17a>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d02b      	beq.n	800699e <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f103 0008 	add.w	r0, r3, #8
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	6959      	ldr	r1, [r3, #20]
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	8b1b      	ldrh	r3, [r3, #24]
 8006954:	461a      	mov	r2, r3
 8006956:	f000 f957 	bl	8006c08 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f9a4 	bl	8006cb0 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8006968:	e019      	b.n	800699e <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f005 f975 	bl	800bc60 <USBH_LL_GetURBState>
 8006976:	4603      	mov	r3, r0
 8006978:	2b05      	cmp	r3, #5
 800697a:	d110      	bne.n	800699e <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	7e9b      	ldrb	r3, [r3, #26]
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f004 f906 	bl	800ab94 <USBH_ClrFeature>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d107      	bne.n	800699e <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2204      	movs	r2, #4
 8006992:	709a      	strb	r2, [r3, #2]
      break;
 8006994:	e003      	b.n	800699e <USBH_HID_Process+0x17a>

    default:
      break;
 8006996:	bf00      	nop
 8006998:	e002      	b.n	80069a0 <USBH_HID_Process+0x17c>
      break;
 800699a:	bf00      	nop
 800699c:	e000      	b.n	80069a0 <USBH_HID_Process+0x17c>
      break;
 800699e:	bf00      	nop
  }

  return status;
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3718      	adds	r7, #24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop

080069ac <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	789b      	ldrb	r3, [r3, #2]
 80069c2:	2b06      	cmp	r3, #6
 80069c4:	d10c      	bne.n	80069e0 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	8b92      	ldrh	r2, [r2, #28]
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d302      	bcc.n	80069e0 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2204      	movs	r2, #4
 80069de:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b086      	sub	sp, #24
 80069f2:	af02      	add	r7, sp, #8
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	460b      	mov	r3, r1
 80069f8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006a00:	887b      	ldrh	r3, [r7, #2]
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	4613      	mov	r3, r2
 8006a06:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f003 fffa 	bl	800aa06 <USBH_GetDescriptor>
 8006a12:	4603      	mov	r3, r0
 8006a14:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2221      	movs	r2, #33	; 0x21
 8006a34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	220a      	movs	r2, #10
 8006a3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	78bb      	ldrb	r3, [r7, #2]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2100      	movs	r1, #0
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f004 fb64 	bl	800b12e <USBH_CtlReq>
 8006a66:	4603      	mov	r3, r0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	607b      	str	r3, [r7, #4]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	72fb      	strb	r3, [r7, #11]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	22a1      	movs	r2, #161	; 0xa1
 8006a86:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	021b      	lsls	r3, r3, #8
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	7abb      	ldrb	r3, [r7, #10]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8006aa8:	7e3b      	ldrb	r3, [r7, #24]
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8006ab0:	7e3b      	ldrb	r3, [r7, #24]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	6879      	ldr	r1, [r7, #4]
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f004 fb38 	bl	800b12e <USBH_CtlReq>
 8006abe:	4603      	mov	r3, r0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2221      	movs	r2, #33	; 0x21
 8006ad8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	220b      	movs	r2, #11
 8006ade:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	825a      	strh	r2, [r3, #18]
 8006aec:	e002      	b.n	8006af4 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006b00:	2200      	movs	r2, #0
 8006b02:	2100      	movs	r1, #0
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f004 fb12 	bl	800b12e <USBH_CtlReq>
 8006b0a:	4603      	mov	r3, r0

}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	3302      	adds	r3, #2
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	3303      	adds	r3, #3
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	4313      	orrs	r3, r2
 8006b38:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8006b3a:	897b      	ldrh	r3, [r7, #10]
 8006b3c:	2b09      	cmp	r3, #9
 8006b3e:	d943      	bls.n	8006bc8 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b40:	2309      	movs	r3, #9
 8006b42:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8006b44:	e03c      	b.n	8006bc0 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b46:	f107 0308 	add.w	r3, r7, #8
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f004 fad3 	bl	800b0f8 <USBH_GetNextDesc>
 8006b52:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	785b      	ldrb	r3, [r3, #1]
 8006b58:	2b21      	cmp	r3, #33	; 0x21
 8006b5a:	d131      	bne.n	8006bc0 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	781a      	ldrb	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	785a      	ldrb	r2, [r3, #1]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3302      	adds	r3, #2
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3303      	adds	r3, #3
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4313      	orrs	r3, r2
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	791a      	ldrb	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	795a      	ldrb	r2, [r3, #5]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	799a      	ldrb	r2, [r3, #6]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3307      	adds	r3, #7
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3308      	adds	r3, #8
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	811a      	strh	r2, [r3, #8]
        break;
 8006bbc:	bf00      	nop
      }
    }
  }
}
 8006bbe:	e003      	b.n	8006bc8 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 8006bc0:	893b      	ldrh	r3, [r7, #8]
 8006bc2:	897a      	ldrh	r2, [r7, #10]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d8be      	bhi.n	8006b46 <USBH_HID_ParseHIDDesc+0x32>
}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	88fa      	ldrh	r2, [r7, #6]
 8006bf4:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	601a      	str	r2, [r3, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	7a9b      	ldrb	r3, [r3, #10]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d13c      	bne.n	8006c9c <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	82fb      	strh	r3, [r7, #22]
 8006c2c:	e032      	b.n	8006c94 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	889b      	ldrh	r3, [r3, #4]
 8006c32:	3301      	adds	r3, #1
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	88d2      	ldrh	r2, [r2, #6]
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00a      	beq.n	8006c52 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	889b      	ldrh	r3, [r3, #4]
 8006c40:	3301      	adds	r3, #1
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d108      	bne.n	8006c5c <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	88db      	ldrh	r3, [r3, #6]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	729a      	strb	r2, [r3, #10]
        return i;
 8006c58:	8afb      	ldrh	r3, [r7, #22]
 8006c5a:	e023      	b.n	8006ca4 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	613a      	str	r2, [r7, #16]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	6812      	ldr	r2, [r2, #0]
 8006c66:	68f9      	ldr	r1, [r7, #12]
 8006c68:	8889      	ldrh	r1, [r1, #4]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	7013      	strb	r3, [r2, #0]
        f->head++;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	889b      	ldrh	r3, [r3, #4]
 8006c74:	3301      	adds	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	889a      	ldrh	r2, [r3, #4]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	891b      	ldrh	r3, [r3, #8]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d102      	bne.n	8006c8e <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8006c8e:	8afb      	ldrh	r3, [r7, #22]
 8006c90:	3301      	adds	r3, #1
 8006c92:	82fb      	strh	r3, [r7, #22]
 8006c94:	8afa      	ldrh	r2, [r7, #22]
 8006c96:	88fb      	ldrh	r3, [r7, #6]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d3c8      	bcc.n	8006c2e <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	371c      	adds	r7, #28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <USBH_HID_EventCallback>:
  * @brief  The function is a callback about HID Data events
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 8006cd6:	4b22      	ldr	r3, [pc, #136]	; (8006d60 <USBH_HID_KeybdInit+0x9c>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 8006cdc:	4b20      	ldr	r3, [pc, #128]	; (8006d60 <USBH_HID_KeybdInit+0x9c>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 8006ce2:	4b1f      	ldr	r3, [pc, #124]	; (8006d60 <USBH_HID_KeybdInit+0x9c>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 8006ce8:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <USBH_HID_KeybdInit+0x9c>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 8006cee:	4b1c      	ldr	r3, [pc, #112]	; (8006d60 <USBH_HID_KeybdInit+0x9c>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8006cf4:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <USBH_HID_KeybdInit+0x9c>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 8006cfa:	4b19      	ldr	r3, [pc, #100]	; (8006d60 <USBH_HID_KeybdInit+0x9c>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8006d00:	4b17      	ldr	r3, [pc, #92]	; (8006d60 <USBH_HID_KeybdInit+0x9c>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	e00c      	b.n	8006d26 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8006d0c:	4a15      	ldr	r2, [pc, #84]	; (8006d64 <USBH_HID_KeybdInit+0xa0>)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2100      	movs	r1, #0
 8006d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8006d16:	4a14      	ldr	r2, [pc, #80]	; (8006d68 <USBH_HID_KeybdInit+0xa4>)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d9ef      	bls.n	8006d0c <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	8b1b      	ldrh	r3, [r3, #24]
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d902      	bls.n	8006d3a <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2208      	movs	r2, #8
 8006d38:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	4a0a      	ldr	r2, [pc, #40]	; (8006d68 <USBH_HID_KeybdInit+0xa4>)
 8006d3e:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f103 0008 	add.w	r0, r3, #8
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d4c:	2250      	movs	r2, #80	; 0x50
 8006d4e:	4619      	mov	r1, r3
 8006d50:	f7ff ff3e 	bl	8006bd0 <USBH_HID_FifoInit>

  return USBH_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000134 	.word	0x20000134
 8006d64:	2000014c 	.word	0x2000014c
 8006d68:	20000144 	.word	0x20000144

08006d6c <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8006d7e:	4b1d      	ldr	r3, [pc, #116]	; (8006df4 <USBH_HID_MouseInit+0x88>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8006d84:	4b1b      	ldr	r3, [pc, #108]	; (8006df4 <USBH_HID_MouseInit+0x88>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8006d8a:	4b1a      	ldr	r3, [pc, #104]	; (8006df4 <USBH_HID_MouseInit+0x88>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8006d90:	4b18      	ldr	r3, [pc, #96]	; (8006df4 <USBH_HID_MouseInit+0x88>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8006d96:	4b17      	ldr	r3, [pc, #92]	; (8006df4 <USBH_HID_MouseInit+0x88>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	e00c      	b.n	8006dbc <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8006da2:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <USBH_HID_MouseInit+0x8c>)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2100      	movs	r1, #0
 8006da8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8006dac:	4a13      	ldr	r2, [pc, #76]	; (8006dfc <USBH_HID_MouseInit+0x90>)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2100      	movs	r1, #0
 8006db2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3301      	adds	r3, #1
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d9ef      	bls.n	8006da2 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	8b1b      	ldrh	r3, [r3, #24]
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d902      	bls.n	8006dd0 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2208      	movs	r2, #8
 8006dce:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <USBH_HID_MouseInit+0x90>)
 8006dd4:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f103 0008 	add.w	r0, r3, #8
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006de2:	2250      	movs	r2, #80	; 0x50
 8006de4:	4619      	mov	r1, r3
 8006de6:	f7ff fef3 	bl	8006bd0 <USBH_HID_FifoInit>

  return USBH_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	20000154 	.word	0x20000154
 8006df8:	2000015c 	.word	0x2000015c
 8006dfc:	20000164 	.word	0x20000164

08006e00 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006e00:	b590      	push	{r4, r7, lr}
 8006e02:	b089      	sub	sp, #36	; 0x24
 8006e04:	af04      	add	r7, sp, #16
 8006e06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8006e0e:	7919      	ldrb	r1, [r3, #4]
 8006e10:	2350      	movs	r3, #80	; 0x50
 8006e12:	2206      	movs	r2, #6
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f003 f894 	bl	8009f42 <USBH_FindInterface>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	2bff      	cmp	r3, #255	; 0xff
 8006e22:	d002      	beq.n	8006e2a <USBH_MSC_InterfaceInit+0x2a>
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b09      	cmp	r3, #9
 8006e28:	d901      	bls.n	8006e2e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e106      	b.n	800703c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f003 f869 	bl	8009f0a <USBH_SelectInterface>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8006e42:	2302      	movs	r3, #2
 8006e44:	e0fa      	b.n	800703c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 454c 	ldr.w	r4, [r3, #1356]	; 0x54c
 8006e4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006e50:	f004 ffe8 	bl	800be24 <malloc>
 8006e54:	4603      	mov	r3, r0
 8006e56:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e0e7      	b.n	800703c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e70:	2100      	movs	r1, #0
 8006e72:	68b8      	ldr	r0, [r7, #8]
 8006e74:	f004 fff4 	bl	800be60 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	2132      	movs	r1, #50	; 0x32
 8006e7e:	fb01 f303 	mul.w	r3, r1, r3
 8006e82:	4413      	add	r3, r2
 8006e84:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	b25b      	sxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	da16      	bge.n	8006ebe <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	2132      	movs	r1, #50	; 0x32
 8006e96:	fb01 f303 	mul.w	r3, r1, r3
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	2132      	movs	r1, #50	; 0x32
 8006eac:	fb01 f303 	mul.w	r3, r1, r3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006eb6:	881a      	ldrh	r2, [r3, #0]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	815a      	strh	r2, [r3, #10]
 8006ebc:	e015      	b.n	8006eea <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	2132      	movs	r1, #50	; 0x32
 8006ec4:	fb01 f303 	mul.w	r3, r1, r3
 8006ec8:	4413      	add	r3, r2
 8006eca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ece:	781a      	ldrb	r2, [r3, #0]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	2132      	movs	r1, #50	; 0x32
 8006eda:	fb01 f303 	mul.w	r3, r1, r3
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ee4:	881a      	ldrh	r2, [r3, #0]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	2132      	movs	r1, #50	; 0x32
 8006ef0:	fb01 f303 	mul.w	r3, r1, r3
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	b25b      	sxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	da16      	bge.n	8006f30 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	2132      	movs	r1, #50	; 0x32
 8006f08:	fb01 f303 	mul.w	r3, r1, r3
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f12:	781a      	ldrb	r2, [r3, #0]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	2132      	movs	r1, #50	; 0x32
 8006f1e:	fb01 f303 	mul.w	r3, r1, r3
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f28:	881a      	ldrh	r2, [r3, #0]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	815a      	strh	r2, [r3, #10]
 8006f2e:	e015      	b.n	8006f5c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	2132      	movs	r1, #50	; 0x32
 8006f36:	fb01 f303 	mul.w	r3, r1, r3
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f40:	781a      	ldrb	r2, [r3, #0]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	2132      	movs	r1, #50	; 0x32
 8006f4c:	fb01 f303 	mul.w	r3, r1, r3
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f56:	881a      	ldrh	r2, [r3, #0]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2200      	movs	r2, #0
 8006f66:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	799b      	ldrb	r3, [r3, #6]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f004 fb94 	bl	800b6a2 <USBH_AllocPipe>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	79db      	ldrb	r3, [r3, #7]
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f004 fb8a 	bl	800b6a2 <USBH_AllocPipe>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	461a      	mov	r2, r3
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fbd8 	bl	800774c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	799b      	ldrb	r3, [r3, #6]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01e      	beq.n	8006fe2 <USBH_MSC_InterfaceInit+0x1e2>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	891b      	ldrh	r3, [r3, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01a      	beq.n	8006fe2 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	7959      	ldrb	r1, [r3, #5]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	7998      	ldrb	r0, [r3, #6]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	8912      	ldrh	r2, [r2, #8]
 8006fc4:	9202      	str	r2, [sp, #8]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	9201      	str	r2, [sp, #4]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	4623      	mov	r3, r4
 8006fce:	4602      	mov	r2, r0
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f004 fb37 	bl	800b644 <USBH_OpenPipe>
 8006fd6:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	79db      	ldrb	r3, [r3, #7]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d02c      	beq.n	800703a <USBH_MSC_InterfaceInit+0x23a>
 8006fe0:	e001      	b.n	8006fe6 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e02a      	b.n	800703c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	895b      	ldrh	r3, [r3, #10]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d025      	beq.n	800703a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	7919      	ldrb	r1, [r3, #4]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	79d8      	ldrb	r0, [r3, #7]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	8952      	ldrh	r2, [r2, #10]
 8007006:	9202      	str	r2, [sp, #8]
 8007008:	2202      	movs	r2, #2
 800700a:	9201      	str	r2, [sp, #4]
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	4623      	mov	r3, r4
 8007010:	4602      	mov	r2, r0
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f004 fb16 	bl	800b644 <USBH_OpenPipe>
 8007018:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	791b      	ldrb	r3, [r3, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f004 fe3d 	bl	800bca2 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	795b      	ldrb	r3, [r3, #5]
 800702c:	2200      	movs	r2, #0
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f004 fe36 	bl	800bca2 <USBH_LL_SetToggle>

  return USBH_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	e000      	b.n	800703c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800703a:	2303      	movs	r3, #3
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	bd90      	pop	{r4, r7, pc}

08007044 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	795b      	ldrb	r3, [r3, #5]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00e      	beq.n	800707c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	795b      	ldrb	r3, [r3, #5]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f004 fb0c 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	795b      	ldrb	r3, [r3, #5]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f004 fb38 	bl	800b6e6 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	791b      	ldrb	r3, [r3, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00e      	beq.n	80070a2 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	791b      	ldrb	r3, [r3, #4]
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f004 faf9 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	791b      	ldrb	r3, [r3, #4]
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f004 fb25 	bl	800b6e6 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f004 febc 	bl	800be34 <free>
    phost->pActiveClass->pData = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80070c2:	2200      	movs	r2, #0
 80070c4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80070e2:	2301      	movs	r3, #1
 80070e4:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	7b9b      	ldrb	r3, [r3, #14]
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d041      	beq.n	8007172 <USBH_MSC_ClassRequest+0xa2>
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	dc4b      	bgt.n	800718a <USBH_MSC_ClassRequest+0xba>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <USBH_MSC_ClassRequest+0x2a>
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d147      	bne.n	800718a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fb06 	bl	8007710 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8007104:	4603      	mov	r3, r0
 8007106:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	2b03      	cmp	r3, #3
 800710c:	d104      	bne.n	8007118 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d137      	bne.n	800718e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d804      	bhi.n	8007130 <USBH_MSC_ClassRequest+0x60>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	3301      	adds	r3, #1
 800712c:	b2da      	uxtb	r2, r3
 800712e:	e000      	b.n	8007132 <USBH_MSC_ClassRequest+0x62>
 8007130:	2202      	movs	r2, #2
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007136:	2300      	movs	r3, #0
 8007138:	73bb      	strb	r3, [r7, #14]
 800713a:	e014      	b.n	8007166 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	2134      	movs	r1, #52	; 0x34
 8007142:	fb01 f303 	mul.w	r3, r1, r3
 8007146:	4413      	add	r3, r2
 8007148:	3392      	adds	r3, #146	; 0x92
 800714a:	2202      	movs	r2, #2
 800714c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	2134      	movs	r1, #52	; 0x34
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	4413      	add	r3, r2
 800715a:	33c1      	adds	r3, #193	; 0xc1
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	3301      	adds	r3, #1
 8007164:	73bb      	strb	r3, [r7, #14]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	7bba      	ldrb	r2, [r7, #14]
 800716c:	429a      	cmp	r2, r3
 800716e:	d3e5      	bcc.n	800713c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8007170:	e00d      	b.n	800718e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007172:	2100      	movs	r1, #0
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f003 fd0d 	bl	800ab94 <USBH_ClrFeature>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d108      	bne.n	8007192 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	7bda      	ldrb	r2, [r3, #15]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	739a      	strb	r2, [r3, #14]
      }
      break;
 8007188:	e003      	b.n	8007192 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800718a:	bf00      	nop
 800718c:	e002      	b.n	8007194 <USBH_MSC_ClassRequest+0xc4>
      break;
 800718e:	bf00      	nop
 8007190:	e000      	b.n	8007194 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007192:	bf00      	nop
  }

  return status;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80071b2:	2301      	movs	r3, #1
 80071b4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80071b6:	2301      	movs	r3, #1
 80071b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80071ba:	2301      	movs	r3, #1
 80071bc:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	7b1b      	ldrb	r3, [r3, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <USBH_MSC_Process+0x2e>
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	f000 8271 	beq.w	80076ae <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80071cc:	e272      	b.n	80076b4 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	429a      	cmp	r2, r3
 80071dc:	f080 824f 	bcs.w	800767e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071e6:	4619      	mov	r1, r3
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	2334      	movs	r3, #52	; 0x34
 80071ec:	fb01 f303 	mul.w	r3, r1, r3
 80071f0:	4413      	add	r3, r2
 80071f2:	3391      	adds	r3, #145	; 0x91
 80071f4:	2201      	movs	r2, #1
 80071f6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071fe:	4619      	mov	r1, r3
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	2334      	movs	r3, #52	; 0x34
 8007204:	fb01 f303 	mul.w	r3, r1, r3
 8007208:	4413      	add	r3, r2
 800720a:	3390      	adds	r3, #144	; 0x90
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b08      	cmp	r3, #8
 8007210:	f200 8243 	bhi.w	800769a <USBH_MSC_Process+0x4fa>
 8007214:	a201      	add	r2, pc, #4	; (adr r2, 800721c <USBH_MSC_Process+0x7c>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	08007241 	.word	0x08007241
 8007220:	0800769b 	.word	0x0800769b
 8007224:	08007309 	.word	0x08007309
 8007228:	0800748d 	.word	0x0800748d
 800722c:	08007267 	.word	0x08007267
 8007230:	08007559 	.word	0x08007559
 8007234:	0800769b 	.word	0x0800769b
 8007238:	0800769b 	.word	0x0800769b
 800723c:	0800766d 	.word	0x0800766d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007246:	4619      	mov	r1, r3
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	2334      	movs	r3, #52	; 0x34
 800724c:	fb01 f303 	mul.w	r3, r1, r3
 8007250:	4413      	add	r3, r2
 8007252:	3390      	adds	r3, #144	; 0x90
 8007254:	2204      	movs	r2, #4
 8007256:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007264:	e222      	b.n	80076ac <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800726c:	b2d9      	uxtb	r1, r3
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007274:	461a      	mov	r2, r3
 8007276:	2334      	movs	r3, #52	; 0x34
 8007278:	fb02 f303 	mul.w	r3, r2, r3
 800727c:	3398      	adds	r3, #152	; 0x98
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4413      	add	r3, r2
 8007282:	3307      	adds	r3, #7
 8007284:	461a      	mov	r2, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fd7e 	bl	8007d88 <USBH_MSC_SCSI_Inquiry>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10b      	bne.n	80072ae <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800729c:	4619      	mov	r1, r3
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	2334      	movs	r3, #52	; 0x34
 80072a2:	fb01 f303 	mul.w	r3, r1, r3
 80072a6:	4413      	add	r3, r2
 80072a8:	3390      	adds	r3, #144	; 0x90
 80072aa:	2202      	movs	r2, #2
 80072ac:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d10c      	bne.n	80072ce <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072ba:	4619      	mov	r1, r3
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	2334      	movs	r3, #52	; 0x34
 80072c0:	fb01 f303 	mul.w	r3, r1, r3
 80072c4:	4413      	add	r3, r2
 80072c6:	3390      	adds	r3, #144	; 0x90
 80072c8:	2205      	movs	r2, #5
 80072ca:	701a      	strb	r2, [r3, #0]
            break;
 80072cc:	e1e7      	b.n	800769e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	f040 81e4 	bne.w	800769e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072dc:	4619      	mov	r1, r3
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	2334      	movs	r3, #52	; 0x34
 80072e2:	fb01 f303 	mul.w	r3, r1, r3
 80072e6:	4413      	add	r3, r2
 80072e8:	3390      	adds	r3, #144	; 0x90
 80072ea:	2201      	movs	r2, #1
 80072ec:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072f4:	4619      	mov	r1, r3
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	2334      	movs	r3, #52	; 0x34
 80072fa:	fb01 f303 	mul.w	r3, r1, r3
 80072fe:	4413      	add	r3, r2
 8007300:	3391      	adds	r3, #145	; 0x91
 8007302:	2202      	movs	r2, #2
 8007304:	701a      	strb	r2, [r3, #0]
            break;
 8007306:	e1ca      	b.n	800769e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800730e:	b2db      	uxtb	r3, r3
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fc7a 	bl	8007c0c <USBH_MSC_SCSI_TestUnitReady>
 8007318:	4603      	mov	r3, r0
 800731a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d149      	bne.n	80073b6 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007328:	4619      	mov	r1, r3
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	2334      	movs	r3, #52	; 0x34
 800732e:	fb01 f303 	mul.w	r3, r1, r3
 8007332:	4413      	add	r3, r2
 8007334:	3392      	adds	r3, #146	; 0x92
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00c      	beq.n	8007356 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007342:	4619      	mov	r1, r3
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	2334      	movs	r3, #52	; 0x34
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	4413      	add	r3, r2
 800734e:	33c1      	adds	r3, #193	; 0xc1
 8007350:	2201      	movs	r2, #1
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e00b      	b.n	800736e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800735c:	4619      	mov	r1, r3
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	2334      	movs	r3, #52	; 0x34
 8007362:	fb01 f303 	mul.w	r3, r1, r3
 8007366:	4413      	add	r3, r2
 8007368:	33c1      	adds	r3, #193	; 0xc1
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007374:	4619      	mov	r1, r3
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	2334      	movs	r3, #52	; 0x34
 800737a:	fb01 f303 	mul.w	r3, r1, r3
 800737e:	4413      	add	r3, r2
 8007380:	3390      	adds	r3, #144	; 0x90
 8007382:	2203      	movs	r2, #3
 8007384:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800738c:	4619      	mov	r1, r3
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	2334      	movs	r3, #52	; 0x34
 8007392:	fb01 f303 	mul.w	r3, r1, r3
 8007396:	4413      	add	r3, r2
 8007398:	3391      	adds	r3, #145	; 0x91
 800739a:	2200      	movs	r2, #0
 800739c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073a4:	4619      	mov	r1, r3
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	2334      	movs	r3, #52	; 0x34
 80073aa:	fb01 f303 	mul.w	r3, r1, r3
 80073ae:	4413      	add	r3, r2
 80073b0:	3392      	adds	r3, #146	; 0x92
 80073b2:	2200      	movs	r2, #0
 80073b4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d14a      	bne.n	8007452 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073c2:	4619      	mov	r1, r3
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	2334      	movs	r3, #52	; 0x34
 80073c8:	fb01 f303 	mul.w	r3, r1, r3
 80073cc:	4413      	add	r3, r2
 80073ce:	3392      	adds	r3, #146	; 0x92
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d00c      	beq.n	80073f0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073dc:	4619      	mov	r1, r3
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	2334      	movs	r3, #52	; 0x34
 80073e2:	fb01 f303 	mul.w	r3, r1, r3
 80073e6:	4413      	add	r3, r2
 80073e8:	33c1      	adds	r3, #193	; 0xc1
 80073ea:	2201      	movs	r2, #1
 80073ec:	701a      	strb	r2, [r3, #0]
 80073ee:	e00b      	b.n	8007408 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073f6:	4619      	mov	r1, r3
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	2334      	movs	r3, #52	; 0x34
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	4413      	add	r3, r2
 8007402:	33c1      	adds	r3, #193	; 0xc1
 8007404:	2200      	movs	r2, #0
 8007406:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800740e:	4619      	mov	r1, r3
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	2334      	movs	r3, #52	; 0x34
 8007414:	fb01 f303 	mul.w	r3, r1, r3
 8007418:	4413      	add	r3, r2
 800741a:	3390      	adds	r3, #144	; 0x90
 800741c:	2205      	movs	r2, #5
 800741e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007426:	4619      	mov	r1, r3
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	2334      	movs	r3, #52	; 0x34
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	4413      	add	r3, r2
 8007432:	3391      	adds	r3, #145	; 0x91
 8007434:	2201      	movs	r2, #1
 8007436:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800743e:	4619      	mov	r1, r3
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	2334      	movs	r3, #52	; 0x34
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	4413      	add	r3, r2
 800744a:	3392      	adds	r3, #146	; 0x92
 800744c:	2202      	movs	r2, #2
 800744e:	701a      	strb	r2, [r3, #0]
            break;
 8007450:	e127      	b.n	80076a2 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	2b04      	cmp	r3, #4
 8007456:	f040 8124 	bne.w	80076a2 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007460:	4619      	mov	r1, r3
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	2334      	movs	r3, #52	; 0x34
 8007466:	fb01 f303 	mul.w	r3, r1, r3
 800746a:	4413      	add	r3, r2
 800746c:	3390      	adds	r3, #144	; 0x90
 800746e:	2201      	movs	r2, #1
 8007470:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007478:	4619      	mov	r1, r3
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	2334      	movs	r3, #52	; 0x34
 800747e:	fb01 f303 	mul.w	r3, r1, r3
 8007482:	4413      	add	r3, r2
 8007484:	3391      	adds	r3, #145	; 0x91
 8007486:	2202      	movs	r2, #2
 8007488:	701a      	strb	r2, [r3, #0]
            break;
 800748a:	e10a      	b.n	80076a2 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007492:	b2d9      	uxtb	r1, r3
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800749a:	461a      	mov	r2, r3
 800749c:	2334      	movs	r3, #52	; 0x34
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	3390      	adds	r3, #144	; 0x90
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	4413      	add	r3, r2
 80074a8:	3304      	adds	r3, #4
 80074aa:	461a      	mov	r2, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fbf0 	bl	8007c92 <USBH_MSC_SCSI_ReadCapacity>
 80074b2:	4603      	mov	r3, r0
 80074b4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d120      	bne.n	80074fe <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074c2:	4619      	mov	r1, r3
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	2334      	movs	r3, #52	; 0x34
 80074c8:	fb01 f303 	mul.w	r3, r1, r3
 80074cc:	4413      	add	r3, r2
 80074ce:	3390      	adds	r3, #144	; 0x90
 80074d0:	2201      	movs	r2, #1
 80074d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074da:	4619      	mov	r1, r3
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	2334      	movs	r3, #52	; 0x34
 80074e0:	fb01 f303 	mul.w	r3, r1, r3
 80074e4:	4413      	add	r3, r2
 80074e6:	3391      	adds	r3, #145	; 0x91
 80074e8:	2200      	movs	r2, #0
 80074ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074f2:	3301      	adds	r3, #1
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80074fc:	e0d3      	b.n	80076a6 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d10c      	bne.n	800751e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800750a:	4619      	mov	r1, r3
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	2334      	movs	r3, #52	; 0x34
 8007510:	fb01 f303 	mul.w	r3, r1, r3
 8007514:	4413      	add	r3, r2
 8007516:	3390      	adds	r3, #144	; 0x90
 8007518:	2205      	movs	r2, #5
 800751a:	701a      	strb	r2, [r3, #0]
            break;
 800751c:	e0c3      	b.n	80076a6 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	2b04      	cmp	r3, #4
 8007522:	f040 80c0 	bne.w	80076a6 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800752c:	4619      	mov	r1, r3
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	2334      	movs	r3, #52	; 0x34
 8007532:	fb01 f303 	mul.w	r3, r1, r3
 8007536:	4413      	add	r3, r2
 8007538:	3390      	adds	r3, #144	; 0x90
 800753a:	2201      	movs	r2, #1
 800753c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007544:	4619      	mov	r1, r3
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	2334      	movs	r3, #52	; 0x34
 800754a:	fb01 f303 	mul.w	r3, r1, r3
 800754e:	4413      	add	r3, r2
 8007550:	3391      	adds	r3, #145	; 0x91
 8007552:	2202      	movs	r2, #2
 8007554:	701a      	strb	r2, [r3, #0]
            break;
 8007556:	e0a6      	b.n	80076a6 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800755e:	b2d9      	uxtb	r1, r3
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007566:	461a      	mov	r2, r3
 8007568:	2334      	movs	r3, #52	; 0x34
 800756a:	fb02 f303 	mul.w	r3, r2, r3
 800756e:	3398      	adds	r3, #152	; 0x98
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	4413      	add	r3, r2
 8007574:	3304      	adds	r3, #4
 8007576:	461a      	mov	r2, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fcaa 	bl	8007ed2 <USBH_MSC_SCSI_RequestSense>
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d145      	bne.n	8007614 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800758e:	4619      	mov	r1, r3
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	2334      	movs	r3, #52	; 0x34
 8007594:	fb01 f303 	mul.w	r3, r1, r3
 8007598:	4413      	add	r3, r2
 800759a:	339c      	adds	r3, #156	; 0x9c
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b06      	cmp	r3, #6
 80075a0:	d00c      	beq.n	80075bc <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075a8:	4619      	mov	r1, r3
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	2334      	movs	r3, #52	; 0x34
 80075ae:	fb01 f303 	mul.w	r3, r1, r3
 80075b2:	4413      	add	r3, r2
 80075b4:	339c      	adds	r3, #156	; 0x9c
 80075b6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d117      	bne.n	80075ec <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d80c      	bhi.n	80075ec <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075d8:	4619      	mov	r1, r3
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	2334      	movs	r3, #52	; 0x34
 80075de:	fb01 f303 	mul.w	r3, r1, r3
 80075e2:	4413      	add	r3, r2
 80075e4:	3390      	adds	r3, #144	; 0x90
 80075e6:	2202      	movs	r2, #2
 80075e8:	701a      	strb	r2, [r3, #0]
                  break;
 80075ea:	e05f      	b.n	80076ac <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075f2:	4619      	mov	r1, r3
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	2334      	movs	r3, #52	; 0x34
 80075f8:	fb01 f303 	mul.w	r3, r1, r3
 80075fc:	4413      	add	r3, r2
 80075fe:	3390      	adds	r3, #144	; 0x90
 8007600:	2201      	movs	r2, #1
 8007602:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800760a:	3301      	adds	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	2b02      	cmp	r3, #2
 8007618:	d10c      	bne.n	8007634 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007620:	4619      	mov	r1, r3
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	2334      	movs	r3, #52	; 0x34
 8007626:	fb01 f303 	mul.w	r3, r1, r3
 800762a:	4413      	add	r3, r2
 800762c:	3390      	adds	r3, #144	; 0x90
 800762e:	2208      	movs	r2, #8
 8007630:	701a      	strb	r2, [r3, #0]
            break;
 8007632:	e03a      	b.n	80076aa <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	2b04      	cmp	r3, #4
 8007638:	d137      	bne.n	80076aa <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007640:	4619      	mov	r1, r3
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	2334      	movs	r3, #52	; 0x34
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	4413      	add	r3, r2
 800764c:	3390      	adds	r3, #144	; 0x90
 800764e:	2201      	movs	r2, #1
 8007650:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007658:	4619      	mov	r1, r3
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	2334      	movs	r3, #52	; 0x34
 800765e:	fb01 f303 	mul.w	r3, r1, r3
 8007662:	4413      	add	r3, r2
 8007664:	3391      	adds	r3, #145	; 0x91
 8007666:	2202      	movs	r2, #2
 8007668:	701a      	strb	r2, [r3, #0]
            break;
 800766a:	e01e      	b.n	80076aa <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007672:	3301      	adds	r3, #1
 8007674:	b29a      	uxth	r2, r3
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800767c:	e016      	b.n	80076ac <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	2200      	movs	r2, #0
 8007682:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	2201      	movs	r2, #1
 800768a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8007692:	2102      	movs	r1, #2
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
      break;
 8007698:	e00c      	b.n	80076b4 <USBH_MSC_Process+0x514>
            break;
 800769a:	bf00      	nop
 800769c:	e00a      	b.n	80076b4 <USBH_MSC_Process+0x514>
            break;
 800769e:	bf00      	nop
 80076a0:	e008      	b.n	80076b4 <USBH_MSC_Process+0x514>
            break;
 80076a2:	bf00      	nop
 80076a4:	e006      	b.n	80076b4 <USBH_MSC_Process+0x514>
            break;
 80076a6:	bf00      	nop
 80076a8:	e004      	b.n	80076b4 <USBH_MSC_Process+0x514>
            break;
 80076aa:	bf00      	nop
      break;
 80076ac:	e002      	b.n	80076b4 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]
      break;
 80076b2:	bf00      	nop
  }
  return error;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop

080076c0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2221      	movs	r2, #33	; 0x21
 80076e2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	22ff      	movs	r2, #255	; 0xff
 80076e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80076fc:	2200      	movs	r2, #0
 80076fe:	2100      	movs	r1, #0
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f003 fd14 	bl	800b12e <USBH_CtlReq>
 8007706:	4603      	mov	r3, r0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	22a1      	movs	r2, #161	; 0xa1
 800771e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	22fe      	movs	r2, #254	; 0xfe
 8007724:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007738:	2201      	movs	r2, #1
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f003 fcf6 	bl	800b12e <USBH_CtlReq>
 8007742:	4603      	mov	r3, r0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	4a09      	ldr	r2, [pc, #36]	; (8007788 <USBH_MSC_BOT_Init+0x3c>)
 8007762:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4a09      	ldr	r2, [pc, #36]	; (800778c <USBH_MSC_BOT_Init+0x40>)
 8007768:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	43425355 	.word	0x43425355
 800778c:	20304050 	.word	0x20304050

08007790 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af02      	add	r7, sp, #8
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800779c:	2301      	movs	r3, #1
 800779e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80077a0:	2301      	movs	r3, #1
 80077a2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80077a4:	2301      	movs	r3, #1
 80077a6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077a8:	2300      	movs	r3, #0
 80077aa:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077c0:	3b01      	subs	r3, #1
 80077c2:	2b0a      	cmp	r3, #10
 80077c4:	f200 819e 	bhi.w	8007b04 <USBH_MSC_BOT_Process+0x374>
 80077c8:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <USBH_MSC_BOT_Process+0x40>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	080077fd 	.word	0x080077fd
 80077d4:	08007825 	.word	0x08007825
 80077d8:	0800788f 	.word	0x0800788f
 80077dc:	080078ad 	.word	0x080078ad
 80077e0:	08007931 	.word	0x08007931
 80077e4:	08007953 	.word	0x08007953
 80077e8:	080079eb 	.word	0x080079eb
 80077ec:	08007a07 	.word	0x08007a07
 80077f0:	08007a59 	.word	0x08007a59
 80077f4:	08007a89 	.word	0x08007a89
 80077f8:	08007aeb 	.word	0x08007aeb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	78fa      	ldrb	r2, [r7, #3]
 8007800:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	795b      	ldrb	r3, [r3, #5]
 8007816:	2201      	movs	r2, #1
 8007818:	9200      	str	r2, [sp, #0]
 800781a:	221f      	movs	r2, #31
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f003 fe94 	bl	800b54a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007822:	e17e      	b.n	8007b22 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	795b      	ldrb	r3, [r3, #5]
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f004 fa18 	bl	800bc60 <USBH_LL_GetURBState>
 8007830:	4603      	mov	r3, r0
 8007832:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007834:	7d3b      	ldrb	r3, [r7, #20]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d118      	bne.n	800786c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00f      	beq.n	8007862 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007848:	b25b      	sxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	da04      	bge.n	8007858 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2203      	movs	r2, #3
 8007852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007856:	e157      	b.n	8007b08 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2205      	movs	r2, #5
 800785c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007860:	e152      	b.n	8007b08 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	2207      	movs	r2, #7
 8007866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800786a:	e14d      	b.n	8007b08 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800786c:	7d3b      	ldrb	r3, [r7, #20]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d104      	bne.n	800787c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800787a:	e145      	b.n	8007b08 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800787c:	7d3b      	ldrb	r3, [r7, #20]
 800787e:	2b05      	cmp	r3, #5
 8007880:	f040 8142 	bne.w	8007b08 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	220a      	movs	r2, #10
 8007888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800788c:	e13c      	b.n	8007b08 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	895a      	ldrh	r2, [r3, #10]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	791b      	ldrb	r3, [r3, #4]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f003 fe79 	bl	800b594 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2204      	movs	r2, #4
 80078a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80078aa:	e13a      	b.n	8007b22 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	791b      	ldrb	r3, [r3, #4]
 80078b0:	4619      	mov	r1, r3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f004 f9d4 	bl	800bc60 <USBH_LL_GetURBState>
 80078b8:	4603      	mov	r3, r0
 80078ba:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80078bc:	7d3b      	ldrb	r3, [r7, #20]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d12d      	bne.n	800791e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	8952      	ldrh	r2, [r2, #10]
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d910      	bls.n	80078f0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	8952      	ldrh	r2, [r2, #10]
 80078d8:	441a      	add	r2, r3
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	8952      	ldrh	r2, [r2, #10]
 80078e8:	1a9a      	subs	r2, r3, r2
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80078ee:	e002      	b.n	80078f6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2200      	movs	r2, #0
 80078f4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	895a      	ldrh	r2, [r3, #10]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	791b      	ldrb	r3, [r3, #4]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f003 fe41 	bl	800b594 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8007912:	e0fb      	b.n	8007b0c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	2207      	movs	r2, #7
 8007918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800791c:	e0f6      	b.n	8007b0c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800791e:	7d3b      	ldrb	r3, [r7, #20]
 8007920:	2b05      	cmp	r3, #5
 8007922:	f040 80f3 	bne.w	8007b0c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2209      	movs	r2, #9
 800792a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800792e:	e0ed      	b.n	8007b0c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	891a      	ldrh	r2, [r3, #8]
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	795b      	ldrb	r3, [r3, #5]
 800793e:	2001      	movs	r0, #1
 8007940:	9000      	str	r0, [sp, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f003 fe01 	bl	800b54a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2206      	movs	r2, #6
 800794c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007950:	e0e7      	b.n	8007b22 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	795b      	ldrb	r3, [r3, #5]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f004 f981 	bl	800bc60 <USBH_LL_GetURBState>
 800795e:	4603      	mov	r3, r0
 8007960:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007962:	7d3b      	ldrb	r3, [r7, #20]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d12f      	bne.n	80079c8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	8912      	ldrh	r2, [r2, #8]
 8007970:	4293      	cmp	r3, r2
 8007972:	d910      	bls.n	8007996 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	8912      	ldrh	r2, [r2, #8]
 800797e:	441a      	add	r2, r3
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	8912      	ldrh	r2, [r2, #8]
 800798e:	1a9a      	subs	r2, r3, r2
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	65da      	str	r2, [r3, #92]	; 0x5c
 8007994:	e002      	b.n	800799c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2200      	movs	r2, #0
 800799a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00c      	beq.n	80079be <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	891a      	ldrh	r2, [r3, #8]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	795b      	ldrb	r3, [r3, #5]
 80079b2:	2001      	movs	r0, #1
 80079b4:	9000      	str	r0, [sp, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f003 fdc7 	bl	800b54a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80079bc:	e0a8      	b.n	8007b10 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	2207      	movs	r2, #7
 80079c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80079c6:	e0a3      	b.n	8007b10 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80079c8:	7d3b      	ldrb	r3, [r7, #20]
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d104      	bne.n	80079d8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2205      	movs	r2, #5
 80079d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80079d6:	e09b      	b.n	8007b10 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80079d8:	7d3b      	ldrb	r3, [r7, #20]
 80079da:	2b05      	cmp	r3, #5
 80079dc:	f040 8098 	bne.w	8007b10 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	220a      	movs	r2, #10
 80079e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80079e8:	e092      	b.n	8007b10 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	791b      	ldrb	r3, [r3, #4]
 80079f4:	220d      	movs	r2, #13
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f003 fdcc 	bl	800b594 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	2208      	movs	r2, #8
 8007a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a04:	e08d      	b.n	8007b22 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	791b      	ldrb	r3, [r3, #4]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f004 f927 	bl	800bc60 <USBH_LL_GetURBState>
 8007a12:	4603      	mov	r3, r0
 8007a14:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007a16:	7d3b      	ldrb	r3, [r7, #20]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d115      	bne.n	8007a48 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f8a9 	bl	8007b84 <USBH_MSC_DecodeCSW>
 8007a32:	4603      	mov	r3, r0
 8007a34:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007a36:	7d7b      	ldrb	r3, [r7, #21]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d102      	bne.n	8007a42 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8007a40:	e068      	b.n	8007b14 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8007a42:	2302      	movs	r3, #2
 8007a44:	75fb      	strb	r3, [r7, #23]
      break;
 8007a46:	e065      	b.n	8007b14 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8007a48:	7d3b      	ldrb	r3, [r7, #20]
 8007a4a:	2b05      	cmp	r3, #5
 8007a4c:	d162      	bne.n	8007b14 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2209      	movs	r2, #9
 8007a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a56:	e05d      	b.n	8007b14 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007a58:	78fb      	ldrb	r3, [r7, #3]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f864 	bl	8007b2c <USBH_MSC_BOT_Abort>
 8007a64:	4603      	mov	r3, r0
 8007a66:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007a68:	7dbb      	ldrb	r3, [r7, #22]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d104      	bne.n	8007a78 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2207      	movs	r2, #7
 8007a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007a76:	e04f      	b.n	8007b18 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007a78:	7dbb      	ldrb	r3, [r7, #22]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d14c      	bne.n	8007b18 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	220b      	movs	r2, #11
 8007a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a86:	e047      	b.n	8007b18 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007a88:	78fb      	ldrb	r3, [r7, #3]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f84c 	bl	8007b2c <USBH_MSC_BOT_Abort>
 8007a94:	4603      	mov	r3, r0
 8007a96:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007a98:	7dbb      	ldrb	r3, [r7, #22]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d11d      	bne.n	8007ada <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	795b      	ldrb	r3, [r3, #5]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f004 f92c 	bl	800bd02 <USBH_LL_GetToggle>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	7959      	ldrb	r1, [r3, #5]
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	f1c3 0301 	rsb	r3, r3, #1
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f004 f8f0 	bl	800bca2 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	791b      	ldrb	r3, [r3, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f004 f8e9 	bl	800bca2 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	2209      	movs	r2, #9
 8007ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007ad8:	e020      	b.n	8007b1c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8007ada:	7dbb      	ldrb	r3, [r7, #22]
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	d11d      	bne.n	8007b1c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	220b      	movs	r2, #11
 8007ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ae8:	e018      	b.n	8007b1c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff fdf3 	bl	80076d6 <USBH_MSC_BOT_REQ_Reset>
 8007af0:	4603      	mov	r3, r0
 8007af2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d112      	bne.n	8007b20 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8007b02:	e00d      	b.n	8007b20 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8007b04:	bf00      	nop
 8007b06:	e00c      	b.n	8007b22 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b08:	bf00      	nop
 8007b0a:	e00a      	b.n	8007b22 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b0c:	bf00      	nop
 8007b0e:	e008      	b.n	8007b22 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b10:	bf00      	nop
 8007b12:	e006      	b.n	8007b22 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b14:	bf00      	nop
 8007b16:	e004      	b.n	8007b22 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b18:	bf00      	nop
 8007b1a:	e002      	b.n	8007b22 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b1c:	bf00      	nop
 8007b1e:	e000      	b.n	8007b22 <USBH_MSC_BOT_Process+0x392>
      break;
 8007b20:	bf00      	nop
  }
  return status;
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8007b4a:	78bb      	ldrb	r3, [r7, #2]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <USBH_MSC_BOT_Abort+0x2a>
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d009      	beq.n	8007b68 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8007b54:	e011      	b.n	8007b7a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	79db      	ldrb	r3, [r3, #7]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f003 f819 	bl	800ab94 <USBH_ClrFeature>
 8007b62:	4603      	mov	r3, r0
 8007b64:	73fb      	strb	r3, [r7, #15]
      break;
 8007b66:	e008      	b.n	8007b7a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	799b      	ldrb	r3, [r3, #6]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f003 f810 	bl	800ab94 <USBH_ClrFeature>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73fb      	strb	r3, [r7, #15]
      break;
 8007b78:	bf00      	nop
  }
  return status;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8007b96:	2301      	movs	r3, #1
 8007b98:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	791b      	ldrb	r3, [r3, #4]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f003 ffcb 	bl	800bb3c <USBH_LL_GetLastXferSize>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b0d      	cmp	r3, #13
 8007baa:	d002      	beq.n	8007bb2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8007bac:	2302      	movs	r3, #2
 8007bae:	73fb      	strb	r3, [r7, #15]
 8007bb0:	e024      	b.n	8007bfc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bb6:	4a14      	ldr	r2, [pc, #80]	; (8007c08 <USBH_MSC_DecodeCSW+0x84>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d11d      	bne.n	8007bf8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d119      	bne.n	8007bfc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d102      	bne.n	8007bd8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	73fb      	strb	r3, [r7, #15]
 8007bd6:	e011      	b.n	8007bfc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d102      	bne.n	8007be8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007be2:	2301      	movs	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]
 8007be6:	e009      	b.n	8007bfc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d104      	bne.n	8007bfc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	73fb      	strb	r3, [r7, #15]
 8007bf6:	e001      	b.n	8007bfc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	53425355 	.word	0x53425355

08007c0c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d002      	beq.n	8007c36 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d021      	beq.n	8007c78 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007c34:	e028      	b.n	8007c88 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	220a      	movs	r2, #10
 8007c48:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	3363      	adds	r3, #99	; 0x63
 8007c50:	2210      	movs	r2, #16
 8007c52:	2100      	movs	r1, #0
 8007c54:	4618      	mov	r0, r3
 8007c56:	f004 f903 	bl	800be60 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8007c72:	2301      	movs	r3, #1
 8007c74:	73fb      	strb	r3, [r7, #15]
      break;
 8007c76:	e007      	b.n	8007c88 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff fd87 	bl	8007790 <USBH_MSC_BOT_Process>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73fb      	strb	r3, [r7, #15]
      break;
 8007c86:	bf00      	nop
  }

  return error;
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b086      	sub	sp, #24
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	607a      	str	r2, [r7, #4]
 8007c9e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d002      	beq.n	8007cbe <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d027      	beq.n	8007d0c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8007cbc:	e05f      	b.n	8007d7e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	2280      	movs	r2, #128	; 0x80
 8007cc8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	220a      	movs	r2, #10
 8007cd0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	3363      	adds	r3, #99	; 0x63
 8007cd8:	2210      	movs	r2, #16
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f004 f8bf 	bl	800be60 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2225      	movs	r2, #37	; 0x25
 8007ce6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f103 0210 	add.w	r2, r3, #16
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007d06:	2301      	movs	r3, #1
 8007d08:	75fb      	strb	r3, [r7, #23]
      break;
 8007d0a:	e038      	b.n	8007d7e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007d0c:	7afb      	ldrb	r3, [r7, #11]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff fd3d 	bl	8007790 <USBH_MSC_BOT_Process>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d12d      	bne.n	8007d7c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d26:	3303      	adds	r3, #3
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d32:	3302      	adds	r3, #2
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d40:	3301      	adds	r3, #1
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007d46:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	061b      	lsls	r3, r3, #24
 8007d52:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d5e:	3307      	adds	r3, #7
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d6a:	3306      	adds	r3, #6
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	4313      	orrs	r3, r2
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	809a      	strh	r2, [r3, #4]
      break;
 8007d7c:	bf00      	nop
  }

  return error;
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	460b      	mov	r3, r1
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007d96:	2302      	movs	r3, #2
 8007d98:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d002      	beq.n	8007db4 <USBH_MSC_SCSI_Inquiry+0x2c>
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d03d      	beq.n	8007e2e <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8007db2:	e089      	b.n	8007ec8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	2224      	movs	r2, #36	; 0x24
 8007db8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	2280      	movs	r2, #128	; 0x80
 8007dbe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	3363      	adds	r3, #99	; 0x63
 8007dce:	220a      	movs	r2, #10
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f004 f844 	bl	800be60 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	2212      	movs	r2, #18
 8007ddc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007de0:	7afb      	ldrb	r3, [r7, #11]
 8007de2:	015b      	lsls	r3, r3, #5
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2224      	movs	r2, #36	; 0x24
 8007e00:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f103 0210 	add.w	r2, r3, #16
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e2c:	e04c      	b.n	8007ec8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007e2e:	7afb      	ldrb	r3, [r7, #11]
 8007e30:	4619      	mov	r1, r3
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7ff fcac 	bl	8007790 <USBH_MSC_BOT_Process>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d141      	bne.n	8007ec6 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007e42:	2222      	movs	r2, #34	; 0x22
 8007e44:	2100      	movs	r1, #0
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f004 f80a 	bl	800be60 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	f003 031f 	and.w	r3, r3, #31
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	095b      	lsrs	r3, r3, #5
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e74:	3301      	adds	r3, #1
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	b25b      	sxtb	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	da03      	bge.n	8007e86 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	709a      	strb	r2, [r3, #2]
 8007e84:	e002      	b.n	8007e8c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	1cd8      	adds	r0, r3, #3
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e96:	3308      	adds	r3, #8
 8007e98:	2208      	movs	r2, #8
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	f003 ffd2 	bl	800be44 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f103 000c 	add.w	r0, r3, #12
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eac:	3310      	adds	r3, #16
 8007eae:	2210      	movs	r2, #16
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	f003 ffc7 	bl	800be44 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	331d      	adds	r3, #29
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007ec0:	3220      	adds	r2, #32
 8007ec2:	6812      	ldr	r2, [r2, #0]
 8007ec4:	601a      	str	r2, [r3, #0]
      break;
 8007ec6:	bf00      	nop
  }

  return error;
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b086      	sub	sp, #24
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	460b      	mov	r3, r1
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d002      	beq.n	8007efe <USBH_MSC_SCSI_RequestSense+0x2c>
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d03d      	beq.n	8007f78 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8007efc:	e05d      	b.n	8007fba <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	220e      	movs	r2, #14
 8007f02:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	2280      	movs	r2, #128	; 0x80
 8007f08:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	220a      	movs	r2, #10
 8007f10:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	3363      	adds	r3, #99	; 0x63
 8007f18:	2210      	movs	r2, #16
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f003 ff9f 	bl	800be60 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2203      	movs	r2, #3
 8007f26:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007f2a:	7afb      	ldrb	r3, [r7, #11]
 8007f2c:	015b      	lsls	r3, r3, #5
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	220e      	movs	r2, #14
 8007f4a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2202      	movs	r2, #2
 8007f62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f103 0210 	add.w	r2, r3, #16
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007f72:	2301      	movs	r3, #1
 8007f74:	75fb      	strb	r3, [r7, #23]
      break;
 8007f76:	e020      	b.n	8007fba <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007f78:	7afb      	ldrb	r3, [r7, #11]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f7ff fc07 	bl	8007790 <USBH_MSC_BOT_Process>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d115      	bne.n	8007fb8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f92:	3302      	adds	r3, #2
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa6:	7b1a      	ldrb	r2, [r3, #12]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb2:	7b5a      	ldrb	r2, [r3, #13]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	709a      	strb	r2, [r3, #2]
      break;
 8007fb8:	bf00      	nop
  }

  return error;
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBH_MTP_InterfaceInit>:
  *         The function init the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007fc4:	b590      	push	{r4, r7, lr}
 8007fc6:	b089      	sub	sp, #36	; 0x24
 8007fc8:	af04      	add	r7, sp, #16
 8007fca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface, endpoint;
  MTP_HandleTypeDef *MTP_Handle;

  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 8007fcc:	2301      	movs	r3, #1
 8007fce:	2201      	movs	r2, #1
 8007fd0:	2106      	movs	r1, #6
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 ffb5 	bl	8009f42 <USBH_FindInterface>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	2bff      	cmp	r3, #255	; 0xff
 8007fe0:	d002      	beq.n	8007fe8 <USBH_MTP_InterfaceInit+0x24>
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
 8007fe4:	2b09      	cmp	r3, #9
 8007fe6:	d901      	bls.n	8007fec <USBH_MTP_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Still Image Class.");
    return USBH_FAIL;
 8007fe8:	2302      	movs	r3, #2
 8007fea:	e18e      	b.n	800830a <USBH_MTP_InterfaceInit+0x346>
  }

  (void)USBH_SelectInterface(phost, interface);
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 ff8a 	bl	8009f0a <USBH_SelectInterface>

  status = USBH_SelectInterface(phost, interface);
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 ff85 	bl	8009f0a <USBH_SelectInterface>
 8008000:	4603      	mov	r3, r0
 8008002:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <USBH_MTP_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 800800a:	2302      	movs	r3, #2
 800800c:	e17d      	b.n	800830a <USBH_MTP_InterfaceInit+0x346>
  }

  endpoint = MTP_FindCtlEndpoint(phost);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f97f 	bl	8008312 <MTP_FindCtlEndpoint>
 8008014:	4603      	mov	r3, r0
 8008016:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8008018:	7b7b      	ldrb	r3, [r7, #13]
 800801a:	2bff      	cmp	r3, #255	; 0xff
 800801c:	d002      	beq.n	8008024 <USBH_MTP_InterfaceInit+0x60>
 800801e:	7b7b      	ldrb	r3, [r7, #13]
 8008020:	2b04      	cmp	r3, #4
 8008022:	d901      	bls.n	8008028 <USBH_MTP_InterfaceInit+0x64>
  {
    USBH_DbgLog("Invalid Control endpoint number");
    return USBH_FAIL;
 8008024:	2302      	movs	r3, #2
 8008026:	e170      	b.n	800830a <USBH_MTP_InterfaceInit+0x346>
  }

  phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc(sizeof(MTP_HandleTypeDef));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 454c 	ldr.w	r4, [r3, #1356]	; 0x54c
 800802e:	f242 10d0 	movw	r0, #8656	; 0x21d0
 8008032:	f003 fef7 	bl	800be24 <malloc>
 8008036:	4603      	mov	r3, r0
 8008038:	61e3      	str	r3, [r4, #28]
  MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	60bb      	str	r3, [r7, #8]

  if (MTP_Handle == NULL)
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <USBH_MTP_InterfaceInit+0x8a>
  {
    USBH_DbgLog("Cannot allocate memory for MTP Handle");
    return USBH_FAIL;
 800804a:	2302      	movs	r3, #2
 800804c:	e15d      	b.n	800830a <USBH_MTP_InterfaceInit+0x346>
  }

  /* Initialize mtp handler */
  (void)USBH_memset(MTP_Handle, 0, sizeof(MTP_HandleTypeDef));
 800804e:	f242 12d0 	movw	r2, #8656	; 0x21d0
 8008052:	2100      	movs	r1, #0
 8008054:	68b8      	ldr	r0, [r7, #8]
 8008056:	f003 ff03 	bl	800be60 <memset>

  /*Collect the control endpoint address and length*/
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	7b79      	ldrb	r1, [r7, #13]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	3101      	adds	r1, #1
 8008062:	00c9      	lsls	r1, r1, #3
 8008064:	2032      	movs	r0, #50	; 0x32
 8008066:	fb00 f303 	mul.w	r3, r0, r3
 800806a:	440b      	add	r3, r1
 800806c:	4413      	add	r3, r2
 800806e:	f203 3346 	addw	r3, r3, #838	; 0x346
 8008072:	781a      	ldrb	r2, [r3, #0]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807a:	f883 2d31 	strb.w	r2, [r3, #3377]	; 0xd31
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	7b79      	ldrb	r1, [r7, #13]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	3101      	adds	r1, #1
 8008086:	00c9      	lsls	r1, r1, #3
 8008088:	2032      	movs	r0, #50	; 0x32
 800808a:	fb00 f303 	mul.w	r3, r0, r3
 800808e:	440b      	add	r3, r1
 8008090:	4413      	add	r3, r2
 8008092:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8008096:	881a      	ldrh	r2, [r3, #0]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800809e:	f8a3 2d36 	strh.w	r2, [r3, #3382]	; 0xd36
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a8:	f893 3d31 	ldrb.w	r3, [r3, #3377]	; 0xd31
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f003 faf7 	bl	800b6a2 <USBH_AllocPipe>
 80080b4:	4603      	mov	r3, r0
 80080b6:	461a      	mov	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080be:	f883 2d2e 	strb.w	r2, [r3, #3374]	; 0xd2e
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	7b79      	ldrb	r1, [r7, #13]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	3101      	adds	r1, #1
 80080ca:	00c9      	lsls	r1, r1, #3
 80080cc:	2032      	movs	r0, #50	; 0x32
 80080ce:	fb00 f303 	mul.w	r3, r0, r3
 80080d2:	440b      	add	r3, r1
 80080d4:	4413      	add	r3, r2
 80080d6:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e4:	f8a3 2d44 	strh.w	r2, [r3, #3396]	; 0xd44

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, MTP_Handle->NotificationPipe, MTP_Handle->NotificationEp,
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ee:	f893 1d2e 	ldrb.w	r1, [r3, #3374]	; 0xd2e
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f8:	f893 0d31 	ldrb.w	r0, [r3, #3377]	; 0xd31
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800810e:	f8b2 2d36 	ldrh.w	r2, [r2, #3382]	; 0xd36
 8008112:	9202      	str	r2, [sp, #8]
 8008114:	2203      	movs	r2, #3
 8008116:	9201      	str	r2, [sp, #4]
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	4623      	mov	r3, r4
 800811c:	4602      	mov	r2, r0
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f003 fa90 	bl	800b644 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      MTP_Handle->NotificationEpSize);

  (void)USBH_LL_SetToggle(phost, MTP_Handle->NotificationPipe, 0U);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800812a:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800812e:	2200      	movs	r2, #0
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f003 fdb5 	bl	800bca2 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataInEndpoint(phost);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f99e 	bl	800847a <MTP_FindDataInEndpoint>
 800813e:	4603      	mov	r3, r0
 8008140:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8008142:	7b7b      	ldrb	r3, [r7, #13]
 8008144:	2bff      	cmp	r3, #255	; 0xff
 8008146:	d002      	beq.n	800814e <USBH_MTP_InterfaceInit+0x18a>
 8008148:	7b7b      	ldrb	r3, [r7, #13]
 800814a:	2b04      	cmp	r3, #4
 800814c:	d901      	bls.n	8008152 <USBH_MTP_InterfaceInit+0x18e>
  {
    USBH_DbgLog("Invalid Data IN endpoint number");
    return USBH_FAIL;
 800814e:	2302      	movs	r3, #2
 8008150:	e0db      	b.n	800830a <USBH_MTP_InterfaceInit+0x346>
  }

  /*Collect the control endpoint address and length*/
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	7b79      	ldrb	r1, [r7, #13]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	3101      	adds	r1, #1
 800815a:	00c9      	lsls	r1, r1, #3
 800815c:	2032      	movs	r0, #50	; 0x32
 800815e:	fb00 f303 	mul.w	r3, r0, r3
 8008162:	440b      	add	r3, r1
 8008164:	4413      	add	r3, r2
 8008166:	f203 3346 	addw	r3, r3, #838	; 0x346
 800816a:	781a      	ldrb	r2, [r3, #0]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008172:	f883 2d30 	strb.w	r2, [r3, #3376]	; 0xd30
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	7b79      	ldrb	r1, [r7, #13]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	3101      	adds	r1, #1
 800817e:	00c9      	lsls	r1, r1, #3
 8008180:	2032      	movs	r0, #50	; 0x32
 8008182:	fb00 f303 	mul.w	r3, r0, r3
 8008186:	440b      	add	r3, r1
 8008188:	4413      	add	r3, r2
 800818a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800818e:	881a      	ldrh	r2, [r3, #0]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008196:	f8a3 2d34 	strh.w	r2, [r3, #3380]	; 0xd34
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a0:	f893 3d30 	ldrb.w	r3, [r3, #3376]	; 0xd30
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f003 fa7b 	bl	800b6a2 <USBH_AllocPipe>
 80081ac:	4603      	mov	r3, r0
 80081ae:	461a      	mov	r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b6:	f883 2d2c 	strb.w	r2, [r3, #3372]	; 0xd2c

  /* Open pipe for DATA IN endpoint */
  (void)USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c0:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	; 0xd2c
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ca:	f893 0d30 	ldrb.w	r0, [r3, #3376]	; 0xd30
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081e0:	f8b2 2d34 	ldrh.w	r2, [r2, #3380]	; 0xd34
 80081e4:	9202      	str	r2, [sp, #8]
 80081e6:	2202      	movs	r2, #2
 80081e8:	9201      	str	r2, [sp, #4]
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	4623      	mov	r3, r4
 80081ee:	4602      	mov	r2, r0
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f003 fa27 	bl	800b644 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      MTP_Handle->DataInEpSize);

  (void)USBH_LL_SetToggle(phost, MTP_Handle->DataInPipe, 0U);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081fc:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 8008200:	2200      	movs	r2, #0
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f003 fd4c 	bl	800bca2 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataOutEndpoint(phost);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f8db 	bl	80083c6 <MTP_FindDataOutEndpoint>
 8008210:	4603      	mov	r3, r0
 8008212:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8008214:	7b7b      	ldrb	r3, [r7, #13]
 8008216:	2bff      	cmp	r3, #255	; 0xff
 8008218:	d002      	beq.n	8008220 <USBH_MTP_InterfaceInit+0x25c>
 800821a:	7b7b      	ldrb	r3, [r7, #13]
 800821c:	2b04      	cmp	r3, #4
 800821e:	d901      	bls.n	8008224 <USBH_MTP_InterfaceInit+0x260>
  {
    USBH_DbgLog("Invalid Data OUT endpoint number");
    return USBH_FAIL;
 8008220:	2302      	movs	r3, #2
 8008222:	e072      	b.n	800830a <USBH_MTP_InterfaceInit+0x346>
  }

  /*Collect the DATA OUT endpoint address and length*/
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	7b79      	ldrb	r1, [r7, #13]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	3101      	adds	r1, #1
 800822c:	00c9      	lsls	r1, r1, #3
 800822e:	2032      	movs	r0, #50	; 0x32
 8008230:	fb00 f303 	mul.w	r3, r0, r3
 8008234:	440b      	add	r3, r1
 8008236:	4413      	add	r3, r2
 8008238:	f203 3346 	addw	r3, r3, #838	; 0x346
 800823c:	781a      	ldrb	r2, [r3, #0]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008244:	f883 2d2f 	strb.w	r2, [r3, #3375]	; 0xd2f
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	7b79      	ldrb	r1, [r7, #13]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	3101      	adds	r1, #1
 8008250:	00c9      	lsls	r1, r1, #3
 8008252:	2032      	movs	r0, #50	; 0x32
 8008254:	fb00 f303 	mul.w	r3, r0, r3
 8008258:	440b      	add	r3, r1
 800825a:	4413      	add	r3, r2
 800825c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8008260:	881a      	ldrh	r2, [r3, #0]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008268:	f8a3 2d32 	strh.w	r2, [r3, #3378]	; 0xd32
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008272:	f893 3d2f 	ldrb.w	r3, [r3, #3375]	; 0xd2f
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f003 fa12 	bl	800b6a2 <USBH_AllocPipe>
 800827e:	4603      	mov	r3, r0
 8008280:	461a      	mov	r2, r3
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008288:	f883 2d2d 	strb.w	r2, [r3, #3373]	; 0xd2d

  /* Open pipe for DATA OUT endpoint */
  (void)USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008292:	f893 1d2d 	ldrb.w	r1, [r3, #3373]	; 0xd2d
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829c:	f893 0d2f 	ldrb.w	r0, [r3, #3375]	; 0xd2f
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082b2:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 80082b6:	9202      	str	r2, [sp, #8]
 80082b8:	2202      	movs	r2, #2
 80082ba:	9201      	str	r2, [sp, #4]
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	4623      	mov	r3, r4
 80082c0:	4602      	mov	r2, r0
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f003 f9be 	bl	800b644 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      MTP_Handle->DataOutEpSize);

  (void)USBH_LL_SetToggle(phost, MTP_Handle->DataOutPipe, 0U);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ce:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 80082d2:	2200      	movs	r2, #0
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f003 fce3 	bl	800bca2 <USBH_LL_SetToggle>

  MTP_Handle->state = MTP_OPENSESSION;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e2:	2202      	movs	r2, #2
 80082e4:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
  MTP_Handle->is_ready = 0U;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80082ee:	461a      	mov	r2, r3
 80082f0:	2300      	movs	r3, #0
 80082f2:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2d3c 	strb.w	r2, [r3, #3388]	; 0xd3c

  return USBH_PTP_Init(phost);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fb54 	bl	80089b0 <USBH_PTP_Init>
 8008308:	4603      	mov	r3, r0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	bd90      	pop	{r4, r7, pc}

08008312 <MTP_FindCtlEndpoint>:
  * @brief  Find MTP Ctl interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindCtlEndpoint(USBH_HandleTypeDef *phost)
{
 8008312:	b480      	push	{r7}
 8008314:	b085      	sub	sp, #20
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800831a:	2300      	movs	r3, #0
 800831c:	73fb      	strb	r3, [r7, #15]
 800831e:	e048      	b.n	80083b2 <MTP_FindCtlEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	2132      	movs	r1, #50	; 0x32
 8008326:	fb01 f303 	mul.w	r3, r1, r3
 800832a:	4413      	add	r3, r2
 800832c:	f203 3347 	addw	r3, r3, #839	; 0x347
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b06      	cmp	r3, #6
 8008334:	d13a      	bne.n	80083ac <MTP_FindCtlEndpoint+0x9a>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8008336:	2300      	movs	r3, #0
 8008338:	73bb      	strb	r3, [r7, #14]
 800833a:	e034      	b.n	80083a6 <MTP_FindCtlEndpoint+0x94>
      {
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 800833c:	7bfb      	ldrb	r3, [r7, #15]
 800833e:	7bb9      	ldrb	r1, [r7, #14]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	3101      	adds	r1, #1
 8008344:	00c9      	lsls	r1, r1, #3
 8008346:	2032      	movs	r0, #50	; 0x32
 8008348:	fb00 f303 	mul.w	r3, r0, r3
 800834c:	440b      	add	r3, r1
 800834e:	4413      	add	r3, r2
 8008350:	f203 3346 	addw	r3, r3, #838	; 0x346
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	b25b      	sxtb	r3, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	da21      	bge.n	80083a0 <MTP_FindCtlEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	7bb9      	ldrb	r1, [r7, #14]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	3101      	adds	r1, #1
 8008364:	00c9      	lsls	r1, r1, #3
 8008366:	2032      	movs	r0, #50	; 0x32
 8008368:	fb00 f303 	mul.w	r3, r0, r3
 800836c:	440b      	add	r3, r1
 800836e:	4413      	add	r3, r2
 8008370:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8008374:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 8008376:	2b00      	cmp	r3, #0
 8008378:	d012      	beq.n	80083a0 <MTP_FindCtlEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_INTERRUPT) == USBH_EP_INTERRUPT))
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	7bb9      	ldrb	r1, [r7, #14]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	3101      	adds	r1, #1
 8008382:	00c9      	lsls	r1, r1, #3
 8008384:	2032      	movs	r0, #50	; 0x32
 8008386:	fb00 f303 	mul.w	r3, r0, r3
 800838a:	440b      	add	r3, r1
 800838c:	4413      	add	r3, r2
 800838e:	f203 3347 	addw	r3, r3, #839	; 0x347
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	f003 0303 	and.w	r3, r3, #3
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8008398:	2b03      	cmp	r3, #3
 800839a:	d101      	bne.n	80083a0 <MTP_FindCtlEndpoint+0x8e>
        {
          return endpoint;
 800839c:	7bbb      	ldrb	r3, [r7, #14]
 800839e:	e00c      	b.n	80083ba <MTP_FindCtlEndpoint+0xa8>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	3301      	adds	r3, #1
 80083a4:	73bb      	strb	r3, [r7, #14]
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d9c7      	bls.n	800833c <MTP_FindCtlEndpoint+0x2a>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	3301      	adds	r3, #1
 80083b0:	73fb      	strb	r3, [r7, #15]
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	2b09      	cmp	r3, #9
 80083b6:	d9b3      	bls.n	8008320 <MTP_FindCtlEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 80083b8:	23ff      	movs	r3, #255	; 0xff
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <MTP_FindDataOutEndpoint>:
  * @brief  Find MTP DATA OUT interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataOutEndpoint(USBH_HandleTypeDef *phost)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b085      	sub	sp, #20
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
 80083d2:	e048      	b.n	8008466 <MTP_FindDataOutEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	2132      	movs	r1, #50	; 0x32
 80083da:	fb01 f303 	mul.w	r3, r1, r3
 80083de:	4413      	add	r3, r2
 80083e0:	f203 3347 	addw	r3, r3, #839	; 0x347
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b06      	cmp	r3, #6
 80083e8:	d13a      	bne.n	8008460 <MTP_FindDataOutEndpoint+0x9a>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 80083ea:	2300      	movs	r3, #0
 80083ec:	73bb      	strb	r3, [r7, #14]
 80083ee:	e034      	b.n	800845a <MTP_FindDataOutEndpoint+0x94>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	7bb9      	ldrb	r1, [r7, #14]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	3101      	adds	r1, #1
 80083f8:	00c9      	lsls	r1, r1, #3
 80083fa:	2032      	movs	r0, #50	; 0x32
 80083fc:	fb00 f303 	mul.w	r3, r0, r3
 8008400:	440b      	add	r3, r1
 8008402:	4413      	add	r3, r2
 8008404:	f203 3346 	addw	r3, r3, #838	; 0x346
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	b25b      	sxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	db21      	blt.n	8008454 <MTP_FindDataOutEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	7bb9      	ldrb	r1, [r7, #14]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	3101      	adds	r1, #1
 8008418:	00c9      	lsls	r1, r1, #3
 800841a:	2032      	movs	r0, #50	; 0x32
 800841c:	fb00 f303 	mul.w	r3, r0, r3
 8008420:	440b      	add	r3, r1
 8008422:	4413      	add	r3, r2
 8008424:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8008428:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 800842a:	2b00      	cmp	r3, #0
 800842c:	d012      	beq.n	8008454 <MTP_FindDataOutEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	7bb9      	ldrb	r1, [r7, #14]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	3101      	adds	r1, #1
 8008436:	00c9      	lsls	r1, r1, #3
 8008438:	2032      	movs	r0, #50	; 0x32
 800843a:	fb00 f303 	mul.w	r3, r0, r3
 800843e:	440b      	add	r3, r1
 8008440:	4413      	add	r3, r2
 8008442:	f203 3347 	addw	r3, r3, #839	; 0x347
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <MTP_FindDataOutEndpoint+0x8e>
        {
          return endpoint;
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	e00c      	b.n	800846e <MTP_FindDataOutEndpoint+0xa8>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 8008454:	7bbb      	ldrb	r3, [r7, #14]
 8008456:	3301      	adds	r3, #1
 8008458:	73bb      	strb	r3, [r7, #14]
 800845a:	7bbb      	ldrb	r3, [r7, #14]
 800845c:	2b04      	cmp	r3, #4
 800845e:	d9c7      	bls.n	80083f0 <MTP_FindDataOutEndpoint+0x2a>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 8008460:	7bfb      	ldrb	r3, [r7, #15]
 8008462:	3301      	adds	r3, #1
 8008464:	73fb      	strb	r3, [r7, #15]
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	2b09      	cmp	r3, #9
 800846a:	d9b3      	bls.n	80083d4 <MTP_FindDataOutEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 800846c:	23ff      	movs	r3, #255	; 0xff
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <MTP_FindDataInEndpoint>:
  * @brief  Find MTP DATA IN interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataInEndpoint(USBH_HandleTypeDef *phost)
{
 800847a:	b480      	push	{r7}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]
 8008486:	e048      	b.n	800851a <MTP_FindDataInEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	2132      	movs	r1, #50	; 0x32
 800848e:	fb01 f303 	mul.w	r3, r1, r3
 8008492:	4413      	add	r3, r2
 8008494:	f203 3347 	addw	r3, r3, #839	; 0x347
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b06      	cmp	r3, #6
 800849c:	d13a      	bne.n	8008514 <MTP_FindDataInEndpoint+0x9a>
    {
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800849e:	2300      	movs	r3, #0
 80084a0:	73bb      	strb	r3, [r7, #14]
 80084a2:	e034      	b.n	800850e <MTP_FindDataInEndpoint+0x94>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	7bb9      	ldrb	r1, [r7, #14]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	3101      	adds	r1, #1
 80084ac:	00c9      	lsls	r1, r1, #3
 80084ae:	2032      	movs	r0, #50	; 0x32
 80084b0:	fb00 f303 	mul.w	r3, r0, r3
 80084b4:	440b      	add	r3, r1
 80084b6:	4413      	add	r3, r2
 80084b8:	f203 3346 	addw	r3, r3, #838	; 0x346
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	b25b      	sxtb	r3, r3
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	da21      	bge.n	8008508 <MTP_FindDataInEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
 80084c6:	7bb9      	ldrb	r1, [r7, #14]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	3101      	adds	r1, #1
 80084cc:	00c9      	lsls	r1, r1, #3
 80084ce:	2032      	movs	r0, #50	; 0x32
 80084d0:	fb00 f303 	mul.w	r3, r0, r3
 80084d4:	440b      	add	r3, r1
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80084dc:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d012      	beq.n	8008508 <MTP_FindDataInEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	7bb9      	ldrb	r1, [r7, #14]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	3101      	adds	r1, #1
 80084ea:	00c9      	lsls	r1, r1, #3
 80084ec:	2032      	movs	r0, #50	; 0x32
 80084ee:	fb00 f303 	mul.w	r3, r0, r3
 80084f2:	440b      	add	r3, r1
 80084f4:	4413      	add	r3, r2
 80084f6:	f203 3347 	addw	r3, r3, #839	; 0x347
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <MTP_FindDataInEndpoint+0x8e>
        {
          return endpoint;
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	e00c      	b.n	8008522 <MTP_FindDataInEndpoint+0xa8>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	3301      	adds	r3, #1
 800850c:	73bb      	strb	r3, [r7, #14]
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	2b04      	cmp	r3, #4
 8008512:	d9c7      	bls.n	80084a4 <MTP_FindDataInEndpoint+0x2a>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	3301      	adds	r3, #1
 8008518:	73fb      	strb	r3, [r7, #15]
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	2b09      	cmp	r3, #9
 800851e:	d9b3      	bls.n	8008488 <MTP_FindDataInEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8008520:	23ff      	movs	r3, #255	; 0xff
}
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USBH_MTP_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	60fb      	str	r3, [r7, #12]

  if (MTP_Handle->DataOutPipe != 0U)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008546:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800854a:	2b00      	cmp	r3, #0
 800854c:	d017      	beq.n	800857e <USBH_MTP_InterfaceDeInit+0x50>
  {
    (void)USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008554:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f003 f891 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->DataOutPipe);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008566:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f003 f8ba 	bl	800b6e6 <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0U;     /* Reset the Channel as Free */
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2d2d 	strb.w	r2, [r3, #3373]	; 0xd2d
  }

  if (MTP_Handle->DataInPipe != 0U)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008584:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 8008588:	2b00      	cmp	r3, #0
 800858a:	d017      	beq.n	80085bc <USBH_MTP_InterfaceDeInit+0x8e>
  {
    (void)USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008592:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f003 f872 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->DataInPipe);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085a4:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f003 f89b 	bl	800b6e6 <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0U;     /* Reset the Channel as Free */
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2d2c 	strb.w	r2, [r3, #3372]	; 0xd2c
  }

  if (MTP_Handle->NotificationPipe != 0U)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085c2:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d017      	beq.n	80085fa <USBH_MTP_InterfaceDeInit+0xcc>
  {
    (void)USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085d0:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f003 f853 	bl	800b682 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->NotificationPipe);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085e2:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f003 f87c 	bl	800b6e6 <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0U;     /* Reset the Channel as Free */
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2d2e 	strb.w	r2, [r3, #3374]	; 0xd2e
  }

  if (phost->pActiveClass->pData != NULL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <USBH_MTP_InterfaceDeInit+0xf0>
  {
    USBH_free(phost->pActiveClass->pData);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	4618      	mov	r0, r3
 8008610:	f003 fc10 	bl	800be34 <free>
    phost->pActiveClass->pData = 0U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800861a:	2200      	movs	r2, #0
 800861c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBH_MTP_ClassRequest>:
  *         for MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
#else
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
#endif

  return USBH_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
	...

08008640 <USBH_MTP_Process>:
  *         The function is for managing state machine for MTP data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_Process(USBH_HandleTypeDef *phost)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008648:	2301      	movs	r3, #1
 800864a:	75fb      	strb	r3, [r7, #23]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	60fb      	str	r3, [r7, #12]
  uint32_t idx = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	613b      	str	r3, [r7, #16]

  switch (MTP_Handle->state)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008660:	f893 3d38 	ldrb.w	r3, [r3, #3384]	; 0xd38
 8008664:	2b05      	cmp	r3, #5
 8008666:	f200 80b7 	bhi.w	80087d8 <USBH_MTP_Process+0x198>
 800866a:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <USBH_MTP_Process+0x30>)
 800866c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008670:	080087cd 	.word	0x080087cd
 8008674:	080086ab 	.word	0x080086ab
 8008678:	08008689 	.word	0x08008689
 800867c:	080087d9 	.word	0x080087d9
 8008680:	080086cf 	.word	0x080086cf
 8008684:	0800871b 	.word	0x0800871b
  {
    case  MTP_OPENSESSION:
      status = USBH_PTP_OpenSession(phost, 1U);  /* Session '0' is not valid */
 8008688:	2101      	movs	r1, #1
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 f99d 	bl	80099ca <USBH_PTP_OpenSession>
 8008690:	4603      	mov	r3, r0
 8008692:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f040 80a0 	bne.w	80087dc <USBH_MTP_Process+0x19c>
      {
        USBH_UsrLog("MTP Session #0 Opened");
        MTP_Handle->state = MTP_GETDEVICEINFO;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086a8:	e098      	b.n	80087dc <USBH_MTP_Process+0x19c>

    case MTP_GETDEVICEINFO:
      status = USBH_PTP_GetDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 f9f0 	bl	8009a94 <USBH_PTP_GetDeviceInfo>
 80086b4:	4603      	mov	r3, r0
 80086b6:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f040 8090 	bne.w	80087e0 <USBH_MTP_Process+0x1a0>
        USBH_DbgLog("Manufacturer : %s", MTP_Handle->info.devinfo.Manufacturer);
        USBH_DbgLog("Model : %s", MTP_Handle->info.devinfo.Model);
        USBH_DbgLog("Device version : %s", MTP_Handle->info.devinfo.DeviceVersion);
        USBH_DbgLog("Serial number : %s", MTP_Handle->info.devinfo.SerialNumber);

        MTP_Handle->state = MTP_GETSTORAGEIDS;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c6:	2204      	movs	r2, #4
 80086c8:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086cc:	e088      	b.n	80087e0 <USBH_MTP_Process+0x1a0>

    case MTP_GETSTORAGEIDS:
      status = USBH_PTP_GetStorageIds(phost, &(MTP_Handle->info.storids));
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f603 1304 	addw	r3, r3, #2308	; 0x904
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 fa5b 	bl	8009b92 <USBH_PTP_GetStorageIds>
 80086dc:	4603      	mov	r3, r0
 80086de:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d17e      	bne.n	80087e4 <USBH_MTP_Process+0x1a4>
      {
        USBH_DbgLog("Number of storage ID items : %d", MTP_Handle->info.storids.n);
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 80086e6:	2300      	movs	r3, #0
 80086e8:	613b      	str	r3, [r7, #16]
 80086ea:	e002      	b.n	80086f2 <USBH_MTP_Process+0xb2>
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	3301      	adds	r3, #1
 80086f0:	613b      	str	r3, [r7, #16]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d3f6      	bcc.n	80086ec <USBH_MTP_Process+0xac>
        {
          USBH_DbgLog("storage#%d ID : %x", idx, MTP_Handle->info.storids.Storage[idx]);
        }

        MTP_Handle->current_storage_unit = 0U;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008704:	461a      	mov	r2, r3
 8008706:	2300      	movs	r3, #0
 8008708:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008712:	2205      	movs	r2, #5
 8008714:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008718:	e064      	b.n	80087e4 <USBH_MTP_Process+0x1a4>

    case MTP_GETSTORAGEINFO:
      status = USBH_PTP_GetStorageInfo(phost,
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008720:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	6899      	ldr	r1, [r3, #8]
                                       &((MTP_Handle->info.storinfo)[MTP_Handle->current_storage_unit]));
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008736:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 800873a:	4613      	mov	r3, r2
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	4413      	add	r3, r2
 8008740:	015b      	lsls	r3, r3, #5
 8008742:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	4413      	add	r3, r2
 800874a:	461a      	mov	r2, r3
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 fa9f 	bl	8009c90 <USBH_PTP_GetStorageInfo>
 8008752:	4603      	mov	r3, r0
 8008754:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d145      	bne.n	80087e8 <USBH_MTP_Process+0x1a8>
      {
        USBH_UsrLog("Volume#%lu: %s   [%s]", MTP_Handle->current_storage_unit,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].StorageDescription,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].VolumeLabel);
        if (++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008762:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8008766:	3301      	adds	r3, #1
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800876e:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008778:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8008782:	429a      	cmp	r2, r3
 8008784:	d330      	bcc.n	80087e8 <USBH_MTP_Process+0x1a8>
        {
          MTP_Handle->state = MTP_IDLE;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2d38 	strb.w	r2, [r3, #3384]	; 0xd38
          MTP_Handle->is_ready = 1U;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008798:	461a      	mov	r2, r3
 800879a:	2301      	movs	r3, #1
 800879c:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
          MTP_Handle->current_storage_unit = 0U;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80087a6:	461a      	mov	r2, r3
 80087a8:	2300      	movs	r3, #0
 80087aa:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
          MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087ba:	f8c2 3d18 	str.w	r3, [r2, #3352]	; 0xd18

          USBH_UsrLog("MTP Class initialized.");
          USBH_UsrLog("%s is default storage unit", MTP_Handle->info.storinfo[0].StorageDescription);
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 80087c4:	2102      	movs	r1, #2
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	4798      	blx	r3
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80087ca:	e00d      	b.n	80087e8 <USBH_MTP_Process+0x1a8>

    case  MTP_IDLE:
      (void)USBH_MTP_Events(phost);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f81c 	bl	800880a <USBH_MTP_Events>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

      status = USBH_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75fb      	strb	r3, [r7, #23]
      break;
 80087d6:	e008      	b.n	80087ea <USBH_MTP_Process+0x1aa>

    default:
      break;
 80087d8:	bf00      	nop
 80087da:	e006      	b.n	80087ea <USBH_MTP_Process+0x1aa>
      break;
 80087dc:	bf00      	nop
 80087de:	e004      	b.n	80087ea <USBH_MTP_Process+0x1aa>
      break;
 80087e0:	bf00      	nop
 80087e2:	e002      	b.n	80087ea <USBH_MTP_Process+0x1aa>
      break;
 80087e4:	bf00      	nop
 80087e6:	e000      	b.n	80087ea <USBH_MTP_Process+0x1aa>
      break;
 80087e8:	bf00      	nop
  }

  return status;
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBH_MTP_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_SOFProcess(USBH_HandleTypeDef *phost)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <USBH_MTP_Events>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_Events(USBH_HandleTypeDef *phost)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008812:	2301      	movs	r3, #1
 8008814:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	60bb      	str	r3, [r7, #8]

  switch (MTP_Handle->events.state)
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008826:	f893 3d3c 	ldrb.w	r3, [r3, #3388]	; 0xd3c
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <USBH_MTP_Events+0x2a>
 800882e:	2b01      	cmp	r3, #1
 8008830:	d028      	beq.n	8008884 <USBH_MTP_Events+0x7a>

      }
      break;

    default:
      break;
 8008832:	e064      	b.n	80088fe <USBH_MTP_Events+0xf4>
      if ((phost->Timer & 1U) == 0U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d15a      	bne.n	80088f8 <USBH_MTP_Events+0xee>
        MTP_Handle->events.timer = phost->Timer;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800884e:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
                                        (uint8_t *)(void *) & (MTP_Handle->events.container),
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f503 51ea 	add.w	r1, r3, #7488	; 0x1d40
 8008858:	3108      	adds	r1, #8
                                        (uint8_t)MTP_Handle->NotificationEpSize,
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008860:	f8b3 3d36 	ldrh.w	r3, [r3, #3382]	; 0xd36
        (void)USBH_InterruptReceiveData(phost,
 8008864:	b2da      	uxtb	r2, r3
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800886c:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f002 fead 	bl	800b5d0 <USBH_InterruptReceiveData>
        MTP_Handle->events.state = MTP_EVENTS_GETDATA;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2d3c 	strb.w	r2, [r3, #3388]	; 0xd3c
      break;
 8008882:	e039      	b.n	80088f8 <USBH_MTP_Events+0xee>
      if (USBH_LL_GetURBState(phost, MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800888a:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f003 f9e5 	bl	800bc60 <USBH_LL_GetURBState>
 8008896:	4603      	mov	r3, r0
 8008898:	2b01      	cmp	r3, #1
 800889a:	d102      	bne.n	80088a2 <USBH_MTP_Events+0x98>
        MTP_DecodeEvent(phost);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f833 	bl	8008908 <MTP_DecodeEvent>
      if ((phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 2594 	ldr.w	r2, [r3, #1428]	; 0x594
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ae:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088ba:	f8b2 2d44 	ldrh.w	r2, [r2, #3396]	; 0xd44
 80088be:	4293      	cmp	r3, r2
 80088c0:	d31c      	bcc.n	80088fc <USBH_MTP_Events+0xf2>
        MTP_Handle->events.timer = phost->Timer;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088ce:	f8c2 3d40 	str.w	r3, [r2, #3392]	; 0xd40
                                        (uint8_t *)(void *) & (MTP_Handle->events.container),
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f503 51ea 	add.w	r1, r3, #7488	; 0x1d40
 80088d8:	3108      	adds	r1, #8
                                        (uint8_t)MTP_Handle->NotificationEpSize,
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e0:	f8b3 3d36 	ldrh.w	r3, [r3, #3382]	; 0xd36
        (void)USBH_InterruptReceiveData(phost,
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ec:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	; 0xd2e
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f002 fe6d 	bl	800b5d0 <USBH_InterruptReceiveData>
      break;
 80088f6:	e001      	b.n	80088fc <USBH_MTP_Events+0xf2>
      break;
 80088f8:	bf00      	nop
 80088fa:	e000      	b.n	80088fe <USBH_MTP_Events+0xf4>
      break;
 80088fc:	bf00      	nop
  }

  return status;
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <MTP_DecodeEvent>:
  *         Decode device event sent by responder
  * @param  phost: Host handle
  * @retval None
  */
static void MTP_DecodeEvent(USBH_HandleTypeDef *phost)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	617b      	str	r3, [r7, #20]

  uint16_t code;
  uint32_t param1;

  /* Process the event */
  code = MTP_Handle->events.container.code;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008920:	f8b3 3d4e 	ldrh.w	r3, [r3, #3406]	; 0xd4e
 8008924:	827b      	strh	r3, [r7, #18]
  param1 = MTP_Handle->events.container.param1;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800892c:	f8d3 3d54 	ldr.w	r3, [r3, #3412]	; 0xd54
 8008930:	60fb      	str	r3, [r7, #12]

  switch (code)
 8008932:	8a7b      	ldrh	r3, [r7, #18]
 8008934:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008938:	2b0e      	cmp	r3, #14
 800893a:	d821      	bhi.n	8008980 <MTP_DecodeEvent+0x78>
 800893c:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <MTP_DecodeEvent+0x3c>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	08008981 	.word	0x08008981
 8008948:	08008981 	.word	0x08008981
 800894c:	08008981 	.word	0x08008981
 8008950:	08008981 	.word	0x08008981
 8008954:	08008981 	.word	0x08008981
 8008958:	08008981 	.word	0x08008981
 800895c:	08008981 	.word	0x08008981
 8008960:	08008981 	.word	0x08008981
 8008964:	08008981 	.word	0x08008981
 8008968:	08008981 	.word	0x08008981
 800896c:	08008981 	.word	0x08008981
 8008970:	08008981 	.word	0x08008981
 8008974:	08008981 	.word	0x08008981
 8008978:	08008981 	.word	0x08008981
 800897c:	08008981 	.word	0x08008981
      USBH_DbgLog("EVT: PTP_EC_UnreportedStatus in session %u", MTP_Handle->ptp.session_id);
      break;

    default :
      USBH_DbgLog("Received unknown event in session %u", MTP_Handle->ptp.session_id);
      break;
 8008980:	bf00      	nop
  }

  USBH_MTP_EventsCallback(phost, (uint32_t)code, param1);
 8008982:	8a7b      	ldrh	r3, [r7, #18]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f805 	bl	8008998 <USBH_MTP_EventsCallback>
}
 800898e:	bf00      	nop
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop

08008998 <USBH_MTP_EventsCallback>:
  * @brief  The function informs that host has received an event
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_MTP_EventsCallback(USBH_HandleTypeDef *phost, uint32_t event, uint32_t param)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(event);
  UNUSED(param);
}
 80089a4:	bf00      	nop
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <USBH_PTP_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Init(USBH_HandleTypeDef *phost)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	60fb      	str	r3, [r7, #12]

  /* Set state to idle to be ready for operations */
  MTP_Handle->ptp.state = PTP_IDLE;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
  MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61

  return USBH_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USBH_PTP_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Process(USBH_HandleTypeDef *phost)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b090      	sub	sp, #64	; 0x40
 80089ec:	af02      	add	r7, sp, #8
 80089ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80089f0:	2301      	movs	r3, #1
 80089f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80089f6:	2300      	movs	r3, #0
 80089f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef  ptp_container;
  uint32_t  len;

  switch (MTP_Handle->ptp.state)
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a0c:	f893 3d60 	ldrb.w	r3, [r3, #3424]	; 0xd60
 8008a10:	2b09      	cmp	r3, #9
 8008a12:	f200 8270 	bhi.w	8008ef6 <USBH_PTP_Process+0x50e>
 8008a16:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <USBH_PTP_Process+0x34>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008ef7 	.word	0x08008ef7
 8008a20:	08008a45 	.word	0x08008a45
 8008a24:	08008a7b 	.word	0x08008a7b
 8008a28:	08008b1f 	.word	0x08008b1f
 8008a2c:	08008b55 	.word	0x08008b55
 8008a30:	08008cad 	.word	0x08008cad
 8008a34:	08008cdf 	.word	0x08008cdf
 8008a38:	08008e59 	.word	0x08008e59
 8008a3c:	08008e81 	.word	0x08008e81
 8008a40:	08008ee9 	.word	0x08008ee9
      /*Do Nothing */
      break;

    case PTP_OP_REQUEST_STATE:
      (void)USBH_BulkSendData(phost,
                              (uint8_t *)(void *) & (MTP_Handle->ptp.op_container),
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	f503 51eb 	add.w	r1, r3, #7520	; 0x1d60
 8008a4a:	3104      	adds	r1, #4
                              (uint16_t)MTP_Handle->ptp.op_container.length,
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a52:	f8d3 3d64 	ldr.w	r3, [r3, #3428]	; 0xd64
      (void)USBH_BulkSendData(phost,
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5e:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 8008a62:	2001      	movs	r0, #1
 8008a64:	9000      	str	r0, [sp, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f002 fd6f 	bl	800b54a <USBH_BulkSendData>
                              MTP_Handle->DataOutPipe,
                              1U);
      MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008a78:	e246      	b.n	8008f08 <USBH_PTP_Process+0x520>

    case PTP_OP_REQUEST_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a80:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f003 f8ea 	bl	800bc60 <USBH_LL_GetURBState>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 8008a92:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d12a      	bne.n	8008af0 <USBH_PTP_Process+0x108>
      {
        if (MTP_Handle->ptp.flags == PTP_DP_NODATA)
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008aa0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <USBH_PTP_Process+0xce>
        {
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aae:	2207      	movs	r2, #7
 8008ab0:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
#endif
      }
      else
      {
      }
      break;
 8008ab4:	e221      	b.n	8008efa <USBH_PTP_Process+0x512>
        else  if (MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008abc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d106      	bne.n	8008ad2 <USBH_PTP_Process+0xea>
          MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aca:	2203      	movs	r2, #3
 8008acc:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008ad0:	e213      	b.n	8008efa <USBH_PTP_Process+0x512>
        else  if (MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008ad8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	f040 820c 	bne.w	8008efa <USBH_PTP_Process+0x512>
          MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae8:	2205      	movs	r2, #5
 8008aea:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008aee:	e204      	b.n	8008efa <USBH_PTP_Process+0x512>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008af0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d106      	bne.n	8008b06 <USBH_PTP_Process+0x11e>
        MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008b04:	e1f9      	b.n	8008efa <USBH_PTP_Process+0x512>
      else if (URB_Status == USBH_URB_STALL)
 8008b06:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008b0a:	2b05      	cmp	r3, #5
 8008b0c:	f040 81f5 	bne.w	8008efa <USBH_PTP_Process+0x512>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b16:	2209      	movs	r2, #9
 8008b18:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008b1c:	e1ed      	b.n	8008efa <USBH_PTP_Process+0x512>

    case PTP_DATA_OUT_PHASE_STATE:

      (void)USBH_BulkSendData(phost,
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008b24:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b2e:	f8b3 2d32 	ldrh.w	r2, [r3, #3378]	; 0xd32
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b38:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 8008b3c:	2001      	movs	r0, #1
 8008b3e:	9000      	str	r0, [sp, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f002 fd02 	bl	800b54a <USBH_BulkSendData>
                              MTP_Handle->DataOutEpSize,
                              MTP_Handle->DataOutPipe,
                              1U);


      MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b4c:	2204      	movs	r2, #4
 8008b4e:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008b52:	e1d9      	b.n	8008f08 <USBH_PTP_Process+0x520>

    case PTP_DATA_OUT_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b5a:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f003 f87d 	bl	800bc60 <USBH_LL_GetURBState>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 8008b6c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	f040 8084 	bne.w	8008c7e <USBH_PTP_Process+0x296>
      {
        /* Adjust Data pointer and data length */
        if (MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008b7c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8008b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b86:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d94d      	bls.n	8008c2a <USBH_PTP_Process+0x242>
        {
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008b94:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8008b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b9e:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 8008ba2:	4413      	add	r3, r2
 8008ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ba6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008baa:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008bb4:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8008bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008bbe:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 8008bc2:	1a9b      	subs	r3, r3, r2
 8008bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008bca:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008bd4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8008bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008bde:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	; 0xd32
 8008be2:	4413      	add	r3, r2
 8008be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008bea:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 8008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008bf4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8008bf8:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8008bfc:	d31c      	bcc.n	8008c38 <USBH_PTP_Process+0x250>
          {
            PTP_BufferFullCallback(phost);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa2e 	bl	8009060 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 8008c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c06:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
            MTP_Handle->ptp.iteration++;
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008c18:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c20:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008c24:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
 8008c28:	e006      	b.n	8008c38 <USBH_PTP_Process+0x250>
          }
        }
        else
        {
          MTP_Handle->ptp.data_length = 0U;
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008c30:	461a      	mov	r2, r3
 8008c32:	2300      	movs	r3, #0
 8008c34:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
        }

        /* More Data To be Sent */
        if (MTP_Handle->ptp.data_length > 0U)
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008c3e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d014      	beq.n	8008c70 <USBH_PTP_Process+0x288>
        {
          (void)USBH_BulkSendData(phost,
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008c4c:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c56:	f8b3 2d32 	ldrh.w	r2, [r3, #3378]	; 0xd32
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c60:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	; 0xd2d
 8008c64:	2001      	movs	r0, #1
 8008c66:	9000      	str	r0, [sp, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f002 fc6e 	bl	800b54a <USBH_BulkSendData>
      }
      else
      {
        /* .. */
      }
      break;
 8008c6e:	e146      	b.n	8008efe <USBH_PTP_Process+0x516>
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c76:	2207      	movs	r2, #7
 8008c78:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008c7c:	e13f      	b.n	8008efe <USBH_PTP_Process+0x516>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d106      	bne.n	8008c94 <USBH_PTP_Process+0x2ac>
        MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c8c:	2203      	movs	r2, #3
 8008c8e:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008c92:	e134      	b.n	8008efe <USBH_PTP_Process+0x516>
      else if (URB_Status == USBH_URB_STALL)
 8008c94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008c98:	2b05      	cmp	r3, #5
 8008c9a:	f040 8130 	bne.w	8008efe <USBH_PTP_Process+0x516>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca4:	2209      	movs	r2, #9
 8008ca6:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008caa:	e128      	b.n	8008efe <USBH_PTP_Process+0x516>

    case PTP_DATA_IN_PHASE_STATE:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost,
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008cb2:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cbc:	f8b3 2d34 	ldrh.w	r2, [r3, #3380]	; 0xd34
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc6:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f002 fc62 	bl	800b594 <USBH_BulkReceiveData>
                                 MTP_Handle->ptp.data_ptr,
                                 MTP_Handle->DataInEpSize,
                                 MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd6:	2206      	movs	r2, #6
 8008cd8:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008cdc:	e114      	b.n	8008f08 <USBH_PTP_Process+0x520>

    case PTP_DATA_IN_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce4:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f002 ffb8 	bl	800bc60 <USBH_LL_GetURBState>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 8008cf6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	f040 80a1 	bne.w	8008e42 <USBH_PTP_Process+0x45a>
      {
        len = USBH_LL_GetLastXferSize(phost, MTP_Handle->DataInPipe);
 8008d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d06:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f002 ff15 	bl	800bb3c <USBH_LL_GetLastXferSize>
 8008d12:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 8008d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008d1a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d22:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8008d26:	f8c1 21c0 	str.w	r2, [r1, #448]	; 0x1c0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d111      	bne.n	8008d52 <USBH_PTP_Process+0x36a>
        {
          /* This is the first packet; so retrieve exact data length from payload */
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008d34:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008d40:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.iteration = 0U;
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
        }

        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 8008d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d58:	f8b3 3d34 	ldrh.w	r3, [r3, #3380]	; 0xd34
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d35b      	bcc.n	8008e1c <USBH_PTP_Process+0x434>
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008d6a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d054      	beq.n	8008e1c <USBH_PTP_Process+0x434>
        {
          MTP_Handle->ptp.data_ptr += len;
 8008d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008d78:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	4413      	add	r3, r2
 8008d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d82:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008d86:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
          MTP_Handle->ptp.data_length -= len;
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008d90:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d9a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008d9e:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.data_packet += len;
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008da8:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dae:	4413      	add	r3, r2
 8008db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008db6:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008dc0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8008dc4:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8008dc8:	d314      	bcc.n	8008df4 <USBH_PTP_Process+0x40c>
          {
            PTP_BufferFullCallback(phost);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f948 	bl	8009060 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
            MTP_Handle->ptp.iteration++;
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008de4:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8008de8:	3301      	adds	r3, #1
 8008dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dec:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008df0:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
          }

          /* Continue receiving data*/
          (void)USBH_BulkReceiveData(phost,
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008dfa:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e04:	f8b3 2d34 	ldrh.w	r2, [r3, #3380]	; 0xd34
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e0e:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f002 fbbe 	bl	800b594 <USBH_BulkReceiveData>
 8008e18:	bf00      	nop
      }
      else
      {
        /* .. */
      }
      break;
 8008e1a:	e072      	b.n	8008f02 <USBH_PTP_Process+0x51a>
          MTP_Handle->ptp.data_length -= len;
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008e22:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e2c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008e30:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e3a:	2207      	movs	r2, #7
 8008e3c:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008e40:	e05f      	b.n	8008f02 <USBH_PTP_Process+0x51a>
      else if (URB_Status == USBH_URB_STALL)
 8008e42:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008e46:	2b05      	cmp	r3, #5
 8008e48:	d15b      	bne.n	8008f02 <USBH_PTP_Process+0x51a>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e50:	2209      	movs	r2, #9
 8008e52:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008e56:	e054      	b.n	8008f02 <USBH_PTP_Process+0x51a>

    case PTP_RESPONSE_STATE:
      (void)USBH_BulkReceiveData(phost,
                                 (uint8_t *)(void *) & (MTP_Handle->ptp.resp_container),
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	f503 5106 	add.w	r1, r3, #8576	; 0x2180
 8008e5e:	3104      	adds	r1, #4
      (void)USBH_BulkReceiveData(phost,
 8008e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e66:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 8008e6a:	223f      	movs	r2, #63	; 0x3f
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f002 fb91 	bl	800b594 <USBH_BulkReceiveData>
                                 PTP_USB_BULK_REQ_RESP_MAX_LEN,
                                 MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e78:	2208      	movs	r2, #8
 8008e7a:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008e7e:	e043      	b.n	8008f08 <USBH_PTP_Process+0x520>

    case PTP_RESPONSE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 8008e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e86:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	; 0xd2c
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f002 fee7 	bl	800bc60 <USBH_LL_GetURBState>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

      if (URB_Status == USBH_URB_DONE)
 8008e98:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d118      	bne.n	8008ed2 <USBH_PTP_Process+0x4ea>
      {
        (void)USBH_PTP_GetResponse(phost, &ptp_container);
 8008ea0:	f107 0308 	add.w	r3, r7, #8
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f88f 	bl	8008fca <USBH_PTP_GetResponse>

        if (ptp_container.Code == PTP_RC_OK)
 8008eac:	893b      	ldrh	r3, [r7, #8]
 8008eae:	f242 0201 	movw	r2, #8193	; 0x2001
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d103      	bne.n	8008ebe <USBH_PTP_Process+0x4d6>
        {
          status = USBH_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008ebc:	e002      	b.n	8008ec4 <USBH_PTP_Process+0x4dc>
        }
        else
        {
          status = USBH_FAIL;
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      }
      else
      {
        /* .. */
      }
      break;
 8008ed0:	e019      	b.n	8008f06 <USBH_PTP_Process+0x51e>
      else if (URB_Status == USBH_URB_STALL)
 8008ed2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008ed6:	2b05      	cmp	r3, #5
 8008ed8:	d115      	bne.n	8008f06 <USBH_PTP_Process+0x51e>
        MTP_Handle->ptp.state  = PTP_ERROR;
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ee0:	2209      	movs	r2, #9
 8008ee2:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      break;
 8008ee6:	e00e      	b.n	8008f06 <USBH_PTP_Process+0x51e>

    case PTP_ERROR:
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      break;
 8008ef4:	e008      	b.n	8008f08 <USBH_PTP_Process+0x520>

    default:
      break;
 8008ef6:	bf00      	nop
 8008ef8:	e006      	b.n	8008f08 <USBH_PTP_Process+0x520>
      break;
 8008efa:	bf00      	nop
 8008efc:	e004      	b.n	8008f08 <USBH_PTP_Process+0x520>
      break;
 8008efe:	bf00      	nop
 8008f00:	e002      	b.n	8008f08 <USBH_PTP_Process+0x520>
      break;
 8008f02:	bf00      	nop
 8008f04:	e000      	b.n	8008f08 <USBH_PTP_Process+0x520>
      break;
 8008f06:	bf00      	nop
  }
  return status;
 8008f08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3738      	adds	r7, #56	; 0x38
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBH_PTP_SendRequest>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_SendRequest(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *req)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	60bb      	str	r3, [r7, #8]

  /* Clear PTP Data container*/
  (void)USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f503 53eb 	add.w	r3, r3, #7520	; 0x1d60
 8008f32:	3304      	adds	r3, #4
 8008f34:	2220      	movs	r2, #32
 8008f36:	2100      	movs	r1, #0
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f002 ff91 	bl	800be60 <memset>

  /* build appropriate USB container */
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - ((sizeof(uint32_t) * (5U - (uint32_t)req->Nparam)));
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f44:	3303      	adds	r3, #3
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f4e:	f8c2 3d64 	str.w	r3, [r2, #3428]	; 0xd64
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f8a3 2d68 	strh.w	r2, [r3, #3432]	; 0xd68
  MTP_Handle->ptp.op_container.code = req->Code;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	881a      	ldrh	r2, [r3, #0]
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f68:	f8a3 2d6a 	strh.w	r2, [r3, #3434]	; 0xd6a
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f76:	f8c2 3d6c 	str.w	r3, [r2, #3436]	; 0xd6c
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f84:	f8c2 3d70 	str.w	r3, [r2, #3440]	; 0xd70
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f92:	f8c2 3d74 	str.w	r3, [r2, #3444]	; 0xd74
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fa0:	f8c2 3d78 	str.w	r3, [r2, #3448]	; 0xd78
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fae:	f8c2 3d7c 	str.w	r3, [r2, #3452]	; 0xd7c
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fbc:	f8c2 3d80 	str.w	r3, [r2, #3456]	; 0xd80

  return status;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBH_PTP_GetResponse>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetResponse(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *resp)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b085      	sub	sp, #20
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	60bb      	str	r3, [r7, #8]

  /* build an appropriate PTPContainer */
  resp->Code = MTP_Handle->ptp.resp_container.code;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008fe8:	f8b3 218a 	ldrh.w	r2, [r3, #394]	; 0x18a
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	801a      	strh	r2, [r3, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008ff6:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	605a      	str	r2, [r3, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009004:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	609a      	str	r2, [r3, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009012:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	60da      	str	r2, [r3, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009020:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	611a      	str	r2, [r3, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800902e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	615a      	str	r2, [r3, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800903c:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	619a      	str	r2, [r3, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800904a:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	61da      	str	r2, [r3, #28]

  return status;
 8009052:	7bfb      	ldrb	r3, [r7, #15]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <PTP_BufferFullCallback>:
  * @brief  The function informs user that data buffer is full
  *  @param  phost: host handle
  * @retval None
  */
static void PTP_BufferFullCallback(USBH_HandleTypeDef *phost)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	60fb      	str	r3, [r7, #12]

  switch (MTP_Handle->ptp.data_container.code)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009078:	f8b3 3d8a 	ldrh.w	r3, [r3, #3466]	; 0xd8a
 800907c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8009080:	3b01      	subs	r3, #1
 8009082:	2b1a      	cmp	r3, #26
 8009084:	d874      	bhi.n	8009170 <PTP_BufferFullCallback+0x110>
 8009086:	a201      	add	r2, pc, #4	; (adr r2, 800908c <PTP_BufferFullCallback+0x2c>)
 8009088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908c:	080090f9 	.word	0x080090f9
 8009090:	08009171 	.word	0x08009171
 8009094:	08009171 	.word	0x08009171
 8009098:	08009171 	.word	0x08009171
 800909c:	08009171 	.word	0x08009171
 80090a0:	08009171 	.word	0x08009171
 80090a4:	08009171 	.word	0x08009171
 80090a8:	08009171 	.word	0x08009171
 80090ac:	08009105 	.word	0x08009105
 80090b0:	08009171 	.word	0x08009171
 80090b4:	08009171 	.word	0x08009171
 80090b8:	08009171 	.word	0x08009171
 80090bc:	08009149 	.word	0x08009149
 80090c0:	08009171 	.word	0x08009171
 80090c4:	08009171 	.word	0x08009171
 80090c8:	08009171 	.word	0x08009171
 80090cc:	08009171 	.word	0x08009171
 80090d0:	08009171 	.word	0x08009171
 80090d4:	08009171 	.word	0x08009171
 80090d8:	08009171 	.word	0x08009171
 80090dc:	08009171 	.word	0x08009171
 80090e0:	08009171 	.word	0x08009171
 80090e4:	08009171 	.word	0x08009171
 80090e8:	08009171 	.word	0x08009171
 80090ec:	08009171 	.word	0x08009171
 80090f0:	08009171 	.word	0x08009171
 80090f4:	08009105 	.word	0x08009105
  {
    case PTP_OC_GetDeviceInfo:
      PTP_DecodeDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f841 	bl	8009184 <PTP_DecodeDeviceInfo>
      break;
 8009102:	e03a      	b.n	800917a <PTP_BufferFullCallback+0x11a>

    case PTP_OC_GetPartialObject:
    case PTP_OC_GetObject:

      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800910a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800910e:	2b00      	cmp	r3, #0
 8009110:	d130      	bne.n	8009174 <PTP_BufferFullCallback+0x114>
      {
        /* copy it to object */
        (void)USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data,
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009118:	f8d3 01c4 	ldr.w	r0, [r3, #452]	; 0x1c4
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8009122:	3310      	adds	r3, #16
 8009124:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 8009128:	4619      	mov	r1, r3
 800912a:	f002 fe8b 	bl	800be44 <memcpy>
                          PTP_USB_BULK_PAYLOAD_LEN_READ);

        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009134:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8009138:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8009142:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      }
      break;
 8009146:	e015      	b.n	8009174 <PTP_BufferFullCallback+0x114>

    case PTP_OC_SendObject:
      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800914e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8009152:	2b00      	cmp	r3, #0
 8009154:	d110      	bne.n	8009178 <PTP_BufferFullCallback+0x118>
      {
        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800915c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8009160:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800916a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      }
      break;
 800916e:	e003      	b.n	8009178 <PTP_BufferFullCallback+0x118>

    default:
      break;
 8009170:	bf00      	nop
 8009172:	e002      	b.n	800917a <PTP_BufferFullCallback+0x11a>
      break;
 8009174:	bf00      	nop
 8009176:	e000      	b.n	800917a <PTP_BufferFullCallback+0x11a>
      break;
 8009178:	bf00      	nop


  }
}
 800917a:	bf00      	nop
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop

08009184 <PTP_DecodeDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval None
  */
static void PTP_DecodeDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	617b      	str	r3, [r7, #20]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800919e:	3310      	adds	r3, #16
 80091a0:	613b      	str	r3, [r7, #16]

  /* Max device info is PTP_USB_BULK_HS_MAX_PACKET_LEN_READ */
  USBH_DbgLog(" MTP device info size exceeds internal buffer size.\
               only available data are decoded.");

  if (MTP_Handle->ptp.iteration == 0U)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80091a8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f040 80fc 	bne.w	80093aa <PTP_DecodeDeviceInfo+0x226>
  {
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	3301      	adds	r3, #1
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	021b      	lsls	r3, r3, #8
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	4313      	orrs	r3, r2
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	801a      	strh	r2, [r3, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	3302      	adds	r3, #2
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	3303      	adds	r3, #3
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	431a      	orrs	r2, r3
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	3304      	adds	r3, #4
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	041b      	lsls	r3, r3, #16
 80091e6:	431a      	orrs	r2, r3
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	3305      	adds	r3, #5
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	061b      	lsls	r3, r3, #24
 80091f0:	431a      	orrs	r2, r3
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	605a      	str	r2, [r3, #4]
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	3306      	adds	r3, #6
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	3307      	adds	r3, #7
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	b29b      	uxth	r3, r3
 8009206:	021b      	lsls	r3, r3, #8
 8009208:	b29b      	uxth	r3, r3
 800920a:	4313      	orrs	r3, r2
 800920c:	b29a      	uxth	r2, r3
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	811a      	strh	r2, [r3, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	f103 000a 	add.w	r0, r3, #10
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3308      	adds	r3, #8
 800921c:	f107 020a 	add.w	r2, r7, #10
 8009220:	4619      	mov	r1, r3
 8009222:	f000 fafe 	bl	8009822 <PTP_GetString>

    totallen = (uint32_t)(len * 2U) + 1U;
 8009226:	897b      	ldrh	r3, [r7, #10]
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	3301      	adds	r3, #1
 800922c:	60fb      	str	r3, [r7, #12]
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3308      	adds	r3, #8
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	4413      	add	r3, r2
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	b29a      	uxth	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	3309      	adds	r3, #9
 800923e:	6939      	ldr	r1, [r7, #16]
 8009240:	440b      	add	r3, r1
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	b29b      	uxth	r3, r3
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	b29b      	uxth	r3, r3
 800924a:	4313      	orrs	r3, r2
 800924c:	b29a      	uxth	r2, r3
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	f503 7088 	add.w	r0, r3, #272	; 0x110
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	330a      	adds	r3, #10
 800925e:	461a      	mov	r2, r3
 8009260:	6939      	ldr	r1, [r7, #16]
 8009262:	f000 fb0d 	bl	8009880 <PTP_GetArray16>
 8009266:	4602      	mov	r2, r0
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                       data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->OperationsSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009274:	005a      	lsls	r2, r3, #1
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4413      	add	r3, r2
 800927a:	3304      	adds	r3, #4
 800927c:	60fb      	str	r3, [r7, #12]
    dev_info->EventsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->EventsSupported,
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	330a      	adds	r3, #10
 8009288:	461a      	mov	r2, r3
 800928a:	6939      	ldr	r1, [r7, #16]
 800928c:	f000 faf8 	bl	8009880 <PTP_GetArray16>
 8009290:	4602      	mov	r2, r0
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
                                                   data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->EventsSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800929e:	005a      	lsls	r2, r3, #1
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4413      	add	r3, r2
 80092a4:	3304      	adds	r3, #4
 80092a6:	60fb      	str	r3, [r7, #12]
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	330a      	adds	r3, #10
 80092b2:	461a      	mov	r2, r3
 80092b4:	6939      	ldr	r1, [r7, #16]
 80092b6:	f000 fae3 	bl	8009880 <PTP_GetArray16>
 80092ba:	4602      	mov	r2, r0
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
                                                             data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->DevicePropertiesSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80092c8:	005a      	lsls	r2, r3, #1
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	4413      	add	r3, r2
 80092ce:	3304      	adds	r3, #4
 80092d0:	60fb      	str	r3, [r7, #12]

    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	f503 705d 	add.w	r0, r3, #884	; 0x374
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	330a      	adds	r3, #10
 80092dc:	461a      	mov	r2, r3
 80092de:	6939      	ldr	r1, [r7, #16]
 80092e0:	f000 face 	bl	8009880 <PTP_GetArray16>
 80092e4:	4602      	mov	r2, r0
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
                                                  data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->CaptureFormats_len * sizeof(uint16_t)) + sizeof(uint32_t);
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 80092f2:	005a      	lsls	r2, r3, #1
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4413      	add	r3, r2
 80092f8:	3304      	adds	r3, #4
 80092fa:	60fb      	str	r3, [r7, #12]
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	f503 6088 	add.w	r0, r3, #1088	; 0x440
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	330a      	adds	r3, #10
 8009306:	461a      	mov	r2, r3
 8009308:	6939      	ldr	r1, [r7, #16]
 800930a:	f000 fab9 	bl	8009880 <PTP_GetArray16>
 800930e:	4602      	mov	r2, r0
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                                                 data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->ImageFormats_len * sizeof(uint16_t)) + sizeof(uint32_t);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 800931c:	005a      	lsls	r2, r3, #1
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	4413      	add	r3, r2
 8009322:	3304      	adds	r3, #4
 8009324:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	f503 60a1 	add.w	r0, r3, #1288	; 0x508
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	330a      	adds	r3, #10
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	4413      	add	r3, r2
 8009334:	f107 020a 	add.w	r2, r7, #10
 8009338:	4619      	mov	r1, r3
 800933a:	f000 fa72 	bl	8009822 <PTP_GetString>

    totallen += (uint32_t)(len * 2U) + 1U;
 800933e:	897b      	ldrh	r3, [r7, #10]
 8009340:	005a      	lsls	r2, r3, #1
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	4413      	add	r3, r2
 8009346:	3301      	adds	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	f203 6007 	addw	r0, r3, #1543	; 0x607
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	330a      	adds	r3, #10
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	4413      	add	r3, r2
 8009358:	f107 020a 	add.w	r2, r7, #10
 800935c:	4619      	mov	r1, r3
 800935e:	f000 fa60 	bl	8009822 <PTP_GetString>

    totallen += (uint32_t)(len * 2U) + 1U;
 8009362:	897b      	ldrh	r3, [r7, #10]
 8009364:	005a      	lsls	r2, r3, #1
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4413      	add	r3, r2
 800936a:	3301      	adds	r3, #1
 800936c:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	f203 7006 	addw	r0, r3, #1798	; 0x706
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	330a      	adds	r3, #10
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	4413      	add	r3, r2
 800937c:	f107 020a 	add.w	r2, r7, #10
 8009380:	4619      	mov	r1, r3
 8009382:	f000 fa4e 	bl	8009822 <PTP_GetString>

    totallen += (uint32_t)(len * 2U) + 1U;
 8009386:	897b      	ldrh	r3, [r7, #10]
 8009388:	005a      	lsls	r2, r3, #1
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	4413      	add	r3, r2
 800938e:	3301      	adds	r3, #1
 8009390:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported + totallen], &len);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	f603 0005 	addw	r0, r3, #2053	; 0x805
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	330a      	adds	r3, #10
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	4413      	add	r3, r2
 80093a0:	f107 020a 	add.w	r2, r7, #10
 80093a4:	4619      	mov	r1, r3
 80093a6:	f000 fa3c 	bl	8009822 <PTP_GetString>
  }
}
 80093aa:	bf00      	nop
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <PTP_GetStorageIDs>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageIDs(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *stor_ids)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80093c2:	69db      	ldr	r3, [r3, #28]
 80093c4:	60fb      	str	r3, [r7, #12]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 80093cc:	3310      	adds	r3, #16
 80093ce:	60bb      	str	r3, [r7, #8]

  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	3304      	adds	r3, #4
 80093d4:	2200      	movs	r2, #0
 80093d6:	68b9      	ldr	r1, [r7, #8]
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fa92 	bl	8009902 <PTP_GetArray32>
 80093de:	4602      	mov	r2, r0
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	601a      	str	r2, [r3, #0]
}
 80093e4:	bf00      	nop
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <PTP_GetStorageInfo>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageInfo(USBH_HandleTypeDef *phost, uint32_t storage_id, PTP_StorageInfoTypedef *stor_info)
{
 80093ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093f0:	b0c2      	sub	sp, #264	; 0x108
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80093f8:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80093fc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
  /* Prevent unused argument(s) compilation warning */
  UNUSED(storage_id);

  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8009400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009404:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800940e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009412:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8009416:	3310      	adds	r3, #16
 8009418:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint16_t len;

  stor_info->StorageType = LE16(&data[PTP_si_StorageType]);
 800941c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	b29a      	uxth	r2, r3
 8009424:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009428:	3301      	adds	r3, #1
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	b29b      	uxth	r3, r3
 800942e:	021b      	lsls	r3, r3, #8
 8009430:	b29b      	uxth	r3, r3
 8009432:	4313      	orrs	r3, r2
 8009434:	b29b      	uxth	r3, r3
 8009436:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800943a:	8013      	strh	r3, [r2, #0]
  stor_info->FilesystemType = LE16(&data[PTP_si_FilesystemType]);
 800943c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009440:	3302      	adds	r3, #2
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	b29a      	uxth	r2, r3
 8009446:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800944a:	3303      	adds	r3, #3
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	b29b      	uxth	r3, r3
 8009450:	021b      	lsls	r3, r3, #8
 8009452:	b29b      	uxth	r3, r3
 8009454:	4313      	orrs	r3, r2
 8009456:	b29b      	uxth	r3, r3
 8009458:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800945c:	8053      	strh	r3, [r2, #2]
  stor_info->AccessCapability = LE16(&data[PTP_si_AccessCapability]);
 800945e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009462:	3304      	adds	r3, #4
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	b29a      	uxth	r2, r3
 8009468:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800946c:	3305      	adds	r3, #5
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	b29b      	uxth	r3, r3
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	b29b      	uxth	r3, r3
 8009476:	4313      	orrs	r3, r2
 8009478:	b29b      	uxth	r3, r3
 800947a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800947e:	8093      	strh	r3, [r2, #4]
  stor_info->MaxCapability = LE64(&data[PTP_si_MaxCapability]);
 8009480:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009484:	3306      	adds	r3, #6
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2200      	movs	r2, #0
 800948c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009490:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8009494:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009498:	3307      	adds	r3, #7
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2200      	movs	r2, #0
 80094a0:	461c      	mov	r4, r3
 80094a2:	4615      	mov	r5, r2
 80094a4:	f04f 0200 	mov.w	r2, #0
 80094a8:	f04f 0300 	mov.w	r3, #0
 80094ac:	022b      	lsls	r3, r5, #8
 80094ae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80094b2:	0222      	lsls	r2, r4, #8
 80094b4:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80094b8:	4621      	mov	r1, r4
 80094ba:	ea41 0a02 	orr.w	sl, r1, r2
 80094be:	4629      	mov	r1, r5
 80094c0:	ea41 0b03 	orr.w	fp, r1, r3
 80094c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094c8:	3308      	adds	r3, #8
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2200      	movs	r2, #0
 80094d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80094d4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80094d8:	f04f 0200 	mov.w	r2, #0
 80094dc:	f04f 0300 	mov.w	r3, #0
 80094e0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80094e4:	4629      	mov	r1, r5
 80094e6:	040b      	lsls	r3, r1, #16
 80094e8:	4621      	mov	r1, r4
 80094ea:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80094ee:	4621      	mov	r1, r4
 80094f0:	040a      	lsls	r2, r1, #16
 80094f2:	ea4a 0102 	orr.w	r1, sl, r2
 80094f6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80094fa:	ea4b 0303 	orr.w	r3, fp, r3
 80094fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009502:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009506:	3309      	adds	r3, #9
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2200      	movs	r2, #0
 800950e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009512:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8009516:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800951a:	460b      	mov	r3, r1
 800951c:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8009520:	460b      	mov	r3, r1
 8009522:	ea4f 6803 	mov.w	r8, r3, lsl #24
 8009526:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800952a:	460b      	mov	r3, r1
 800952c:	ea43 0308 	orr.w	r3, r3, r8
 8009530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009534:	4613      	mov	r3, r2
 8009536:	ea43 0309 	orr.w	r3, r3, r9
 800953a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800953e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009542:	330a      	adds	r3, #10
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2200      	movs	r2, #0
 800954a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800954e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009552:	f04f 0200 	mov.w	r2, #0
 8009556:	f04f 0300 	mov.w	r3, #0
 800955a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800955e:	000b      	movs	r3, r1
 8009560:	2200      	movs	r2, #0
 8009562:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8009566:	4621      	mov	r1, r4
 8009568:	4311      	orrs	r1, r2
 800956a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800956e:	4629      	mov	r1, r5
 8009570:	4319      	orrs	r1, r3
 8009572:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8009576:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800957a:	330b      	adds	r3, #11
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2200      	movs	r2, #0
 8009582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009586:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800958a:	f04f 0200 	mov.w	r2, #0
 800958e:	f04f 0300 	mov.w	r3, #0
 8009592:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8009596:	020b      	lsls	r3, r1, #8
 8009598:	2200      	movs	r2, #0
 800959a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800959e:	4621      	mov	r1, r4
 80095a0:	4311      	orrs	r1, r2
 80095a2:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80095a6:	4629      	mov	r1, r5
 80095a8:	4319      	orrs	r1, r3
 80095aa:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 80095ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095b2:	330c      	adds	r3, #12
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2200      	movs	r2, #0
 80095ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80095be:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80095c2:	f04f 0200 	mov.w	r2, #0
 80095c6:	f04f 0300 	mov.w	r3, #0
 80095ca:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80095ce:	040b      	lsls	r3, r1, #16
 80095d0:	2200      	movs	r2, #0
 80095d2:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80095d6:	4621      	mov	r1, r4
 80095d8:	4311      	orrs	r1, r2
 80095da:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80095de:	4629      	mov	r1, r5
 80095e0:	4319      	orrs	r1, r3
 80095e2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80095e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095ea:	330d      	adds	r3, #13
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2200      	movs	r2, #0
 80095f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80095f6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80095fa:	f04f 0200 	mov.w	r2, #0
 80095fe:	f04f 0300 	mov.w	r3, #0
 8009602:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009606:	060b      	lsls	r3, r1, #24
 8009608:	2200      	movs	r2, #0
 800960a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800960e:	4621      	mov	r1, r4
 8009610:	4311      	orrs	r1, r2
 8009612:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009616:	4629      	mov	r1, r5
 8009618:	4319      	orrs	r1, r3
 800961a:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800961e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009622:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009626:	e9c3 1202 	strd	r1, r2, [r3, #8]
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 800962a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800962e:	330e      	adds	r3, #14
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2200      	movs	r2, #0
 8009636:	67bb      	str	r3, [r7, #120]	; 0x78
 8009638:	67fa      	str	r2, [r7, #124]	; 0x7c
 800963a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800963e:	330f      	adds	r3, #15
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2200      	movs	r2, #0
 8009646:	673b      	str	r3, [r7, #112]	; 0x70
 8009648:	677a      	str	r2, [r7, #116]	; 0x74
 800964a:	f04f 0200 	mov.w	r2, #0
 800964e:	f04f 0300 	mov.w	r3, #0
 8009652:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8009656:	4629      	mov	r1, r5
 8009658:	020b      	lsls	r3, r1, #8
 800965a:	4621      	mov	r1, r4
 800965c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8009660:	4621      	mov	r1, r4
 8009662:	020a      	lsls	r2, r1, #8
 8009664:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8009668:	4621      	mov	r1, r4
 800966a:	4311      	orrs	r1, r2
 800966c:	66b9      	str	r1, [r7, #104]	; 0x68
 800966e:	4629      	mov	r1, r5
 8009670:	4319      	orrs	r1, r3
 8009672:	66f9      	str	r1, [r7, #108]	; 0x6c
 8009674:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009678:	3310      	adds	r3, #16
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2200      	movs	r2, #0
 8009680:	663b      	str	r3, [r7, #96]	; 0x60
 8009682:	667a      	str	r2, [r7, #100]	; 0x64
 8009684:	f04f 0200 	mov.w	r2, #0
 8009688:	f04f 0300 	mov.w	r3, #0
 800968c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009690:	4629      	mov	r1, r5
 8009692:	040b      	lsls	r3, r1, #16
 8009694:	4621      	mov	r1, r4
 8009696:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800969a:	4621      	mov	r1, r4
 800969c:	040a      	lsls	r2, r1, #16
 800969e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80096a2:	4621      	mov	r1, r4
 80096a4:	4311      	orrs	r1, r2
 80096a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80096a8:	4629      	mov	r1, r5
 80096aa:	4319      	orrs	r1, r3
 80096ac:	65f9      	str	r1, [r7, #92]	; 0x5c
 80096ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096b2:	3311      	adds	r3, #17
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2200      	movs	r2, #0
 80096ba:	653b      	str	r3, [r7, #80]	; 0x50
 80096bc:	657a      	str	r2, [r7, #84]	; 0x54
 80096be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80096c2:	460b      	mov	r3, r1
 80096c4:	0a1b      	lsrs	r3, r3, #8
 80096c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096c8:	460b      	mov	r3, r1
 80096ca:	061b      	lsls	r3, r3, #24
 80096cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80096ce:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80096d2:	4623      	mov	r3, r4
 80096d4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80096d8:	4602      	mov	r2, r0
 80096da:	4313      	orrs	r3, r2
 80096dc:	643b      	str	r3, [r7, #64]	; 0x40
 80096de:	462b      	mov	r3, r5
 80096e0:	460a      	mov	r2, r1
 80096e2:	4313      	orrs	r3, r2
 80096e4:	647b      	str	r3, [r7, #68]	; 0x44
 80096e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096ea:	3312      	adds	r3, #18
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2200      	movs	r2, #0
 80096f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80096f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80096f6:	f04f 0200 	mov.w	r2, #0
 80096fa:	f04f 0300 	mov.w	r3, #0
 80096fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009700:	000b      	movs	r3, r1
 8009702:	2200      	movs	r2, #0
 8009704:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8009708:	4621      	mov	r1, r4
 800970a:	4311      	orrs	r1, r2
 800970c:	6339      	str	r1, [r7, #48]	; 0x30
 800970e:	4629      	mov	r1, r5
 8009710:	4319      	orrs	r1, r3
 8009712:	6379      	str	r1, [r7, #52]	; 0x34
 8009714:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009718:	3313      	adds	r3, #19
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2200      	movs	r2, #0
 8009720:	62bb      	str	r3, [r7, #40]	; 0x28
 8009722:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009724:	f04f 0200 	mov.w	r2, #0
 8009728:	f04f 0300 	mov.w	r3, #0
 800972c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800972e:	020b      	lsls	r3, r1, #8
 8009730:	2200      	movs	r2, #0
 8009732:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009736:	4621      	mov	r1, r4
 8009738:	4311      	orrs	r1, r2
 800973a:	6239      	str	r1, [r7, #32]
 800973c:	4629      	mov	r1, r5
 800973e:	4319      	orrs	r1, r3
 8009740:	6279      	str	r1, [r7, #36]	; 0x24
 8009742:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009746:	3314      	adds	r3, #20
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2200      	movs	r2, #0
 800974e:	61bb      	str	r3, [r7, #24]
 8009750:	61fa      	str	r2, [r7, #28]
 8009752:	f04f 0200 	mov.w	r2, #0
 8009756:	f04f 0300 	mov.w	r3, #0
 800975a:	69b9      	ldr	r1, [r7, #24]
 800975c:	040b      	lsls	r3, r1, #16
 800975e:	2200      	movs	r2, #0
 8009760:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009764:	4621      	mov	r1, r4
 8009766:	4311      	orrs	r1, r2
 8009768:	6139      	str	r1, [r7, #16]
 800976a:	4629      	mov	r1, r5
 800976c:	4319      	orrs	r1, r3
 800976e:	6179      	str	r1, [r7, #20]
 8009770:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009774:	3315      	adds	r3, #21
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2200      	movs	r2, #0
 800977c:	60bb      	str	r3, [r7, #8]
 800977e:	60fa      	str	r2, [r7, #12]
 8009780:	f04f 0200 	mov.w	r2, #0
 8009784:	f04f 0300 	mov.w	r3, #0
 8009788:	68b9      	ldr	r1, [r7, #8]
 800978a:	060b      	lsls	r3, r1, #24
 800978c:	2200      	movs	r2, #0
 800978e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009792:	4621      	mov	r1, r4
 8009794:	4311      	orrs	r1, r2
 8009796:	6039      	str	r1, [r7, #0]
 8009798:	4629      	mov	r1, r5
 800979a:	4319      	orrs	r1, r3
 800979c:	6079      	str	r1, [r7, #4]
 800979e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80097a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80097a6:	e9c3 1204 	strd	r1, r2, [r3, #16]
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 80097aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097ae:	3316      	adds	r3, #22
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097b8:	3317      	adds	r3, #23
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	021b      	lsls	r3, r3, #8
 80097be:	431a      	orrs	r2, r3
 80097c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097c4:	3318      	adds	r3, #24
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	041b      	lsls	r3, r3, #16
 80097ca:	431a      	orrs	r2, r3
 80097cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097d0:	3319      	adds	r3, #25
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	061b      	lsls	r3, r3, #24
 80097d6:	431a      	orrs	r2, r3
 80097d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80097dc:	619a      	str	r2, [r3, #24]

  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 80097de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80097e2:	f103 001c 	add.w	r0, r3, #28
 80097e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097ea:	331a      	adds	r3, #26
 80097ec:	f107 02fe 	add.w	r2, r7, #254	; 0xfe
 80097f0:	4619      	mov	r1, r3
 80097f2:	f000 f816 	bl	8009822 <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription + (len * 2U) + 1U], &len);
 80097f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80097fa:	f203 101b 	addw	r0, r3, #283	; 0x11b
 80097fe:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	331b      	adds	r3, #27
 8009806:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800980a:	4413      	add	r3, r2
 800980c:	f107 02fe 	add.w	r2, r7, #254	; 0xfe
 8009810:	4619      	mov	r1, r3
 8009812:	f000 f806 	bl	8009822 <PTP_GetString>
}
 8009816:	bf00      	nop
 8009818:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800981c:	46bd      	mov	sp, r7
 800981e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009822 <PTP_GetString>:
  * @param  str: ascii string
  * @param  data: Device info structure
  * @retval None
  */
static void PTP_GetString(uint8_t *str, uint8_t *data, uint16_t *len)
{
 8009822:	b480      	push	{r7}
 8009824:	b087      	sub	sp, #28
 8009826:	af00      	add	r7, sp, #0
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	607a      	str	r2, [r7, #4]
  uint16_t strlength;
  uint16_t idx;

  *len = data[0];
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	b29a      	uxth	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	801a      	strh	r2, [r3, #0]
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	b29b      	uxth	r3, r3
 800983e:	005b      	lsls	r3, r3, #1
 8009840:	82bb      	strh	r3, [r7, #20]
  data ++; /* Adjust the offset ignoring the String Len */
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	3301      	adds	r3, #1
 8009846:	60bb      	str	r3, [r7, #8]

  for (idx = 0U; idx < strlength; idx += 2U)
 8009848:	2300      	movs	r3, #0
 800984a:	82fb      	strh	r3, [r7, #22]
 800984c:	e00b      	b.n	8009866 <PTP_GetString+0x44>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str = data[idx];
 800984e:	8afb      	ldrh	r3, [r7, #22]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	4413      	add	r3, r2
 8009854:	781a      	ldrb	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	701a      	strb	r2, [r3, #0]
    str++;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3301      	adds	r3, #1
 800985e:	60fb      	str	r3, [r7, #12]
  for (idx = 0U; idx < strlength; idx += 2U)
 8009860:	8afb      	ldrh	r3, [r7, #22]
 8009862:	3302      	adds	r3, #2
 8009864:	82fb      	strh	r3, [r7, #22]
 8009866:	8afa      	ldrh	r2, [r7, #22]
 8009868:	8abb      	ldrh	r3, [r7, #20]
 800986a:	429a      	cmp	r2, r3
 800986c:	d3ef      	bcc.n	800984e <PTP_GetString+0x2c>
  }
  *str = 0U; /* mark end of string */
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	701a      	strb	r2, [r3, #0]
}
 8009874:	bf00      	nop
 8009876:	371c      	adds	r7, #28
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray16(uint16_t *array, uint8_t *data, uint32_t offset)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 800988c:	2300      	movs	r3, #0
 800988e:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4413      	add	r3, r2
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	4619      	mov	r1, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	3301      	adds	r3, #1
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	4413      	add	r3, r2
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	021b      	lsls	r3, r3, #8
 80098a6:	ea41 0203 	orr.w	r2, r1, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	3302      	adds	r3, #2
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	440b      	add	r3, r1
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	041b      	lsls	r3, r3, #16
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3303      	adds	r3, #3
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	440b      	add	r3, r1
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	061b      	lsls	r3, r3, #24
 80098c4:	4313      	orrs	r3, r2
 80098c6:	613b      	str	r3, [r7, #16]
  while (size > idx)
 80098c8:	e010      	b.n	80098ec <PTP_GetArray16+0x6c>
  {
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	3302      	adds	r3, #2
 80098ce:	005a      	lsls	r2, r3, #1
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4413      	add	r3, r2
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	4413      	add	r3, r2
 80098d8:	7819      	ldrb	r1, [r3, #0]
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	4413      	add	r3, r2
 80098e2:	b28a      	uxth	r2, r1
 80098e4:	801a      	strh	r2, [r3, #0]
    idx++;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	3301      	adds	r3, #1
 80098ea:	617b      	str	r3, [r7, #20]
  while (size > idx)
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d8ea      	bhi.n	80098ca <PTP_GetArray16+0x4a>
  }
  return size;
 80098f4:	693b      	ldr	r3, [r7, #16]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	371c      	adds	r7, #28
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <PTP_GetArray32>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray32(uint32_t *array, uint8_t *data, uint32_t offset)
{
 8009902:	b480      	push	{r7}
 8009904:	b087      	sub	sp, #28
 8009906:	af00      	add	r7, sp, #0
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4413      	add	r3, r2
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	4619      	mov	r1, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	3301      	adds	r3, #1
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	4413      	add	r3, r2
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	021b      	lsls	r3, r3, #8
 8009928:	ea41 0203 	orr.w	r2, r1, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3302      	adds	r3, #2
 8009930:	68b9      	ldr	r1, [r7, #8]
 8009932:	440b      	add	r3, r1
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	041b      	lsls	r3, r3, #16
 8009938:	431a      	orrs	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3303      	adds	r3, #3
 800993e:	68b9      	ldr	r1, [r7, #8]
 8009940:	440b      	add	r3, r1
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	061b      	lsls	r3, r3, #24
 8009946:	4313      	orrs	r3, r2
 8009948:	613b      	str	r3, [r7, #16]
  while (size > idx)
 800994a:	e033      	b.n	80099b4 <PTP_GetArray32+0xb2>
  {
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	3301      	adds	r3, #1
 8009950:	009a      	lsls	r2, r3, #2
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4413      	add	r3, r2
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	4413      	add	r3, r2
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	4619      	mov	r1, r3
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	3301      	adds	r3, #1
 8009962:	009a      	lsls	r2, r3, #2
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4413      	add	r3, r2
 8009968:	3301      	adds	r3, #1
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	4413      	add	r3, r2
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	021b      	lsls	r3, r3, #8
 8009972:	ea41 0203 	orr.w	r2, r1, r3
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	3301      	adds	r3, #1
 800997a:	0099      	lsls	r1, r3, #2
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	440b      	add	r3, r1
 8009980:	3302      	adds	r3, #2
 8009982:	68b9      	ldr	r1, [r7, #8]
 8009984:	440b      	add	r3, r1
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	041b      	lsls	r3, r3, #16
 800998a:	ea42 0103 	orr.w	r1, r2, r3
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	3301      	adds	r3, #1
 8009992:	009a      	lsls	r2, r3, #2
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4413      	add	r3, r2
 8009998:	3303      	adds	r3, #3
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	4413      	add	r3, r2
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	061a      	lsls	r2, r3, #24
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	4403      	add	r3, r0
 80099aa:	430a      	orrs	r2, r1
 80099ac:	601a      	str	r2, [r3, #0]
    idx++;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	3301      	adds	r3, #1
 80099b2:	617b      	str	r3, [r7, #20]
  while (size > idx)
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d8c7      	bhi.n	800994c <PTP_GetArray32+0x4a>
  }
  return size;
 80099bc:	693b      	ldr	r3, [r7, #16]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <USBH_PTP_OpenSession>:
  * @param  phost: Host handle
  * @param  session: Session ID (MUST BE > 0U)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession(USBH_HandleTypeDef *phost, uint32_t session)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b08e      	sub	sp, #56	; 0x38
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80099d4:	2301      	movs	r3, #1
 80099d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ea:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d002      	beq.n	80099f8 <USBH_PTP_OpenSession+0x2e>
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d041      	beq.n	8009a7a <USBH_PTP_OpenSession+0xb0>
    case PTP_REQ_WAIT:
      status = USBH_PTP_Process(phost);
      break;

    default:
      break;
 80099f6:	e047      	b.n	8009a88 <USBH_PTP_OpenSession+0xbe>
      MTP_Handle->ptp.transaction_id = 0x00000000U;
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80099fe:	461a      	mov	r2, r3
 8009a00:	2300      	movs	r3, #0
 8009a02:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
      MTP_Handle->ptp.session_id = session;
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 8009a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
      ptp_container.Code = PTP_OC_OpenSession;
 8009a22:	f241 0302 	movw	r3, #4098	; 0x1002
 8009a26:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = session;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009a32:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8009a36:	1c5a      	adds	r2, r3, #1
 8009a38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a3a:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8009a3e:	f8c1 21a4 	str.w	r2, [r1, #420]	; 0x1a4
 8009a42:	617b      	str	r3, [r7, #20]
      ptp_container.Param1 = session;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	61bb      	str	r3, [r7, #24]
      ptp_container.Nparam = 1U;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 8009a4e:	f107 030c 	add.w	r3, r7, #12
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7ff fa5d 	bl	8008f14 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8009a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      status = USBH_BUSY;
 8009a72:	2301      	movs	r3, #1
 8009a74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8009a78:	e006      	b.n	8009a88 <USBH_PTP_OpenSession+0xbe>
      status = USBH_PTP_Process(phost);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7fe ffb4 	bl	80089e8 <USBH_PTP_Process>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8009a86:	bf00      	nop
  }
  return status;
 8009a88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3738      	adds	r7, #56	; 0x38
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBH_PTP_GetDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08e      	sub	sp, #56	; 0x38
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8009aaa:	69db      	ldr	r3, [r3, #28]
 8009aac:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab4:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d002      	beq.n	8009ac2 <USBH_PTP_GetDeviceInfo+0x2e>
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d053      	beq.n	8009b68 <USBH_PTP_GetDeviceInfo+0xd4>
        PTP_DecodeDeviceInfo(phost, dev_info);
      }
      break;

    default:
      break;
 8009ac0:	e061      	b.n	8009b86 <USBH_PTP_GetDeviceInfo+0xf2>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009ac8:	461a      	mov	r2, r3
 8009aca:	2302      	movs	r3, #2
 8009acc:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ada:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8009ade:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009ae8:	461a      	mov	r2, r3
 8009aea:	2300      	movs	r3, #0
 8009aec:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 8009af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009af6:	461a      	mov	r2, r3
 8009af8:	2300      	movs	r3, #0
 8009afa:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 8009afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009b04:	461a      	mov	r2, r3
 8009b06:	2300      	movs	r3, #0
 8009b08:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 8009b0c:	f241 0301 	movw	r3, #4097	; 0x1001
 8009b10:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009b18:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009b1c:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009b24:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8009b28:	1c5a      	adds	r2, r3, #1
 8009b2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b2c:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8009b30:	f8c1 21a4 	str.w	r2, [r1, #420]	; 0x1a4
 8009b34:	617b      	str	r3, [r7, #20]
      ptp_container.Nparam = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 8009b3c:	f107 030c 	add.w	r3, r7, #12
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff f9e6 	bl	8008f14 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8009b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8009b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      status = USBH_BUSY;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8009b66:	e00e      	b.n	8009b86 <USBH_PTP_GetDeviceInfo+0xf2>
      status = USBH_PTP_Process(phost);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7fe ff3d 	bl	80089e8 <USBH_PTP_Process>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status == USBH_OK)
 8009b74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d103      	bne.n	8009b84 <USBH_PTP_GetDeviceInfo+0xf0>
        PTP_DecodeDeviceInfo(phost, dev_info);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7ff fb00 	bl	8009184 <PTP_DecodeDeviceInfo>
      break;
 8009b84:	bf00      	nop
  }
  return status;
 8009b86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3738      	adds	r7, #56	; 0x38
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <USBH_PTP_GetStorageIds>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b08e      	sub	sp, #56	; 0x38
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	633b      	str	r3, [r7, #48]	; 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8009bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb2:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d002      	beq.n	8009bc0 <USBH_PTP_GetStorageIds+0x2e>
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d053      	beq.n	8009c66 <USBH_PTP_GetStorageIds+0xd4>
        PTP_GetStorageIDs(phost, storage_ids);
      }
      break;

    default:
      break;
 8009bbe:	e061      	b.n	8009c84 <USBH_PTP_GetStorageIds+0xf2>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	2302      	movs	r3, #2
 8009bca:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 8009bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd0:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bd8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8009bdc:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009be6:	461a      	mov	r2, r3
 8009be8:	2300      	movs	r3, #0
 8009bea:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009c02:	461a      	mov	r2, r3
 8009c04:	2300      	movs	r3, #0
 8009c06:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetStorageIDs;
 8009c0a:	f241 0304 	movw	r3, #4100	; 0x1004
 8009c0e:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8009c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009c16:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009c1a:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009c22:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8009c26:	1c5a      	adds	r2, r3, #1
 8009c28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c2a:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8009c2e:	f8c1 21a4 	str.w	r2, [r1, #420]	; 0x1a4
 8009c32:	617b      	str	r3, [r7, #20]
      ptp_container.Nparam = 0U;
 8009c34:	2300      	movs	r3, #0
 8009c36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 8009c3a:	f107 030c 	add.w	r3, r7, #12
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff f967 	bl	8008f14 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c58:	2202      	movs	r2, #2
 8009c5a:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      status = USBH_BUSY;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      break;
 8009c64:	e00e      	b.n	8009c84 <USBH_PTP_GetStorageIds+0xf2>
      status = USBH_PTP_Process(phost);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7fe febe 	bl	80089e8 <USBH_PTP_Process>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status == USBH_OK)
 8009c72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d103      	bne.n	8009c82 <USBH_PTP_GetStorageIds+0xf0>
        PTP_GetStorageIDs(phost, storage_ids);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7ff fb98 	bl	80093b2 <PTP_GetStorageIDs>
      break;
 8009c82:	bf00      	nop
  }
  return status;
 8009c84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3738      	adds	r7, #56	; 0x38
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBH_PTP_GetStorageInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageInfo(USBH_HandleTypeDef *phost,
                                           uint32_t storage_id,
                                           PTP_StorageInfoTypedef *storage_info)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b090      	sub	sp, #64	; 0x40
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	63bb      	str	r3, [r7, #56]	; 0x38
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 8009cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb2:	f893 3d61 	ldrb.w	r3, [r3, #3425]	; 0xd61
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d002      	beq.n	8009cc0 <USBH_PTP_GetStorageInfo+0x30>
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d055      	beq.n	8009d6a <USBH_PTP_GetStorageInfo+0xda>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
      }
      break;

    default:
      break;
 8009cbe:	e064      	b.n	8009d8a <USBH_PTP_GetStorageInfo+0xfa>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	2302      	movs	r3, #2
 8009cca:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 8009cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd0:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cd8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8009cdc:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	2300      	movs	r3, #0
 8009cea:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 8009cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009d02:	461a      	mov	r2, r3
 8009d04:	2300      	movs	r3, #0
 8009d06:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetStorageInfo;
 8009d0a:	f241 0305 	movw	r3, #4101	; 0x1005
 8009d0e:	82bb      	strh	r3, [r7, #20]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 8009d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009d16:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009d1a:	61bb      	str	r3, [r7, #24]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009d22:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8009d26:	1c5a      	adds	r2, r3, #1
 8009d28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d2a:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8009d2e:	f8c1 21a4 	str.w	r2, [r1, #420]	; 0x1a4
 8009d32:	61fb      	str	r3, [r7, #28]
      ptp_container.Param1 = storage_id;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	623b      	str	r3, [r7, #32]
      ptp_container.Nparam = 1U;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 8009d3e:	f107 0314 	add.w	r3, r7, #20
 8009d42:	4619      	mov	r1, r3
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f7ff f8e5 	bl	8008f14 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 2d60 	strb.w	r2, [r3, #3424]	; 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 8009d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61
      status = USBH_BUSY;
 8009d62:	2301      	movs	r3, #1
 8009d64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 8009d68:	e00f      	b.n	8009d8a <USBH_PTP_GetStorageInfo+0xfa>
      status = USBH_PTP_Process(phost);
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f7fe fe3c 	bl	80089e8 <USBH_PTP_Process>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      if (status == USBH_OK)
 8009d76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d104      	bne.n	8009d88 <USBH_PTP_GetStorageInfo+0xf8>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	68b9      	ldr	r1, [r7, #8]
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7ff fb32 	bl	80093ec <PTP_GetStorageInfo>
      break;
 8009d88:	bf00      	nop
  }
  return status;
 8009d8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3740      	adds	r7, #64	; 0x40
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	60f8      	str	r0, [r7, #12]
 8009d9e:	60b9      	str	r1, [r7, #8]
 8009da0:	4613      	mov	r3, r2
 8009da2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009daa:	2302      	movs	r3, #2
 8009dac:	e029      	b.n	8009e02 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	79fa      	ldrb	r2, [r7, #7]
 8009db2:	f883 259c 	strb.w	r2, [r3, #1436]	; 0x59c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
  phost->ClassNumber = 0U;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f000 f81f 	bl	8009e0a <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f001 fdea 	bl	800b9d4 <USBH_LL_Init>

  return USBH_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b085      	sub	sp, #20
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009e12:	2300      	movs	r3, #0
 8009e14:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009e16:	2300      	movs	r3, #0
 8009e18:	60fb      	str	r3, [r7, #12]
 8009e1a:	e00a      	b.n	8009e32 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	2200      	movs	r2, #0
 8009e2a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2b0f      	cmp	r3, #15
 8009e36:	d9f1      	bls.n	8009e1c <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60fb      	str	r3, [r7, #12]
 8009e3c:	e009      	b.n	8009e52 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e48:	2200      	movs	r2, #0
 8009e4a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	60fb      	str	r3, [r7, #12]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e58:	d3f1      	bcc.n	8009e3e <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594

  phost->Control.state = CTRL_SETUP;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2240      	movs	r2, #64	; 0x40
 8009e7e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d017      	beq.n	8009ef8 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8009ece:	2b04      	cmp	r3, #4
 8009ed0:	d80f      	bhi.n	8009ef2 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 8009ed8:	1c59      	adds	r1, r3, #1
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	f503 73a7 	add.w	r3, r3, #334	; 0x14e
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	73fb      	strb	r3, [r7, #15]
 8009ef0:	e004      	b.n	8009efc <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	73fb      	strb	r3, [r7, #15]
 8009ef6:	e001      	b.n	8009efc <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009ef8:	2302      	movs	r3, #2
 8009efa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	460b      	mov	r3, r1
 8009f14:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009f20:	78fa      	ldrb	r2, [r7, #3]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d204      	bcs.n	8009f30 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	78fa      	ldrb	r2, [r7, #3]
 8009f2a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009f2e:	e001      	b.n	8009f34 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009f30:	2302      	movs	r3, #2
 8009f32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b087      	sub	sp, #28
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	4608      	mov	r0, r1
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	461a      	mov	r2, r3
 8009f50:	4603      	mov	r3, r0
 8009f52:	70fb      	strb	r3, [r7, #3]
 8009f54:	460b      	mov	r3, r1
 8009f56:	70bb      	strb	r3, [r7, #2]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009f60:	2300      	movs	r3, #0
 8009f62:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009f6a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009f6c:	e025      	b.n	8009fba <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	2232      	movs	r2, #50	; 0x32
 8009f72:	fb02 f303 	mul.w	r3, r2, r3
 8009f76:	3308      	adds	r3, #8
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	3302      	adds	r3, #2
 8009f7e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	795b      	ldrb	r3, [r3, #5]
 8009f84:	78fa      	ldrb	r2, [r7, #3]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d002      	beq.n	8009f90 <USBH_FindInterface+0x4e>
 8009f8a:	78fb      	ldrb	r3, [r7, #3]
 8009f8c:	2bff      	cmp	r3, #255	; 0xff
 8009f8e:	d111      	bne.n	8009fb4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009f94:	78ba      	ldrb	r2, [r7, #2]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d002      	beq.n	8009fa0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009f9a:	78bb      	ldrb	r3, [r7, #2]
 8009f9c:	2bff      	cmp	r3, #255	; 0xff
 8009f9e:	d109      	bne.n	8009fb4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009fa4:	787a      	ldrb	r2, [r7, #1]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d002      	beq.n	8009fb0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009faa:	787b      	ldrb	r3, [r7, #1]
 8009fac:	2bff      	cmp	r3, #255	; 0xff
 8009fae:	d101      	bne.n	8009fb4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
 8009fb2:	e006      	b.n	8009fc2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
 8009fbc:	2b09      	cmp	r3, #9
 8009fbe:	d9d6      	bls.n	8009f6e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009fc0:	23ff      	movs	r3, #255	; 0xff
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b087      	sub	sp, #28
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009fec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009fee:	e017      	b.n	800a020 <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	2232      	movs	r2, #50	; 0x32
 8009ff4:	fb02 f303 	mul.w	r3, r2, r3
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	3302      	adds	r3, #2
 800a000:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	789b      	ldrb	r3, [r3, #2]
 800a006:	78fa      	ldrb	r2, [r7, #3]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d106      	bne.n	800a01a <USBH_FindInterfaceIndex+0x4c>
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	78db      	ldrb	r3, [r3, #3]
 800a010:	78ba      	ldrb	r2, [r7, #2]
 800a012:	429a      	cmp	r2, r3
 800a014:	d101      	bne.n	800a01a <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 800a016:	7dfb      	ldrb	r3, [r7, #23]
 800a018:	e006      	b.n	800a028 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	3301      	adds	r3, #1
 800a01e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	2b09      	cmp	r3, #9
 800a024:	d9e4      	bls.n	8009ff0 <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 800a026:	23ff      	movs	r3, #255	; 0xff
}
 800a028:	4618      	mov	r0, r3
 800a02a:	371c      	adds	r7, #28
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f001 fd05 	bl	800ba4c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a042:	2101      	movs	r1, #1
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f001 fe1e 	bl	800bc86 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b088      	sub	sp, #32
 800a058:	af04      	add	r7, sp, #16
 800a05a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a05c:	2302      	movs	r3, #2
 800a05e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d102      	bne.n	800a076 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2203      	movs	r2, #3
 800a074:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b0b      	cmp	r3, #11
 800a07e:	f200 81c0 	bhi.w	800a402 <USBH_Process+0x3ae>
 800a082:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <USBH_Process+0x34>)
 800a084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a088:	0800a0b9 	.word	0x0800a0b9
 800a08c:	0800a0eb 	.word	0x0800a0eb
 800a090:	0800a153 	.word	0x0800a153
 800a094:	0800a39d 	.word	0x0800a39d
 800a098:	0800a403 	.word	0x0800a403
 800a09c:	0800a1f7 	.word	0x0800a1f7
 800a0a0:	0800a343 	.word	0x0800a343
 800a0a4:	0800a22d 	.word	0x0800a22d
 800a0a8:	0800a24d 	.word	0x0800a24d
 800a0ac:	0800a26d 	.word	0x0800a26d
 800a0b0:	0800a2b1 	.word	0x0800a2b1
 800a0b4:	0800a385 	.word	0x0800a385
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 81a0 	beq.w	800a406 <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a0cc:	20c8      	movs	r0, #200	; 0xc8
 800a0ce:	f001 fe48 	bl	800bd62 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f001 fd17 	bl	800bb06 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a0e8:	e18d      	b.n	800a406 <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d107      	bne.n	800a104 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a102:	e18f      	b.n	800a424 <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
 800a10a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a10e:	d914      	bls.n	800a13a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a116:	3301      	adds	r3, #1
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a126:	2b03      	cmp	r3, #3
 800a128:	d903      	bls.n	800a132 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	220d      	movs	r2, #13
 800a12e:	701a      	strb	r2, [r3, #0]
      break;
 800a130:	e178      	b.n	800a424 <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	701a      	strb	r2, [r3, #0]
      break;
 800a138:	e174      	b.n	800a424 <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3598 	ldr.w	r3, [r3, #1432]	; 0x598
 800a140:	f103 020a 	add.w	r2, r3, #10
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
          USBH_Delay(10U);
 800a14a:	200a      	movs	r0, #10
 800a14c:	f001 fe09 	bl	800bd62 <USBH_Delay>
      break;
 800a150:	e168      	b.n	800a424 <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d005      	beq.n	800a168 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 800a162:	2104      	movs	r1, #4
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a168:	2064      	movs	r0, #100	; 0x64
 800a16a:	f001 fdfa 	bl	800bd62 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f001 fca2 	bl	800bab8 <USBH_LL_GetSpeed>
 800a174:	4603      	mov	r3, r0
 800a176:	461a      	mov	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2205      	movs	r2, #5
 800a182:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a184:	2100      	movs	r1, #0
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f001 fa8b 	bl	800b6a2 <USBH_AllocPipe>
 800a18c:	4603      	mov	r3, r0
 800a18e:	461a      	mov	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a194:	2180      	movs	r1, #128	; 0x80
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f001 fa83 	bl	800b6a2 <USBH_AllocPipe>
 800a19c:	4603      	mov	r3, r0
 800a19e:	461a      	mov	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	7919      	ldrb	r1, [r3, #4]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a1b8:	b292      	uxth	r2, r2
 800a1ba:	9202      	str	r2, [sp, #8]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	9201      	str	r2, [sp, #4]
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2280      	movs	r2, #128	; 0x80
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f001 fa3c 	bl	800b644 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	7959      	ldrb	r1, [r3, #5]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a1e0:	b292      	uxth	r2, r2
 800a1e2:	9202      	str	r2, [sp, #8]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	9201      	str	r2, [sp, #4]
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f001 fa28 	bl	800b644 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a1f4:	e116      	b.n	800a424 <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f91a 	bl	800a430 <USBH_HandleEnum>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a200:	7bbb      	ldrb	r3, [r7, #14]
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b00      	cmp	r3, #0
 800a206:	f040 8100 	bne.w	800a40a <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d103      	bne.n	800a224 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2208      	movs	r2, #8
 800a220:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a222:	e0f2      	b.n	800a40a <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2207      	movs	r2, #7
 800a228:	701a      	strb	r2, [r3, #0]
      break;
 800a22a:	e0ee      	b.n	800a40a <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 80eb 	beq.w	800a40e <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 800a23e:	2101      	movs	r1, #1
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2208      	movs	r2, #8
 800a248:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a24a:	e0e0      	b.n	800a40e <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a252:	b29b      	uxth	r3, r3
 800a254:	4619      	mov	r1, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fc2e 	bl	800aab8 <USBH_SetCfg>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f040 80d7 	bne.w	800a412 <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2209      	movs	r2, #9
 800a268:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a26a:	e0d2      	b.n	800a412 <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a272:	f003 0320 	and.w	r3, r3, #32
 800a276:	2b00      	cmp	r3, #0
 800a278:	d016      	beq.n	800a2a8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a27a:	2101      	movs	r1, #1
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fc65 	bl	800ab4c <USBH_SetFeature>
 800a282:	4603      	mov	r3, r0
 800a284:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a286:	7bbb      	ldrb	r3, [r7, #14]
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d103      	bne.n	800a296 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	220a      	movs	r2, #10
 800a292:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a294:	e0bf      	b.n	800a416 <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 800a296:	7bbb      	ldrb	r3, [r7, #14]
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	f040 80bb 	bne.w	800a416 <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	220a      	movs	r2, #10
 800a2a4:	701a      	strb	r2, [r3, #0]
      break;
 800a2a6:	e0b6      	b.n	800a416 <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	220a      	movs	r2, #10
 800a2ac:	701a      	strb	r2, [r3, #0]
      break;
 800a2ae:	e0b2      	b.n	800a416 <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f000 80af 	beq.w	800a41a <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
 800a2c8:	e018      	b.n	800a2fc <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a2ca:	7bfa      	ldrb	r2, [r7, #15]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f502 72a7 	add.w	r2, r2, #334	; 0x14e
 800a2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d6:	791a      	ldrb	r2, [r3, #4]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d109      	bne.n	800a2f6 <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a2e2:	7bfa      	ldrb	r2, [r7, #15]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f502 72a7 	add.w	r2, r2, #334	; 0x14e
 800a2ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
            break;
 800a2f4:	e005      	b.n	800a302 <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	73fb      	strb	r3, [r7, #15]
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d9e3      	bls.n	800a2ca <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d016      	beq.n	800a33a <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	4798      	blx	r3
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d109      	bne.n	800a332 <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2206      	movs	r2, #6
 800a322:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 800a32a:	2103      	movs	r1, #3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a330:	e073      	b.n	800a41a <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	220d      	movs	r2, #13
 800a336:	701a      	strb	r2, [r3, #0]
      break;
 800a338:	e06f      	b.n	800a41a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	220d      	movs	r2, #13
 800a33e:	701a      	strb	r2, [r3, #0]
      break;
 800a340:	e06b      	b.n	800a41a <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d017      	beq.n	800a37c <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	4798      	blx	r3
 800a358:	4603      	mov	r3, r0
 800a35a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a35c:	7bbb      	ldrb	r3, [r7, #14]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b00      	cmp	r3, #0
 800a362:	d103      	bne.n	800a36c <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	220b      	movs	r2, #11
 800a368:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a36a:	e058      	b.n	800a41e <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	2b02      	cmp	r3, #2
 800a372:	d154      	bne.n	800a41e <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	220d      	movs	r2, #13
 800a378:	701a      	strb	r2, [r3, #0]
      break;
 800a37a:	e050      	b.n	800a41e <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	220d      	movs	r2, #13
 800a380:	701a      	strb	r2, [r3, #0]
      break;
 800a382:	e04c      	b.n	800a41e <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d049      	beq.n	800a422 <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800a394:	695b      	ldr	r3, [r3, #20]
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	4798      	blx	r3
      }
      break;
 800a39a:	e042      	b.n	800a422 <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7ff fd30 	bl	8009e0a <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d009      	beq.n	800a3c8 <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
      }

      if (phost->pUser != NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d005      	beq.n	800a3de <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 800a3d8:	2105      	movs	r1, #5
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d107      	bne.n	800a3fa <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff fe1e 	bl	800a034 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a3f8:	e014      	b.n	800a424 <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f001 fb26 	bl	800ba4c <USBH_LL_Start>
      break;
 800a400:	e010      	b.n	800a424 <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 800a402:	bf00      	nop
 800a404:	e00e      	b.n	800a424 <USBH_Process+0x3d0>
      break;
 800a406:	bf00      	nop
 800a408:	e00c      	b.n	800a424 <USBH_Process+0x3d0>
      break;
 800a40a:	bf00      	nop
 800a40c:	e00a      	b.n	800a424 <USBH_Process+0x3d0>
    break;
 800a40e:	bf00      	nop
 800a410:	e008      	b.n	800a424 <USBH_Process+0x3d0>
      break;
 800a412:	bf00      	nop
 800a414:	e006      	b.n	800a424 <USBH_Process+0x3d0>
      break;
 800a416:	bf00      	nop
 800a418:	e004      	b.n	800a424 <USBH_Process+0x3d0>
      break;
 800a41a:	bf00      	nop
 800a41c:	e002      	b.n	800a424 <USBH_Process+0x3d0>
      break;
 800a41e:	bf00      	nop
 800a420:	e000      	b.n	800a424 <USBH_Process+0x3d0>
      break;
 800a422:	bf00      	nop
  }
  return USBH_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop

0800a430 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af04      	add	r7, sp, #16
 800a436:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a438:	2301      	movs	r3, #1
 800a43a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a43c:	2301      	movs	r3, #1
 800a43e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	785b      	ldrb	r3, [r3, #1]
 800a444:	2b07      	cmp	r3, #7
 800a446:	f200 81c1 	bhi.w	800a7cc <USBH_HandleEnum+0x39c>
 800a44a:	a201      	add	r2, pc, #4	; (adr r2, 800a450 <USBH_HandleEnum+0x20>)
 800a44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a450:	0800a471 	.word	0x0800a471
 800a454:	0800a52f 	.word	0x0800a52f
 800a458:	0800a599 	.word	0x0800a599
 800a45c:	0800a627 	.word	0x0800a627
 800a460:	0800a691 	.word	0x0800a691
 800a464:	0800a701 	.word	0x0800a701
 800a468:	0800a747 	.word	0x0800a747
 800a46c:	0800a78d 	.word	0x0800a78d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a470:	2108      	movs	r1, #8
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fa50 	bl	800a918 <USBH_Get_DevDesc>
 800a478:	4603      	mov	r3, r0
 800a47a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a47c:	7bbb      	ldrb	r3, [r7, #14]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d130      	bne.n	800a4e4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	7919      	ldrb	r1, [r3, #4]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a4a6:	b292      	uxth	r2, r2
 800a4a8:	9202      	str	r2, [sp, #8]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	9201      	str	r2, [sp, #4]
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2280      	movs	r2, #128	; 0x80
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f001 f8c5 	bl	800b644 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	7959      	ldrb	r1, [r3, #5]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a4ce:	b292      	uxth	r2, r2
 800a4d0:	9202      	str	r2, [sp, #8]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	9201      	str	r2, [sp, #4]
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2200      	movs	r2, #0
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f001 f8b1 	bl	800b644 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a4e2:	e175      	b.n	800a7d0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4e4:	7bbb      	ldrb	r3, [r7, #14]
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	f040 8172 	bne.w	800a7d0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a502:	2b03      	cmp	r3, #3
 800a504:	d903      	bls.n	800a50e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	220d      	movs	r2, #13
 800a50a:	701a      	strb	r2, [r3, #0]
      break;
 800a50c:	e160      	b.n	800a7d0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	795b      	ldrb	r3, [r3, #5]
 800a512:	4619      	mov	r1, r3
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f001 f8e6 	bl	800b6e6 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	791b      	ldrb	r3, [r3, #4]
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f001 f8e0 	bl	800b6e6 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	701a      	strb	r2, [r3, #0]
      break;
 800a52c:	e150      	b.n	800a7d0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a52e:	2112      	movs	r1, #18
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f9f1 	bl	800a918 <USBH_Get_DevDesc>
 800a536:	4603      	mov	r3, r0
 800a538:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a53a:	7bbb      	ldrb	r3, [r7, #14]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d103      	bne.n	800a548 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a546:	e145      	b.n	800a7d4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a548:	7bbb      	ldrb	r3, [r7, #14]
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	f040 8142 	bne.w	800a7d4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a556:	3301      	adds	r3, #1
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a566:	2b03      	cmp	r3, #3
 800a568:	d903      	bls.n	800a572 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	220d      	movs	r2, #13
 800a56e:	701a      	strb	r2, [r3, #0]
      break;
 800a570:	e130      	b.n	800a7d4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	795b      	ldrb	r3, [r3, #5]
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f001 f8b4 	bl	800b6e6 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	791b      	ldrb	r3, [r3, #4]
 800a582:	4619      	mov	r1, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 f8ae 	bl	800b6e6 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	701a      	strb	r2, [r3, #0]
      break;
 800a596:	e11d      	b.n	800a7d4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a598:	2101      	movs	r1, #1
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fa68 	bl	800aa70 <USBH_SetAddress>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5a4:	7bbb      	ldrb	r3, [r7, #14]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d132      	bne.n	800a610 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a5aa:	2002      	movs	r0, #2
 800a5ac:	f001 fbd9 	bl	800bd62 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2203      	movs	r2, #3
 800a5bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	7919      	ldrb	r1, [r3, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a5d2:	b292      	uxth	r2, r2
 800a5d4:	9202      	str	r2, [sp, #8]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	9201      	str	r2, [sp, #4]
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2280      	movs	r2, #128	; 0x80
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f001 f82f 	bl	800b644 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	7959      	ldrb	r1, [r3, #5]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5fa:	b292      	uxth	r2, r2
 800a5fc:	9202      	str	r2, [sp, #8]
 800a5fe:	2200      	movs	r2, #0
 800a600:	9201      	str	r2, [sp, #4]
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	4603      	mov	r3, r0
 800a606:	2200      	movs	r2, #0
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 f81b 	bl	800b644 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a60e:	e0e3      	b.n	800a7d8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a610:	7bbb      	ldrb	r3, [r7, #14]
 800a612:	2b03      	cmp	r3, #3
 800a614:	f040 80e0 	bne.w	800a7d8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	220d      	movs	r2, #13
 800a61c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	705a      	strb	r2, [r3, #1]
      break;
 800a624:	e0d8      	b.n	800a7d8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a626:	2109      	movs	r1, #9
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f99d 	bl	800a968 <USBH_Get_CfgDesc>
 800a62e:	4603      	mov	r3, r0
 800a630:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a632:	7bbb      	ldrb	r3, [r7, #14]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d103      	bne.n	800a640 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2204      	movs	r2, #4
 800a63c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a63e:	e0cd      	b.n	800a7dc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a640:	7bbb      	ldrb	r3, [r7, #14]
 800a642:	2b03      	cmp	r3, #3
 800a644:	f040 80ca 	bne.w	800a7dc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a64e:	3301      	adds	r3, #1
 800a650:	b2da      	uxtb	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a65e:	2b03      	cmp	r3, #3
 800a660:	d903      	bls.n	800a66a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	220d      	movs	r2, #13
 800a666:	701a      	strb	r2, [r3, #0]
      break;
 800a668:	e0b8      	b.n	800a7dc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	795b      	ldrb	r3, [r3, #5]
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 f838 	bl	800b6e6 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	791b      	ldrb	r3, [r3, #4]
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f001 f832 	bl	800b6e6 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	701a      	strb	r2, [r3, #0]
      break;
 800a68e:	e0a5      	b.n	800a7dc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a696:	4619      	mov	r1, r3
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f965 	bl	800a968 <USBH_Get_CfgDesc>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d103      	bne.n	800a6b0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2205      	movs	r2, #5
 800a6ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a6ae:	e097      	b.n	800a7e0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	f040 8094 	bne.w	800a7e0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6be:	3301      	adds	r3, #1
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d903      	bls.n	800a6da <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	220d      	movs	r2, #13
 800a6d6:	701a      	strb	r2, [r3, #0]
      break;
 800a6d8:	e082      	b.n	800a7e0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	795b      	ldrb	r3, [r3, #5]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f001 f800 	bl	800b6e6 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	791b      	ldrb	r3, [r3, #4]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fffa 	bl	800b6e6 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	701a      	strb	r2, [r3, #0]
      break;
 800a6fe:	e06f      	b.n	800a7e0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a706:	2b00      	cmp	r3, #0
 800a708:	d019      	beq.n	800a73e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a716:	23ff      	movs	r3, #255	; 0xff
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f949 	bl	800a9b0 <USBH_Get_StringDesc>
 800a71e:	4603      	mov	r3, r0
 800a720:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a722:	7bbb      	ldrb	r3, [r7, #14]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d103      	bne.n	800a730 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2206      	movs	r2, #6
 800a72c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a72e:	e059      	b.n	800a7e4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a730:	7bbb      	ldrb	r3, [r7, #14]
 800a732:	2b03      	cmp	r3, #3
 800a734:	d156      	bne.n	800a7e4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2206      	movs	r2, #6
 800a73a:	705a      	strb	r2, [r3, #1]
      break;
 800a73c:	e052      	b.n	800a7e4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2206      	movs	r2, #6
 800a742:	705a      	strb	r2, [r3, #1]
      break;
 800a744:	e04e      	b.n	800a7e4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d019      	beq.n	800a784 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a75c:	23ff      	movs	r3, #255	; 0xff
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f926 	bl	800a9b0 <USBH_Get_StringDesc>
 800a764:	4603      	mov	r3, r0
 800a766:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a768:	7bbb      	ldrb	r3, [r7, #14]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d103      	bne.n	800a776 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2207      	movs	r2, #7
 800a772:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a774:	e038      	b.n	800a7e8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d135      	bne.n	800a7e8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2207      	movs	r2, #7
 800a780:	705a      	strb	r2, [r3, #1]
      break;
 800a782:	e031      	b.n	800a7e8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2207      	movs	r2, #7
 800a788:	705a      	strb	r2, [r3, #1]
      break;
 800a78a:	e02d      	b.n	800a7e8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a792:	2b00      	cmp	r3, #0
 800a794:	d017      	beq.n	800a7c6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a7a2:	23ff      	movs	r3, #255	; 0xff
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f903 	bl	800a9b0 <USBH_Get_StringDesc>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d102      	bne.n	800a7ba <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a7b8:	e018      	b.n	800a7ec <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7ba:	7bbb      	ldrb	r3, [r7, #14]
 800a7bc:	2b03      	cmp	r3, #3
 800a7be:	d115      	bne.n	800a7ec <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7c4:	e012      	b.n	800a7ec <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ca:	e00f      	b.n	800a7ec <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a7cc:	bf00      	nop
 800a7ce:	e00e      	b.n	800a7ee <USBH_HandleEnum+0x3be>
      break;
 800a7d0:	bf00      	nop
 800a7d2:	e00c      	b.n	800a7ee <USBH_HandleEnum+0x3be>
      break;
 800a7d4:	bf00      	nop
 800a7d6:	e00a      	b.n	800a7ee <USBH_HandleEnum+0x3be>
      break;
 800a7d8:	bf00      	nop
 800a7da:	e008      	b.n	800a7ee <USBH_HandleEnum+0x3be>
      break;
 800a7dc:	bf00      	nop
 800a7de:	e006      	b.n	800a7ee <USBH_HandleEnum+0x3be>
      break;
 800a7e0:	bf00      	nop
 800a7e2:	e004      	b.n	800a7ee <USBH_HandleEnum+0x3be>
      break;
 800a7e4:	bf00      	nop
 800a7e6:	e002      	b.n	800a7ee <USBH_HandleEnum+0x3be>
      break;
 800a7e8:	bf00      	nop
 800a7ea:	e000      	b.n	800a7ee <USBH_HandleEnum+0x3be>
      break;
 800a7ec:	bf00      	nop
  }
  return Status;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	683a      	ldr	r2, [r7, #0]
 800a806:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
}
 800a80a:	bf00      	nop
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b082      	sub	sp, #8
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
  USBH_HandleSof(phost);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f804 	bl	800a83a <USBH_HandleSof>
}
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b082      	sub	sp, #8
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	2b0b      	cmp	r3, #11
 800a84a:	d10a      	bne.n	800a862 <USBH_HandleSof+0x28>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	4798      	blx	r3
  }
}
 800a862:	bf00      	nop
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a87a:	bf00      	nop
}
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a886:	b480      	push	{r7}
 800a888:	b083      	sub	sp, #12
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a896:	bf00      	nop
}
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b083      	sub	sp, #12
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f001 f8c6 	bl	800ba82 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	791b      	ldrb	r3, [r3, #4]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fef2 	bl	800b6e6 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	795b      	ldrb	r3, [r3, #5]
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 feec 	bl	800b6e6 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b086      	sub	sp, #24
 800a91c:	af02      	add	r7, sp, #8
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a92a:	78fb      	ldrb	r3, [r7, #3]
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	4613      	mov	r3, r2
 800a932:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a936:	2100      	movs	r1, #0
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f864 	bl	800aa06 <USBH_GetDescriptor>
 800a93e:	4603      	mov	r3, r0
 800a940:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a942:	7bfb      	ldrb	r3, [r7, #15]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10a      	bne.n	800a95e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a954:	78fa      	ldrb	r2, [r7, #3]
 800a956:	b292      	uxth	r2, r2
 800a958:	4619      	mov	r1, r3
 800a95a:	f000 f93f 	bl	800abdc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af02      	add	r7, sp, #8
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	331c      	adds	r3, #28
 800a978:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a97a:	887b      	ldrh	r3, [r7, #2]
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a984:	2100      	movs	r1, #0
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f83d 	bl	800aa06 <USBH_GetDescriptor>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d107      	bne.n	800a9a6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a996:	887b      	ldrh	r3, [r7, #2]
 800a998:	461a      	mov	r2, r3
 800a99a:	68b9      	ldr	r1, [r7, #8]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f9ae 	bl	800acfe <USBH_ParseCfgDesc>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b088      	sub	sp, #32
 800a9b4:	af02      	add	r7, sp, #8
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	607a      	str	r2, [r7, #4]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	460b      	mov	r3, r1
 800a9be:	72fb      	strb	r3, [r7, #11]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a9c4:	7afb      	ldrb	r3, [r7, #11]
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a9cc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a9d4:	893b      	ldrh	r3, [r7, #8]
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	2100      	movs	r1, #0
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f000 f812 	bl	800aa06 <USBH_GetDescriptor>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d107      	bne.n	800a9fc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a9f2:	893a      	ldrh	r2, [r7, #8]
 800a9f4:	6879      	ldr	r1, [r7, #4]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fb4b 	bl	800b092 <USBH_ParseStringDesc>
  }

  return status;
 800a9fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b084      	sub	sp, #16
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	607b      	str	r3, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	72fb      	strb	r3, [r7, #11]
 800aa14:	4613      	mov	r3, r2
 800aa16:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	789b      	ldrb	r3, [r3, #2]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d11c      	bne.n	800aa5a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800aa20:	7afb      	ldrb	r3, [r7, #11]
 800aa22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2206      	movs	r2, #6
 800aa30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	893a      	ldrh	r2, [r7, #8]
 800aa36:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aa38:	893b      	ldrh	r3, [r7, #8]
 800aa3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aa3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa42:	d104      	bne.n	800aa4e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f240 4209 	movw	r2, #1033	; 0x409
 800aa4a:	829a      	strh	r2, [r3, #20]
 800aa4c:	e002      	b.n	800aa54 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	8b3a      	ldrh	r2, [r7, #24]
 800aa58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aa5a:	8b3b      	ldrh	r3, [r7, #24]
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 fb64 	bl	800b12e <USBH_CtlReq>
 800aa66:	4603      	mov	r3, r0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	460b      	mov	r3, r1
 800aa7a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	789b      	ldrb	r3, [r3, #2]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d10f      	bne.n	800aaa4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2205      	movs	r2, #5
 800aa8e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fb40 	bl	800b12e <USBH_CtlReq>
 800aaae:	4603      	mov	r3, r0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	789b      	ldrb	r3, [r3, #2]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d10e      	bne.n	800aaea <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2209      	movs	r2, #9
 800aad6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	887a      	ldrh	r2, [r7, #2]
 800aadc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aaea:	2200      	movs	r2, #0
 800aaec:	2100      	movs	r1, #0
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fb1d 	bl	800b12e <USBH_CtlReq>
 800aaf4:	4603      	mov	r3, r0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	460b      	mov	r3, r1
 800ab08:	70fb      	strb	r3, [r7, #3]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	789b      	ldrb	r3, [r3, #2]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d110      	bne.n	800ab38 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	220b      	movs	r2, #11
 800ab20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 800ab22:	78bb      	ldrb	r3, [r7, #2]
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ab2a:	78fb      	ldrb	r3, [r7, #3]
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ab38:	2200      	movs	r2, #0
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 faf6 	bl	800b12e <USBH_CtlReq>
 800ab42:	4603      	mov	r3, r0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	789b      	ldrb	r3, [r3, #2]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d10f      	bne.n	800ab80 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2203      	movs	r2, #3
 800ab6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ab6c:	78fb      	ldrb	r3, [r7, #3]
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ab80:	2200      	movs	r2, #0
 800ab82:	2100      	movs	r1, #0
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fad2 	bl	800b12e <USBH_CtlReq>
 800ab8a:	4603      	mov	r3, r0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	789b      	ldrb	r3, [r3, #2]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d10f      	bne.n	800abc8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2202      	movs	r2, #2
 800abac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800abba:	78fb      	ldrb	r3, [r7, #3]
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800abc8:	2200      	movs	r2, #0
 800abca:	2100      	movs	r1, #0
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 faae 	bl	800b12e <USBH_CtlReq>
 800abd2:	4603      	mov	r3, r0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	4613      	mov	r3, r2
 800abe8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	781a      	ldrb	r2, [r3, #0]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	785a      	ldrb	r2, [r3, #1]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	3302      	adds	r3, #2
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	3303      	adds	r3, #3
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	021b      	lsls	r3, r3, #8
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	791a      	ldrb	r2, [r3, #4]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	795a      	ldrb	r2, [r3, #5]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	799a      	ldrb	r2, [r3, #6]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	79da      	ldrb	r2, [r3, #7]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	79db      	ldrb	r3, [r3, #7]
 800ac3a:	2b20      	cmp	r3, #32
 800ac3c:	dc11      	bgt.n	800ac62 <USBH_ParseDevDesc+0x86>
 800ac3e:	2b08      	cmp	r3, #8
 800ac40:	db16      	blt.n	800ac70 <USBH_ParseDevDesc+0x94>
 800ac42:	3b08      	subs	r3, #8
 800ac44:	2201      	movs	r2, #1
 800ac46:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ac4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	bf14      	ite	ne
 800ac56:	2301      	movne	r3, #1
 800ac58:	2300      	moveq	r3, #0
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d102      	bne.n	800ac66 <USBH_ParseDevDesc+0x8a>
 800ac60:	e006      	b.n	800ac70 <USBH_ParseDevDesc+0x94>
 800ac62:	2b40      	cmp	r3, #64	; 0x40
 800ac64:	d104      	bne.n	800ac70 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	79da      	ldrb	r2, [r3, #7]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	71da      	strb	r2, [r3, #7]
      break;
 800ac6e:	e003      	b.n	800ac78 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2240      	movs	r2, #64	; 0x40
 800ac74:	71da      	strb	r2, [r3, #7]
      break;
 800ac76:	bf00      	nop
  }

  if (length > 8U)
 800ac78:	88fb      	ldrh	r3, [r7, #6]
 800ac7a:	2b08      	cmp	r3, #8
 800ac7c:	d939      	bls.n	800acf2 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	3308      	adds	r3, #8
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	3309      	adds	r3, #9
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	021b      	lsls	r3, r3, #8
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	4313      	orrs	r3, r2
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	330a      	adds	r3, #10
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	330b      	adds	r3, #11
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	021b      	lsls	r3, r3, #8
 800acac:	b29b      	uxth	r3, r3
 800acae:	4313      	orrs	r3, r2
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	330c      	adds	r3, #12
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	330d      	adds	r3, #13
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	021b      	lsls	r3, r3, #8
 800acc8:	b29b      	uxth	r3, r3
 800acca:	4313      	orrs	r3, r2
 800accc:	b29a      	uxth	r2, r3
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	7b9a      	ldrb	r2, [r3, #14]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	7bda      	ldrb	r2, [r3, #15]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	7c1a      	ldrb	r2, [r3, #16]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	7c5a      	ldrb	r2, [r3, #17]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	745a      	strb	r2, [r3, #17]
  }
}
 800acf2:	bf00      	nop
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b08c      	sub	sp, #48	; 0x30
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	60f8      	str	r0, [r7, #12]
 800ad06:	60b9      	str	r1, [r7, #8]
 800ad08:	4613      	mov	r3, r2
 800ad0a:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ad12:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ad24:	2300      	movs	r3, #0
 800ad26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	781a      	ldrb	r2, [r3, #0]
 800ad32:	6a3b      	ldr	r3, [r7, #32]
 800ad34:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	785a      	ldrb	r2, [r3, #1]
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	3302      	adds	r3, #2
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	3303      	adds	r3, #3
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	021b      	lsls	r3, r3, #8
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	4313      	orrs	r3, r2
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad5a:	bf28      	it	cs
 800ad5c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	791a      	ldrb	r2, [r3, #4]
 800ad6a:	6a3b      	ldr	r3, [r7, #32]
 800ad6c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	795a      	ldrb	r2, [r3, #5]
 800ad72:	6a3b      	ldr	r3, [r7, #32]
 800ad74:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	799a      	ldrb	r2, [r3, #6]
 800ad7a:	6a3b      	ldr	r3, [r7, #32]
 800ad7c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	79da      	ldrb	r2, [r3, #7]
 800ad82:	6a3b      	ldr	r3, [r7, #32]
 800ad84:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	7a1a      	ldrb	r2, [r3, #8]
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ad8e:	6a3b      	ldr	r3, [r7, #32]
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	2b09      	cmp	r3, #9
 800ad94:	d002      	beq.n	800ad9c <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ad96:	6a3b      	ldr	r3, [r7, #32]
 800ad98:	2209      	movs	r2, #9
 800ad9a:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ad9c:	88fb      	ldrh	r3, [r7, #6]
 800ad9e:	2b09      	cmp	r3, #9
 800ada0:	f240 809d 	bls.w	800aede <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800ada4:	2309      	movs	r3, #9
 800ada6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ada8:	2300      	movs	r3, #0
 800adaa:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800adac:	e081      	b.n	800aeb2 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800adae:	f107 0316 	add.w	r3, r7, #22
 800adb2:	4619      	mov	r1, r3
 800adb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adb6:	f000 f99f 	bl	800b0f8 <USBH_GetNextDesc>
 800adba:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	785b      	ldrb	r3, [r3, #1]
 800adc0:	2b04      	cmp	r3, #4
 800adc2:	d176      	bne.n	800aeb2 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b09      	cmp	r3, #9
 800adca:	d002      	beq.n	800add2 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800adcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adce:	2209      	movs	r2, #9
 800add0:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800add2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800add6:	2232      	movs	r2, #50	; 0x32
 800add8:	fb02 f303 	mul.w	r3, r2, r3
 800addc:	3308      	adds	r3, #8
 800adde:	6a3a      	ldr	r2, [r7, #32]
 800ade0:	4413      	add	r3, r2
 800ade2:	3302      	adds	r3, #2
 800ade4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ade6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ade8:	69f8      	ldr	r0, [r7, #28]
 800adea:	f000 f87e 	bl	800aeea <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800adee:	2300      	movs	r3, #0
 800adf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800adf4:	2300      	movs	r3, #0
 800adf6:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800adf8:	e043      	b.n	800ae82 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800adfa:	f107 0316 	add.w	r3, r7, #22
 800adfe:	4619      	mov	r1, r3
 800ae00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae02:	f000 f979 	bl	800b0f8 <USBH_GetNextDesc>
 800ae06:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0a:	785b      	ldrb	r3, [r3, #1]
 800ae0c:	2b05      	cmp	r3, #5
 800ae0e:	d138      	bne.n	800ae82 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	795b      	ldrb	r3, [r3, #5]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d10f      	bne.n	800ae38 <USBH_ParseCfgDesc+0x13a>
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	799b      	ldrb	r3, [r3, #6]
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d10b      	bne.n	800ae38 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	79db      	ldrb	r3, [r3, #7]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10f      	bne.n	800ae48 <USBH_ParseCfgDesc+0x14a>
 800ae28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	2b09      	cmp	r3, #9
 800ae2e:	d00b      	beq.n	800ae48 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	2209      	movs	r2, #9
 800ae34:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae36:	e007      	b.n	800ae48 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800ae38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b07      	cmp	r3, #7
 800ae3e:	d004      	beq.n	800ae4a <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ae40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae42:	2207      	movs	r2, #7
 800ae44:	701a      	strb	r2, [r3, #0]
 800ae46:	e000      	b.n	800ae4a <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae48:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ae4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae4e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ae52:	3201      	adds	r2, #1
 800ae54:	00d2      	lsls	r2, r2, #3
 800ae56:	2132      	movs	r1, #50	; 0x32
 800ae58:	fb01 f303 	mul.w	r3, r1, r3
 800ae5c:	4413      	add	r3, r2
 800ae5e:	3308      	adds	r3, #8
 800ae60:	6a3a      	ldr	r2, [r7, #32]
 800ae62:	4413      	add	r3, r2
 800ae64:	3304      	adds	r3, #4
 800ae66:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ae68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae6a:	69b9      	ldr	r1, [r7, #24]
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f000 f86b 	bl	800af48 <USBH_ParseEPDesc>
 800ae72:	4603      	mov	r3, r0
 800ae74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ae78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	791b      	ldrb	r3, [r3, #4]
 800ae86:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d204      	bcs.n	800ae98 <USBH_ParseCfgDesc+0x19a>
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	885a      	ldrh	r2, [r3, #2]
 800ae92:	8afb      	ldrh	r3, [r7, #22]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d8b0      	bhi.n	800adfa <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	791b      	ldrb	r3, [r3, #4]
 800ae9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d201      	bcs.n	800aea8 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e01c      	b.n	800aee2 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800aea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeac:	3301      	adds	r3, #1
 800aeae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aeb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeb6:	2b09      	cmp	r3, #9
 800aeb8:	d805      	bhi.n	800aec6 <USBH_ParseCfgDesc+0x1c8>
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	885a      	ldrh	r2, [r3, #2]
 800aebe:	8afb      	ldrh	r3, [r7, #22]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	f63f af74 	bhi.w	800adae <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800aec6:	6a3b      	ldr	r3, [r7, #32]
 800aec8:	791b      	ldrb	r3, [r3, #4]
 800aeca:	2b0a      	cmp	r3, #10
 800aecc:	bf28      	it	cs
 800aece:	230a      	movcs	r3, #10
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d201      	bcs.n	800aede <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e001      	b.n	800aee2 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800aede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3730      	adds	r7, #48	; 0x30
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800aeea:	b480      	push	{r7}
 800aeec:	b083      	sub	sp, #12
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	781a      	ldrb	r2, [r3, #0]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	785a      	ldrb	r2, [r3, #1]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	789a      	ldrb	r2, [r3, #2]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	78da      	ldrb	r2, [r3, #3]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	791a      	ldrb	r2, [r3, #4]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	795a      	ldrb	r2, [r3, #5]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	799a      	ldrb	r2, [r3, #6]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	79da      	ldrb	r2, [r3, #7]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	7a1a      	ldrb	r2, [r3, #8]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	721a      	strb	r2, [r3, #8]
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	781a      	ldrb	r2, [r3, #0]
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	785a      	ldrb	r2, [r3, #1]
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	789a      	ldrb	r2, [r3, #2]
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	78da      	ldrb	r2, [r3, #3]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3304      	adds	r3, #4
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	b29a      	uxth	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	3305      	adds	r3, #5
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	b29b      	uxth	r3, r3
 800af88:	021b      	lsls	r3, r3, #8
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	4313      	orrs	r3, r2
 800af8e:	b29a      	uxth	r2, r3
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	799a      	ldrb	r2, [r3, #6]
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	889b      	ldrh	r3, [r3, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d102      	bne.n	800afaa <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800afa4:	2303      	movs	r3, #3
 800afa6:	75fb      	strb	r3, [r7, #23]
 800afa8:	e033      	b.n	800b012 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	889b      	ldrh	r3, [r3, #4]
 800afae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800afb2:	f023 0307 	bic.w	r3, r3, #7
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	889b      	ldrh	r3, [r3, #4]
 800afc0:	b21a      	sxth	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3304      	adds	r3, #4
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	b299      	uxth	r1, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3305      	adds	r3, #5
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	021b      	lsls	r3, r3, #8
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	430b      	orrs	r3, r1
 800afd8:	b29b      	uxth	r3, r3
 800afda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d110      	bne.n	800b004 <USBH_ParseEPDesc+0xbc>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3304      	adds	r3, #4
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	b299      	uxth	r1, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	3305      	adds	r3, #5
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	021b      	lsls	r3, r3, #8
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	430b      	orrs	r3, r1
 800aff8:	b29b      	uxth	r3, r3
 800affa:	b21b      	sxth	r3, r3
 800affc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b000:	b21b      	sxth	r3, r3
 800b002:	e001      	b.n	800b008 <USBH_ParseEPDesc+0xc0>
 800b004:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b008:	4313      	orrs	r3, r2
 800b00a:	b21b      	sxth	r3, r3
 800b00c:	b29a      	uxth	r2, r3
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d116      	bne.n	800b04a <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	78db      	ldrb	r3, [r3, #3]
 800b020:	f003 0303 	and.w	r3, r3, #3
 800b024:	2b01      	cmp	r3, #1
 800b026:	d005      	beq.n	800b034 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	78db      	ldrb	r3, [r3, #3]
 800b02c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b030:	2b03      	cmp	r3, #3
 800b032:	d127      	bne.n	800b084 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	799b      	ldrb	r3, [r3, #6]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d003      	beq.n	800b044 <USBH_ParseEPDesc+0xfc>
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	799b      	ldrb	r3, [r3, #6]
 800b040:	2b10      	cmp	r3, #16
 800b042:	d91f      	bls.n	800b084 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b044:	2303      	movs	r3, #3
 800b046:	75fb      	strb	r3, [r7, #23]
 800b048:	e01c      	b.n	800b084 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	78db      	ldrb	r3, [r3, #3]
 800b04e:	f003 0303 	and.w	r3, r3, #3
 800b052:	2b01      	cmp	r3, #1
 800b054:	d10a      	bne.n	800b06c <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	799b      	ldrb	r3, [r3, #6]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d003      	beq.n	800b066 <USBH_ParseEPDesc+0x11e>
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	799b      	ldrb	r3, [r3, #6]
 800b062:	2b10      	cmp	r3, #16
 800b064:	d90e      	bls.n	800b084 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b066:	2303      	movs	r3, #3
 800b068:	75fb      	strb	r3, [r7, #23]
 800b06a:	e00b      	b.n	800b084 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	78db      	ldrb	r3, [r3, #3]
 800b070:	f003 0303 	and.w	r3, r3, #3
 800b074:	2b03      	cmp	r3, #3
 800b076:	d105      	bne.n	800b084 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	799b      	ldrb	r3, [r3, #6]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b080:	2303      	movs	r3, #3
 800b082:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b084:	7dfb      	ldrb	r3, [r7, #23]
}
 800b086:	4618      	mov	r0, r3
 800b088:	371c      	adds	r7, #28
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b092:	b480      	push	{r7}
 800b094:	b087      	sub	sp, #28
 800b096:	af00      	add	r7, sp, #0
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	4613      	mov	r3, r2
 800b09e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	d120      	bne.n	800b0ec <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	1e9a      	subs	r2, r3, #2
 800b0b0:	88fb      	ldrh	r3, [r7, #6]
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	bf28      	it	cs
 800b0b6:	4613      	movcs	r3, r2
 800b0b8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3302      	adds	r3, #2
 800b0be:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	82fb      	strh	r3, [r7, #22]
 800b0c4:	e00b      	b.n	800b0de <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b0c6:	8afb      	ldrh	r3, [r7, #22]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	781a      	ldrb	r2, [r3, #0]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b0d8:	8afb      	ldrh	r3, [r7, #22]
 800b0da:	3302      	adds	r3, #2
 800b0dc:	82fb      	strh	r3, [r7, #22]
 800b0de:	8afa      	ldrh	r2, [r7, #22]
 800b0e0:	8abb      	ldrh	r3, [r7, #20]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d3ef      	bcc.n	800b0c6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	701a      	strb	r2, [r3, #0]
  }
}
 800b0ec:	bf00      	nop
 800b0ee:	371c      	adds	r7, #28
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	881a      	ldrh	r2, [r3, #0]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	4413      	add	r3, r2
 800b10e:	b29a      	uxth	r2, r3
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4413      	add	r3, r2
 800b11e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b120:	68fb      	ldr	r3, [r7, #12]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr

0800b12e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b086      	sub	sp, #24
 800b132:	af00      	add	r7, sp, #0
 800b134:	60f8      	str	r0, [r7, #12]
 800b136:	60b9      	str	r1, [r7, #8]
 800b138:	4613      	mov	r3, r2
 800b13a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b13c:	2301      	movs	r3, #1
 800b13e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	789b      	ldrb	r3, [r3, #2]
 800b144:	2b01      	cmp	r3, #1
 800b146:	d002      	beq.n	800b14e <USBH_CtlReq+0x20>
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d00f      	beq.n	800b16c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b14c:	e027      	b.n	800b19e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	88fa      	ldrh	r2, [r7, #6]
 800b158:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2201      	movs	r2, #1
 800b15e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2202      	movs	r2, #2
 800b164:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b166:	2301      	movs	r3, #1
 800b168:	75fb      	strb	r3, [r7, #23]
      break;
 800b16a:	e018      	b.n	800b19e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f000 f81b 	bl	800b1a8 <USBH_HandleControl>
 800b172:	4603      	mov	r3, r0
 800b174:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b176:	7dfb      	ldrb	r3, [r7, #23]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <USBH_CtlReq+0x54>
 800b17c:	7dfb      	ldrb	r3, [r7, #23]
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d106      	bne.n	800b190 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2201      	movs	r2, #1
 800b186:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2200      	movs	r2, #0
 800b18c:	761a      	strb	r2, [r3, #24]
      break;
 800b18e:	e005      	b.n	800b19c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b190:	7dfb      	ldrb	r3, [r7, #23]
 800b192:	2b02      	cmp	r3, #2
 800b194:	d102      	bne.n	800b19c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2201      	movs	r2, #1
 800b19a:	709a      	strb	r2, [r3, #2]
      break;
 800b19c:	bf00      	nop
  }
  return status;
 800b19e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3718      	adds	r7, #24
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af02      	add	r7, sp, #8
 800b1ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	7e1b      	ldrb	r3, [r3, #24]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	2b0a      	cmp	r3, #10
 800b1c0:	f200 8156 	bhi.w	800b470 <USBH_HandleControl+0x2c8>
 800b1c4:	a201      	add	r2, pc, #4	; (adr r2, 800b1cc <USBH_HandleControl+0x24>)
 800b1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ca:	bf00      	nop
 800b1cc:	0800b1f9 	.word	0x0800b1f9
 800b1d0:	0800b213 	.word	0x0800b213
 800b1d4:	0800b27d 	.word	0x0800b27d
 800b1d8:	0800b2a3 	.word	0x0800b2a3
 800b1dc:	0800b2db 	.word	0x0800b2db
 800b1e0:	0800b305 	.word	0x0800b305
 800b1e4:	0800b357 	.word	0x0800b357
 800b1e8:	0800b379 	.word	0x0800b379
 800b1ec:	0800b3b5 	.word	0x0800b3b5
 800b1f0:	0800b3db 	.word	0x0800b3db
 800b1f4:	0800b419 	.word	0x0800b419
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f103 0110 	add.w	r1, r3, #16
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	795b      	ldrb	r3, [r3, #5]
 800b202:	461a      	mov	r2, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f943 	bl	800b490 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2202      	movs	r2, #2
 800b20e:	761a      	strb	r2, [r3, #24]
      break;
 800b210:	e139      	b.n	800b486 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	795b      	ldrb	r3, [r3, #5]
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fd21 	bl	800bc60 <USBH_LL_GetURBState>
 800b21e:	4603      	mov	r3, r0
 800b220:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b222:	7bbb      	ldrb	r3, [r7, #14]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d11e      	bne.n	800b266 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	7c1b      	ldrb	r3, [r3, #16]
 800b22c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b230:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	8adb      	ldrh	r3, [r3, #22]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00a      	beq.n	800b250 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b23a:	7b7b      	ldrb	r3, [r7, #13]
 800b23c:	2b80      	cmp	r3, #128	; 0x80
 800b23e:	d103      	bne.n	800b248 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2203      	movs	r2, #3
 800b244:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b246:	e115      	b.n	800b474 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2205      	movs	r2, #5
 800b24c:	761a      	strb	r2, [r3, #24]
      break;
 800b24e:	e111      	b.n	800b474 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b250:	7b7b      	ldrb	r3, [r7, #13]
 800b252:	2b80      	cmp	r3, #128	; 0x80
 800b254:	d103      	bne.n	800b25e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2209      	movs	r2, #9
 800b25a:	761a      	strb	r2, [r3, #24]
      break;
 800b25c:	e10a      	b.n	800b474 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2207      	movs	r2, #7
 800b262:	761a      	strb	r2, [r3, #24]
      break;
 800b264:	e106      	b.n	800b474 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b266:	7bbb      	ldrb	r3, [r7, #14]
 800b268:	2b04      	cmp	r3, #4
 800b26a:	d003      	beq.n	800b274 <USBH_HandleControl+0xcc>
 800b26c:	7bbb      	ldrb	r3, [r7, #14]
 800b26e:	2b02      	cmp	r3, #2
 800b270:	f040 8100 	bne.w	800b474 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	220b      	movs	r2, #11
 800b278:	761a      	strb	r2, [r3, #24]
      break;
 800b27a:	e0fb      	b.n	800b474 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 800b282:	b29a      	uxth	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6899      	ldr	r1, [r3, #8]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	899a      	ldrh	r2, [r3, #12]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	791b      	ldrb	r3, [r3, #4]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f93a 	bl	800b50e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2204      	movs	r2, #4
 800b29e:	761a      	strb	r2, [r3, #24]
      break;
 800b2a0:	e0f1      	b.n	800b486 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	791b      	ldrb	r3, [r3, #4]
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fcd9 	bl	800bc60 <USBH_LL_GetURBState>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b2b2:	7bbb      	ldrb	r3, [r7, #14]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d102      	bne.n	800b2be <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2209      	movs	r2, #9
 800b2bc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b2be:	7bbb      	ldrb	r3, [r7, #14]
 800b2c0:	2b05      	cmp	r3, #5
 800b2c2:	d102      	bne.n	800b2ca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b2c8:	e0d6      	b.n	800b478 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b2ca:	7bbb      	ldrb	r3, [r7, #14]
 800b2cc:	2b04      	cmp	r3, #4
 800b2ce:	f040 80d3 	bne.w	800b478 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	220b      	movs	r2, #11
 800b2d6:	761a      	strb	r2, [r3, #24]
      break;
 800b2d8:	e0ce      	b.n	800b478 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6899      	ldr	r1, [r3, #8]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	899a      	ldrh	r2, [r3, #12]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	795b      	ldrb	r3, [r3, #5]
 800b2e6:	2001      	movs	r0, #1
 800b2e8:	9000      	str	r0, [sp, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f8ea 	bl	800b4c4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2206      	movs	r2, #6
 800b300:	761a      	strb	r2, [r3, #24]
      break;
 800b302:	e0c0      	b.n	800b486 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	795b      	ldrb	r3, [r3, #5]
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fca8 	bl	800bc60 <USBH_LL_GetURBState>
 800b310:	4603      	mov	r3, r0
 800b312:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b314:	7bbb      	ldrb	r3, [r7, #14]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d103      	bne.n	800b322 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2207      	movs	r2, #7
 800b31e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b320:	e0ac      	b.n	800b47c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b322:	7bbb      	ldrb	r3, [r7, #14]
 800b324:	2b05      	cmp	r3, #5
 800b326:	d105      	bne.n	800b334 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	220c      	movs	r2, #12
 800b32c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b32e:	2303      	movs	r3, #3
 800b330:	73fb      	strb	r3, [r7, #15]
      break;
 800b332:	e0a3      	b.n	800b47c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b334:	7bbb      	ldrb	r3, [r7, #14]
 800b336:	2b02      	cmp	r3, #2
 800b338:	d103      	bne.n	800b342 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2205      	movs	r2, #5
 800b33e:	761a      	strb	r2, [r3, #24]
      break;
 800b340:	e09c      	b.n	800b47c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b342:	7bbb      	ldrb	r3, [r7, #14]
 800b344:	2b04      	cmp	r3, #4
 800b346:	f040 8099 	bne.w	800b47c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	220b      	movs	r2, #11
 800b34e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b350:	2302      	movs	r3, #2
 800b352:	73fb      	strb	r3, [r7, #15]
      break;
 800b354:	e092      	b.n	800b47c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	791b      	ldrb	r3, [r3, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	2100      	movs	r1, #0
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f8d5 	bl	800b50e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2208      	movs	r2, #8
 800b374:	761a      	strb	r2, [r3, #24]

      break;
 800b376:	e086      	b.n	800b486 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	791b      	ldrb	r3, [r3, #4]
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 fc6e 	bl	800bc60 <USBH_LL_GetURBState>
 800b384:	4603      	mov	r3, r0
 800b386:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d105      	bne.n	800b39a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	220d      	movs	r2, #13
 800b392:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b394:	2300      	movs	r3, #0
 800b396:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b398:	e072      	b.n	800b480 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b39a:	7bbb      	ldrb	r3, [r7, #14]
 800b39c:	2b04      	cmp	r3, #4
 800b39e:	d103      	bne.n	800b3a8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	220b      	movs	r2, #11
 800b3a4:	761a      	strb	r2, [r3, #24]
      break;
 800b3a6:	e06b      	b.n	800b480 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b3a8:	7bbb      	ldrb	r3, [r7, #14]
 800b3aa:	2b05      	cmp	r3, #5
 800b3ac:	d168      	bne.n	800b480 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b3b2:	e065      	b.n	800b480 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	795b      	ldrb	r3, [r3, #5]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	9200      	str	r2, [sp, #0]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	2100      	movs	r1, #0
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f87f 	bl	800b4c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	220a      	movs	r2, #10
 800b3d6:	761a      	strb	r2, [r3, #24]
      break;
 800b3d8:	e055      	b.n	800b486 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	795b      	ldrb	r3, [r3, #5]
 800b3de:	4619      	mov	r1, r3
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fc3d 	bl	800bc60 <USBH_LL_GetURBState>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b3ea:	7bbb      	ldrb	r3, [r7, #14]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d105      	bne.n	800b3fc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	220d      	movs	r2, #13
 800b3f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b3fa:	e043      	b.n	800b484 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b3fc:	7bbb      	ldrb	r3, [r7, #14]
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d103      	bne.n	800b40a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2209      	movs	r2, #9
 800b406:	761a      	strb	r2, [r3, #24]
      break;
 800b408:	e03c      	b.n	800b484 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b40a:	7bbb      	ldrb	r3, [r7, #14]
 800b40c:	2b04      	cmp	r3, #4
 800b40e:	d139      	bne.n	800b484 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	220b      	movs	r2, #11
 800b414:	761a      	strb	r2, [r3, #24]
      break;
 800b416:	e035      	b.n	800b484 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	7e5b      	ldrb	r3, [r3, #25]
 800b41c:	3301      	adds	r3, #1
 800b41e:	b2da      	uxtb	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	765a      	strb	r2, [r3, #25]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	7e5b      	ldrb	r3, [r3, #25]
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d806      	bhi.n	800b43a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b438:	e025      	b.n	800b486 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 800b440:	2106      	movs	r1, #6
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	795b      	ldrb	r3, [r3, #5]
 800b450:	4619      	mov	r1, r3
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f947 	bl	800b6e6 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	791b      	ldrb	r3, [r3, #4]
 800b45c:	4619      	mov	r1, r3
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f941 	bl	800b6e6 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b46a:	2302      	movs	r3, #2
 800b46c:	73fb      	strb	r3, [r7, #15]
      break;
 800b46e:	e00a      	b.n	800b486 <USBH_HandleControl+0x2de>

    default:
      break;
 800b470:	bf00      	nop
 800b472:	e008      	b.n	800b486 <USBH_HandleControl+0x2de>
      break;
 800b474:	bf00      	nop
 800b476:	e006      	b.n	800b486 <USBH_HandleControl+0x2de>
      break;
 800b478:	bf00      	nop
 800b47a:	e004      	b.n	800b486 <USBH_HandleControl+0x2de>
      break;
 800b47c:	bf00      	nop
 800b47e:	e002      	b.n	800b486 <USBH_HandleControl+0x2de>
      break;
 800b480:	bf00      	nop
 800b482:	e000      	b.n	800b486 <USBH_HandleControl+0x2de>
      break;
 800b484:	bf00      	nop
  }

  return status;
 800b486:	7bfb      	ldrb	r3, [r7, #15]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b088      	sub	sp, #32
 800b494:	af04      	add	r7, sp, #16
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	4613      	mov	r3, r2
 800b49c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b49e:	79f9      	ldrb	r1, [r7, #7]
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	9303      	str	r3, [sp, #12]
 800b4a4:	2308      	movs	r3, #8
 800b4a6:	9302      	str	r3, [sp, #8]
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	9301      	str	r3, [sp, #4]
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 fba2 	bl	800bbfe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b088      	sub	sp, #32
 800b4c8:	af04      	add	r7, sp, #16
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	80fb      	strh	r3, [r7, #6]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d001      	beq.n	800b4e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b4e8:	7979      	ldrb	r1, [r7, #5]
 800b4ea:	7e3b      	ldrb	r3, [r7, #24]
 800b4ec:	9303      	str	r3, [sp, #12]
 800b4ee:	88fb      	ldrh	r3, [r7, #6]
 800b4f0:	9302      	str	r3, [sp, #8]
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	9300      	str	r3, [sp, #0]
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f000 fb7d 	bl	800bbfe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b088      	sub	sp, #32
 800b512:	af04      	add	r7, sp, #16
 800b514:	60f8      	str	r0, [r7, #12]
 800b516:	60b9      	str	r1, [r7, #8]
 800b518:	4611      	mov	r1, r2
 800b51a:	461a      	mov	r2, r3
 800b51c:	460b      	mov	r3, r1
 800b51e:	80fb      	strh	r3, [r7, #6]
 800b520:	4613      	mov	r3, r2
 800b522:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b524:	7979      	ldrb	r1, [r7, #5]
 800b526:	2300      	movs	r3, #0
 800b528:	9303      	str	r3, [sp, #12]
 800b52a:	88fb      	ldrh	r3, [r7, #6]
 800b52c:	9302      	str	r3, [sp, #8]
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	9301      	str	r3, [sp, #4]
 800b532:	2301      	movs	r3, #1
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	2300      	movs	r3, #0
 800b538:	2201      	movs	r2, #1
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f000 fb5f 	bl	800bbfe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b540:	2300      	movs	r3, #0

}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b088      	sub	sp, #32
 800b54e:	af04      	add	r7, sp, #16
 800b550:	60f8      	str	r0, [r7, #12]
 800b552:	60b9      	str	r1, [r7, #8]
 800b554:	4611      	mov	r1, r2
 800b556:	461a      	mov	r2, r3
 800b558:	460b      	mov	r3, r1
 800b55a:	80fb      	strh	r3, [r7, #6]
 800b55c:	4613      	mov	r3, r2
 800b55e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b566:	2b00      	cmp	r3, #0
 800b568:	d001      	beq.n	800b56e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b56a:	2300      	movs	r3, #0
 800b56c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b56e:	7979      	ldrb	r1, [r7, #5]
 800b570:	7e3b      	ldrb	r3, [r7, #24]
 800b572:	9303      	str	r3, [sp, #12]
 800b574:	88fb      	ldrh	r3, [r7, #6]
 800b576:	9302      	str	r3, [sp, #8]
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	9301      	str	r3, [sp, #4]
 800b57c:	2301      	movs	r3, #1
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	2302      	movs	r3, #2
 800b582:	2200      	movs	r2, #0
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f000 fb3a 	bl	800bbfe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b088      	sub	sp, #32
 800b598:	af04      	add	r7, sp, #16
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	4611      	mov	r1, r2
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	80fb      	strh	r3, [r7, #6]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b5aa:	7979      	ldrb	r1, [r7, #5]
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	9303      	str	r3, [sp, #12]
 800b5b0:	88fb      	ldrh	r3, [r7, #6]
 800b5b2:	9302      	str	r3, [sp, #8]
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	9301      	str	r3, [sp, #4]
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	2302      	movs	r3, #2
 800b5be:	2201      	movs	r2, #1
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f000 fb1c 	bl	800bbfe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b088      	sub	sp, #32
 800b5d4:	af04      	add	r7, sp, #16
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	4611      	mov	r1, r2
 800b5dc:	461a      	mov	r2, r3
 800b5de:	460b      	mov	r3, r1
 800b5e0:	71fb      	strb	r3, [r7, #7]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b5e6:	79fb      	ldrb	r3, [r7, #7]
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	79b9      	ldrb	r1, [r7, #6]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	9203      	str	r2, [sp, #12]
 800b5f0:	9302      	str	r3, [sp, #8]
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	9301      	str	r3, [sp, #4]
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f000 fafd 	bl	800bbfe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b088      	sub	sp, #32
 800b612:	af04      	add	r7, sp, #16
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
 800b61a:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	b29b      	uxth	r3, r3
 800b620:	78f9      	ldrb	r1, [r7, #3]
 800b622:	2200      	movs	r2, #0
 800b624:	9203      	str	r2, [sp, #12]
 800b626:	9302      	str	r3, [sp, #8]
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	9301      	str	r3, [sp, #4]
 800b62c:	2301      	movs	r3, #1
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	2301      	movs	r3, #1
 800b632:	2200      	movs	r2, #0
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 fae2 	bl	800bbfe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af04      	add	r7, sp, #16
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	4608      	mov	r0, r1
 800b64e:	4611      	mov	r1, r2
 800b650:	461a      	mov	r2, r3
 800b652:	4603      	mov	r3, r0
 800b654:	70fb      	strb	r3, [r7, #3]
 800b656:	460b      	mov	r3, r1
 800b658:	70bb      	strb	r3, [r7, #2]
 800b65a:	4613      	mov	r3, r2
 800b65c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b65e:	7878      	ldrb	r0, [r7, #1]
 800b660:	78ba      	ldrb	r2, [r7, #2]
 800b662:	78f9      	ldrb	r1, [r7, #3]
 800b664:	8b3b      	ldrh	r3, [r7, #24]
 800b666:	9302      	str	r3, [sp, #8]
 800b668:	7d3b      	ldrb	r3, [r7, #20]
 800b66a:	9301      	str	r3, [sp, #4]
 800b66c:	7c3b      	ldrb	r3, [r7, #16]
 800b66e:	9300      	str	r3, [sp, #0]
 800b670:	4603      	mov	r3, r0
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 fa75 	bl	800bb62 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b082      	sub	sp, #8
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	460b      	mov	r3, r1
 800b68c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b68e:	78fb      	ldrb	r3, [r7, #3]
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fa94 	bl	800bbc0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b084      	sub	sp, #16
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f839 	bl	800b726 <USBH_GetFreePipe>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b6b8:	89fb      	ldrh	r3, [r7, #14]
 800b6ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d00b      	beq.n	800b6da <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b6c2:	78fa      	ldrb	r2, [r7, #3]
 800b6c4:	89fb      	ldrh	r3, [r7, #14]
 800b6c6:	f003 030f 	and.w	r3, r3, #15
 800b6ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b6ce:	6879      	ldr	r1, [r7, #4]
 800b6d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b6da:	89fb      	ldrh	r3, [r7, #14]
 800b6dc:	b2db      	uxtb	r3, r3
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b083      	sub	sp, #12
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b6f2:	78fb      	ldrb	r3, [r7, #3]
 800b6f4:	2b0f      	cmp	r3, #15
 800b6f6:	d80f      	bhi.n	800b718 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b6f8:	78fb      	ldrb	r3, [r7, #3]
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	4413      	add	r3, r2
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	78fb      	ldrb	r3, [r7, #3]
 800b708:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b70c:	6879      	ldr	r1, [r7, #4]
 800b70e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	440b      	add	r3, r1
 800b716:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b726:	b480      	push	{r7}
 800b728:	b085      	sub	sp, #20
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b72e:	2300      	movs	r3, #0
 800b730:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b732:	2300      	movs	r3, #0
 800b734:	73fb      	strb	r3, [r7, #15]
 800b736:	e010      	b.n	800b75a <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b738:	7bfb      	ldrb	r3, [r7, #15]
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4413      	add	r3, r2
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d102      	bne.n	800b754 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
 800b750:	b29b      	uxth	r3, r3
 800b752:	e007      	b.n	800b764 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b754:	7bfb      	ldrb	r3, [r7, #15]
 800b756:	3301      	adds	r3, #1
 800b758:	73fb      	strb	r3, [r7, #15]
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
 800b75c:	2b0f      	cmp	r3, #15
 800b75e:	d9eb      	bls.n	800b738 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b760:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b764:	4618      	mov	r0, r3
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b774:	2201      	movs	r2, #1
 800b776:	4920      	ldr	r1, [pc, #128]	; (800b7f8 <MX_USB_HOST_Init+0x88>)
 800b778:	4820      	ldr	r0, [pc, #128]	; (800b7fc <MX_USB_HOST_Init+0x8c>)
 800b77a:	f7fe fb0c 	bl	8009d96 <USBH_Init>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d001      	beq.n	800b788 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b784:	f7f4 ff88 	bl	8000698 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800b788:	491d      	ldr	r1, [pc, #116]	; (800b800 <MX_USB_HOST_Init+0x90>)
 800b78a:	481c      	ldr	r0, [pc, #112]	; (800b7fc <MX_USB_HOST_Init+0x8c>)
 800b78c:	f7fe fb92 	bl	8009eb4 <USBH_RegisterClass>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b796:	f7f4 ff7f 	bl	8000698 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b79a:	491a      	ldr	r1, [pc, #104]	; (800b804 <MX_USB_HOST_Init+0x94>)
 800b79c:	4817      	ldr	r0, [pc, #92]	; (800b7fc <MX_USB_HOST_Init+0x8c>)
 800b79e:	f7fe fb89 	bl	8009eb4 <USBH_RegisterClass>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d001      	beq.n	800b7ac <MX_USB_HOST_Init+0x3c>
  {
    Error_Handler();
 800b7a8:	f7f4 ff76 	bl	8000698 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b7ac:	4916      	ldr	r1, [pc, #88]	; (800b808 <MX_USB_HOST_Init+0x98>)
 800b7ae:	4813      	ldr	r0, [pc, #76]	; (800b7fc <MX_USB_HOST_Init+0x8c>)
 800b7b0:	f7fe fb80 	bl	8009eb4 <USBH_RegisterClass>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <MX_USB_HOST_Init+0x4e>
  {
    Error_Handler();
 800b7ba:	f7f4 ff6d 	bl	8000698 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800b7be:	4913      	ldr	r1, [pc, #76]	; (800b80c <MX_USB_HOST_Init+0x9c>)
 800b7c0:	480e      	ldr	r0, [pc, #56]	; (800b7fc <MX_USB_HOST_Init+0x8c>)
 800b7c2:	f7fe fb77 	bl	8009eb4 <USBH_RegisterClass>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <MX_USB_HOST_Init+0x60>
  {
    Error_Handler();
 800b7cc:	f7f4 ff64 	bl	8000698 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MTP_CLASS) != USBH_OK)
 800b7d0:	490f      	ldr	r1, [pc, #60]	; (800b810 <MX_USB_HOST_Init+0xa0>)
 800b7d2:	480a      	ldr	r0, [pc, #40]	; (800b7fc <MX_USB_HOST_Init+0x8c>)
 800b7d4:	f7fe fb6e 	bl	8009eb4 <USBH_RegisterClass>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d001      	beq.n	800b7e2 <MX_USB_HOST_Init+0x72>
  {
    Error_Handler();
 800b7de:	f7f4 ff5b 	bl	8000698 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b7e2:	4806      	ldr	r0, [pc, #24]	; (800b7fc <MX_USB_HOST_Init+0x8c>)
 800b7e4:	f7fe fc26 	bl	800a034 <USBH_Start>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d001      	beq.n	800b7f2 <MX_USB_HOST_Init+0x82>
  {
    Error_Handler();
 800b7ee:	f7f4 ff53 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b7f2:	bf00      	nop
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	0800b829 	.word	0x0800b829
 800b7fc:	2000016c 	.word	0x2000016c
 800b800:	2000000c 	.word	0x2000000c
 800b804:	2000002c 	.word	0x2000002c
 800b808:	2000006c 	.word	0x2000006c
 800b80c:	2000004c 	.word	0x2000004c
 800b810:	2000008c 	.word	0x2000008c

0800b814 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b818:	4802      	ldr	r0, [pc, #8]	; (800b824 <MX_USB_HOST_Process+0x10>)
 800b81a:	f7fe fc1b 	bl	800a054 <USBH_Process>
}
 800b81e:	bf00      	nop
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	2000016c 	.word	0x2000016c

0800b828 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b834:	78fb      	ldrb	r3, [r7, #3]
 800b836:	3b01      	subs	r3, #1
 800b838:	2b04      	cmp	r3, #4
 800b83a:	d819      	bhi.n	800b870 <USBH_UserProcess+0x48>
 800b83c:	a201      	add	r2, pc, #4	; (adr r2, 800b844 <USBH_UserProcess+0x1c>)
 800b83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b842:	bf00      	nop
 800b844:	0800b871 	.word	0x0800b871
 800b848:	0800b861 	.word	0x0800b861
 800b84c:	0800b871 	.word	0x0800b871
 800b850:	0800b869 	.word	0x0800b869
 800b854:	0800b859 	.word	0x0800b859
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b858:	4b09      	ldr	r3, [pc, #36]	; (800b880 <USBH_UserProcess+0x58>)
 800b85a:	2203      	movs	r2, #3
 800b85c:	701a      	strb	r2, [r3, #0]
  break;
 800b85e:	e008      	b.n	800b872 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b860:	4b07      	ldr	r3, [pc, #28]	; (800b880 <USBH_UserProcess+0x58>)
 800b862:	2202      	movs	r2, #2
 800b864:	701a      	strb	r2, [r3, #0]
  break;
 800b866:	e004      	b.n	800b872 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b868:	4b05      	ldr	r3, [pc, #20]	; (800b880 <USBH_UserProcess+0x58>)
 800b86a:	2201      	movs	r2, #1
 800b86c:	701a      	strb	r2, [r3, #0]
  break;
 800b86e:	e000      	b.n	800b872 <USBH_UserProcess+0x4a>

  default:
  break;
 800b870:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b872:	bf00      	nop
 800b874:	370c      	adds	r7, #12
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	20000714 	.word	0x20000714

0800b884 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b08a      	sub	sp, #40	; 0x28
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b88c:	f107 0314 	add.w	r3, r7, #20
 800b890:	2200      	movs	r2, #0
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	605a      	str	r2, [r3, #4]
 800b896:	609a      	str	r2, [r3, #8]
 800b898:	60da      	str	r2, [r3, #12]
 800b89a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8a4:	d13a      	bne.n	800b91c <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	613b      	str	r3, [r7, #16]
 800b8aa:	4b1e      	ldr	r3, [pc, #120]	; (800b924 <HAL_HCD_MspInit+0xa0>)
 800b8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ae:	4a1d      	ldr	r2, [pc, #116]	; (800b924 <HAL_HCD_MspInit+0xa0>)
 800b8b0:	f043 0301 	orr.w	r3, r3, #1
 800b8b4:	6313      	str	r3, [r2, #48]	; 0x30
 800b8b6:	4b1b      	ldr	r3, [pc, #108]	; (800b924 <HAL_HCD_MspInit+0xa0>)
 800b8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ba:	f003 0301 	and.w	r3, r3, #1
 800b8be:	613b      	str	r3, [r7, #16]
 800b8c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b8c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b8c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8d0:	2303      	movs	r3, #3
 800b8d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b8d4:	230a      	movs	r3, #10
 800b8d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8d8:	f107 0314 	add.w	r3, r7, #20
 800b8dc:	4619      	mov	r1, r3
 800b8de:	4812      	ldr	r0, [pc, #72]	; (800b928 <HAL_HCD_MspInit+0xa4>)
 800b8e0:	f7f5 f956 	bl	8000b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b8e4:	4b0f      	ldr	r3, [pc, #60]	; (800b924 <HAL_HCD_MspInit+0xa0>)
 800b8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e8:	4a0e      	ldr	r2, [pc, #56]	; (800b924 <HAL_HCD_MspInit+0xa0>)
 800b8ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ee:	6353      	str	r3, [r2, #52]	; 0x34
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	4b0b      	ldr	r3, [pc, #44]	; (800b924 <HAL_HCD_MspInit+0xa0>)
 800b8f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8f8:	4a0a      	ldr	r2, [pc, #40]	; (800b924 <HAL_HCD_MspInit+0xa0>)
 800b8fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8fe:	6453      	str	r3, [r2, #68]	; 0x44
 800b900:	4b08      	ldr	r3, [pc, #32]	; (800b924 <HAL_HCD_MspInit+0xa0>)
 800b902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b908:	60fb      	str	r3, [r7, #12]
 800b90a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b90c:	2200      	movs	r2, #0
 800b90e:	2100      	movs	r1, #0
 800b910:	2043      	movs	r0, #67	; 0x43
 800b912:	f7f5 f906 	bl	8000b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b916:	2043      	movs	r0, #67	; 0x43
 800b918:	f7f5 f91f 	bl	8000b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b91c:	bf00      	nop
 800b91e:	3728      	adds	r7, #40	; 0x28
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	40023800 	.word	0x40023800
 800b928:	40020000 	.word	0x40020000

0800b92c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe ff6b 	bl	800a816 <USBH_LL_IncTimer>
}
 800b940:	bf00      	nop
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b956:	4618      	mov	r0, r3
 800b958:	f7fe ffa3 	bl	800a8a2 <USBH_LL_Connect>
}
 800b95c:	bf00      	nop
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b972:	4618      	mov	r0, r3
 800b974:	f7fe ffac 	bl	800a8d0 <USBH_LL_Disconnect>
}
 800b978:	bf00      	nop
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	70fb      	strb	r3, [r7, #3]
 800b98c:	4613      	mov	r3, r2
 800b98e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fe ff5d 	bl	800a86a <USBH_LL_PortEnabled>
}
 800b9b0:	bf00      	nop
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fe ff5d 	bl	800a886 <USBH_LL_PortDisabled>
}
 800b9cc:	bf00      	nop
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 359c 	ldrb.w	r3, [r3, #1436]	; 0x59c
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d12a      	bne.n	800ba3c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b9e6:	4a18      	ldr	r2, [pc, #96]	; (800ba48 <USBH_LL_Init+0x74>)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a15      	ldr	r2, [pc, #84]	; (800ba48 <USBH_LL_Init+0x74>)
 800b9f2:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b9f6:	4b14      	ldr	r3, [pc, #80]	; (800ba48 <USBH_LL_Init+0x74>)
 800b9f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b9fc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b9fe:	4b12      	ldr	r3, [pc, #72]	; (800ba48 <USBH_LL_Init+0x74>)
 800ba00:	2208      	movs	r2, #8
 800ba02:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ba04:	4b10      	ldr	r3, [pc, #64]	; (800ba48 <USBH_LL_Init+0x74>)
 800ba06:	2201      	movs	r2, #1
 800ba08:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ba0a:	4b0f      	ldr	r3, [pc, #60]	; (800ba48 <USBH_LL_Init+0x74>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ba10:	4b0d      	ldr	r3, [pc, #52]	; (800ba48 <USBH_LL_Init+0x74>)
 800ba12:	2202      	movs	r2, #2
 800ba14:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba16:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <USBH_LL_Init+0x74>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ba1c:	480a      	ldr	r0, [pc, #40]	; (800ba48 <USBH_LL_Init+0x74>)
 800ba1e:	f7f5 fa6e 	bl	8000efe <HAL_HCD_Init>
 800ba22:	4603      	mov	r3, r0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d001      	beq.n	800ba2c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ba28:	f7f4 fe36 	bl	8000698 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ba2c:	4806      	ldr	r0, [pc, #24]	; (800ba48 <USBH_LL_Init+0x74>)
 800ba2e:	f7f5 fe52 	bl	80016d6 <HAL_HCD_GetCurrentFrame>
 800ba32:	4603      	mov	r3, r0
 800ba34:	4619      	mov	r1, r3
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7fe fede 	bl	800a7f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3708      	adds	r7, #8
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	20000718 	.word	0x20000718

0800ba4c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7f5 fdc1 	bl	80015ea <HAL_HCD_Start>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba6c:	7bfb      	ldrb	r3, [r7, #15]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 f982 	bl	800bd78 <USBH_Get_USB_Status>
 800ba74:	4603      	mov	r3, r0
 800ba76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b084      	sub	sp, #16
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7f5 fdc9 	bl	8001630 <HAL_HCD_Stop>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f000 f967 	bl	800bd78 <USBH_Get_USB_Status>
 800baaa:	4603      	mov	r3, r0
 800baac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baae:	7bbb      	ldrb	r3, [r7, #14]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bac0:	2301      	movs	r3, #1
 800bac2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800baca:	4618      	mov	r0, r3
 800bacc:	f7f5 fe11 	bl	80016f2 <HAL_HCD_GetCurrentSpeed>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d00c      	beq.n	800baf0 <USBH_LL_GetSpeed+0x38>
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d80d      	bhi.n	800baf6 <USBH_LL_GetSpeed+0x3e>
 800bada:	2b00      	cmp	r3, #0
 800badc:	d002      	beq.n	800bae4 <USBH_LL_GetSpeed+0x2c>
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d003      	beq.n	800baea <USBH_LL_GetSpeed+0x32>
 800bae2:	e008      	b.n	800baf6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bae4:	2300      	movs	r3, #0
 800bae6:	73fb      	strb	r3, [r7, #15]
    break;
 800bae8:	e008      	b.n	800bafc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800baea:	2301      	movs	r3, #1
 800baec:	73fb      	strb	r3, [r7, #15]
    break;
 800baee:	e005      	b.n	800bafc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800baf0:	2302      	movs	r3, #2
 800baf2:	73fb      	strb	r3, [r7, #15]
    break;
 800baf4:	e002      	b.n	800bafc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800baf6:	2301      	movs	r3, #1
 800baf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bafa:	bf00      	nop
  }
  return  speed;
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b084      	sub	sp, #16
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb12:	2300      	movs	r3, #0
 800bb14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7f5 fda4 	bl	800166a <HAL_HCD_ResetPort>
 800bb22:	4603      	mov	r3, r0
 800bb24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb26:	7bfb      	ldrb	r3, [r7, #15]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 f925 	bl	800bd78 <USBH_Get_USB_Status>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb32:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	460b      	mov	r3, r1
 800bb46:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800bb4e:	78fa      	ldrb	r2, [r7, #3]
 800bb50:	4611      	mov	r1, r2
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f5 fdab 	bl	80016ae <HAL_HCD_HC_GetXferCount>
 800bb58:	4603      	mov	r3, r0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bb62:	b590      	push	{r4, r7, lr}
 800bb64:	b089      	sub	sp, #36	; 0x24
 800bb66:	af04      	add	r7, sp, #16
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	4608      	mov	r0, r1
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	461a      	mov	r2, r3
 800bb70:	4603      	mov	r3, r0
 800bb72:	70fb      	strb	r3, [r7, #3]
 800bb74:	460b      	mov	r3, r1
 800bb76:	70bb      	strb	r3, [r7, #2]
 800bb78:	4613      	mov	r3, r2
 800bb7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 05a0 	ldr.w	r0, [r3, #1440]	; 0x5a0
 800bb8a:	787c      	ldrb	r4, [r7, #1]
 800bb8c:	78ba      	ldrb	r2, [r7, #2]
 800bb8e:	78f9      	ldrb	r1, [r7, #3]
 800bb90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb92:	9302      	str	r3, [sp, #8]
 800bb94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb98:	9301      	str	r3, [sp, #4]
 800bb9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	4623      	mov	r3, r4
 800bba2:	f7f5 fa0e 	bl	8000fc2 <HAL_HCD_HC_Init>
 800bba6:	4603      	mov	r3, r0
 800bba8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 f8e3 	bl	800bd78 <USBH_Get_USB_Status>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3714      	adds	r7, #20
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd90      	pop	{r4, r7, pc}

0800bbc0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800bbda:	78fa      	ldrb	r2, [r7, #3]
 800bbdc:	4611      	mov	r1, r2
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7f5 fa7e 	bl	80010e0 <HAL_HCD_HC_Halt>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bbe8:	7bfb      	ldrb	r3, [r7, #15]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 f8c4 	bl	800bd78 <USBH_Get_USB_Status>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bbfe:	b590      	push	{r4, r7, lr}
 800bc00:	b089      	sub	sp, #36	; 0x24
 800bc02:	af04      	add	r7, sp, #16
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	4608      	mov	r0, r1
 800bc08:	4611      	mov	r1, r2
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	70fb      	strb	r3, [r7, #3]
 800bc10:	460b      	mov	r3, r1
 800bc12:	70bb      	strb	r3, [r7, #2]
 800bc14:	4613      	mov	r3, r2
 800bc16:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 05a0 	ldr.w	r0, [r3, #1440]	; 0x5a0
 800bc26:	787c      	ldrb	r4, [r7, #1]
 800bc28:	78ba      	ldrb	r2, [r7, #2]
 800bc2a:	78f9      	ldrb	r1, [r7, #3]
 800bc2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bc30:	9303      	str	r3, [sp, #12]
 800bc32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bc34:	9302      	str	r3, [sp, #8]
 800bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc38:	9301      	str	r3, [sp, #4]
 800bc3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	4623      	mov	r3, r4
 800bc42:	f7f5 fa71 	bl	8001128 <HAL_HCD_HC_SubmitRequest>
 800bc46:	4603      	mov	r3, r0
 800bc48:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bc4a:	7bfb      	ldrb	r3, [r7, #15]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f000 f893 	bl	800bd78 <USBH_Get_USB_Status>
 800bc52:	4603      	mov	r3, r0
 800bc54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc56:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3714      	adds	r7, #20
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd90      	pop	{r4, r7, pc}

0800bc60 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800bc72:	78fa      	ldrb	r2, [r7, #3]
 800bc74:	4611      	mov	r1, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7f5 fd05 	bl	8001686 <HAL_HCD_HC_GetURBState>
 800bc7c:	4603      	mov	r3, r0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b082      	sub	sp, #8
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800bc92:	20c8      	movs	r0, #200	; 0xc8
 800bc94:	f7f4 fe46 	bl	8000924 <HAL_Delay>
  return USBH_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3708      	adds	r7, #8
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bca2:	b480      	push	{r7}
 800bca4:	b085      	sub	sp, #20
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	460b      	mov	r3, r1
 800bcac:	70fb      	strb	r3, [r7, #3]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800bcb8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bcba:	78fb      	ldrb	r3, [r7, #3]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	212c      	movs	r1, #44	; 0x2c
 800bcc0:	fb01 f303 	mul.w	r3, r1, r3
 800bcc4:	4413      	add	r3, r2
 800bcc6:	333b      	adds	r3, #59	; 0x3b
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d009      	beq.n	800bce2 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bcce:	78fb      	ldrb	r3, [r7, #3]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	212c      	movs	r1, #44	; 0x2c
 800bcd4:	fb01 f303 	mul.w	r3, r1, r3
 800bcd8:	4413      	add	r3, r2
 800bcda:	3354      	adds	r3, #84	; 0x54
 800bcdc:	78ba      	ldrb	r2, [r7, #2]
 800bcde:	701a      	strb	r2, [r3, #0]
 800bce0:	e008      	b.n	800bcf4 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bce2:	78fb      	ldrb	r3, [r7, #3]
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	212c      	movs	r1, #44	; 0x2c
 800bce8:	fb01 f303 	mul.w	r3, r1, r3
 800bcec:	4413      	add	r3, r2
 800bcee:	3355      	adds	r3, #85	; 0x55
 800bcf0:	78ba      	ldrb	r2, [r7, #2]
 800bcf2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3714      	adds	r7, #20
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b085      	sub	sp, #20
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	; 0x5a0
 800bd18:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800bd1a:	78fb      	ldrb	r3, [r7, #3]
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	212c      	movs	r1, #44	; 0x2c
 800bd20:	fb01 f303 	mul.w	r3, r1, r3
 800bd24:	4413      	add	r3, r2
 800bd26:	333b      	adds	r3, #59	; 0x3b
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d009      	beq.n	800bd42 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800bd2e:	78fb      	ldrb	r3, [r7, #3]
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	212c      	movs	r1, #44	; 0x2c
 800bd34:	fb01 f303 	mul.w	r3, r1, r3
 800bd38:	4413      	add	r3, r2
 800bd3a:	3354      	adds	r3, #84	; 0x54
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	73fb      	strb	r3, [r7, #15]
 800bd40:	e008      	b.n	800bd54 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800bd42:	78fb      	ldrb	r3, [r7, #3]
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	212c      	movs	r1, #44	; 0x2c
 800bd48:	fb01 f303 	mul.w	r3, r1, r3
 800bd4c:	4413      	add	r3, r2
 800bd4e:	3355      	adds	r3, #85	; 0x55
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3714      	adds	r7, #20
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b082      	sub	sp, #8
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7f4 fdda 	bl	8000924 <HAL_Delay>
}
 800bd70:	bf00      	nop
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	4603      	mov	r3, r0
 800bd80:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd86:	79fb      	ldrb	r3, [r7, #7]
 800bd88:	2b03      	cmp	r3, #3
 800bd8a:	d817      	bhi.n	800bdbc <USBH_Get_USB_Status+0x44>
 800bd8c:	a201      	add	r2, pc, #4	; (adr r2, 800bd94 <USBH_Get_USB_Status+0x1c>)
 800bd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd92:	bf00      	nop
 800bd94:	0800bda5 	.word	0x0800bda5
 800bd98:	0800bdab 	.word	0x0800bdab
 800bd9c:	0800bdb1 	.word	0x0800bdb1
 800bda0:	0800bdb7 	.word	0x0800bdb7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bda4:	2300      	movs	r3, #0
 800bda6:	73fb      	strb	r3, [r7, #15]
    break;
 800bda8:	e00b      	b.n	800bdc2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bdaa:	2302      	movs	r3, #2
 800bdac:	73fb      	strb	r3, [r7, #15]
    break;
 800bdae:	e008      	b.n	800bdc2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb4:	e005      	b.n	800bdc2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bdb6:	2302      	movs	r3, #2
 800bdb8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdba:	e002      	b.n	800bdc2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc0:	bf00      	nop
  }
  return usb_status;
 800bdc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3714      	adds	r7, #20
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <__errno>:
 800bdd0:	4b01      	ldr	r3, [pc, #4]	; (800bdd8 <__errno+0x8>)
 800bdd2:	6818      	ldr	r0, [r3, #0]
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	200000ac 	.word	0x200000ac

0800bddc <__libc_init_array>:
 800bddc:	b570      	push	{r4, r5, r6, lr}
 800bdde:	4d0d      	ldr	r5, [pc, #52]	; (800be14 <__libc_init_array+0x38>)
 800bde0:	4c0d      	ldr	r4, [pc, #52]	; (800be18 <__libc_init_array+0x3c>)
 800bde2:	1b64      	subs	r4, r4, r5
 800bde4:	10a4      	asrs	r4, r4, #2
 800bde6:	2600      	movs	r6, #0
 800bde8:	42a6      	cmp	r6, r4
 800bdea:	d109      	bne.n	800be00 <__libc_init_array+0x24>
 800bdec:	4d0b      	ldr	r5, [pc, #44]	; (800be1c <__libc_init_array+0x40>)
 800bdee:	4c0c      	ldr	r4, [pc, #48]	; (800be20 <__libc_init_array+0x44>)
 800bdf0:	f000 f93c 	bl	800c06c <_init>
 800bdf4:	1b64      	subs	r4, r4, r5
 800bdf6:	10a4      	asrs	r4, r4, #2
 800bdf8:	2600      	movs	r6, #0
 800bdfa:	42a6      	cmp	r6, r4
 800bdfc:	d105      	bne.n	800be0a <__libc_init_array+0x2e>
 800bdfe:	bd70      	pop	{r4, r5, r6, pc}
 800be00:	f855 3b04 	ldr.w	r3, [r5], #4
 800be04:	4798      	blx	r3
 800be06:	3601      	adds	r6, #1
 800be08:	e7ee      	b.n	800bde8 <__libc_init_array+0xc>
 800be0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be0e:	4798      	blx	r3
 800be10:	3601      	adds	r6, #1
 800be12:	e7f2      	b.n	800bdfa <__libc_init_array+0x1e>
 800be14:	0800c0b4 	.word	0x0800c0b4
 800be18:	0800c0b4 	.word	0x0800c0b4
 800be1c:	0800c0b4 	.word	0x0800c0b4
 800be20:	0800c0b8 	.word	0x0800c0b8

0800be24 <malloc>:
 800be24:	4b02      	ldr	r3, [pc, #8]	; (800be30 <malloc+0xc>)
 800be26:	4601      	mov	r1, r0
 800be28:	6818      	ldr	r0, [r3, #0]
 800be2a:	f000 b88d 	b.w	800bf48 <_malloc_r>
 800be2e:	bf00      	nop
 800be30:	200000ac 	.word	0x200000ac

0800be34 <free>:
 800be34:	4b02      	ldr	r3, [pc, #8]	; (800be40 <free+0xc>)
 800be36:	4601      	mov	r1, r0
 800be38:	6818      	ldr	r0, [r3, #0]
 800be3a:	f000 b819 	b.w	800be70 <_free_r>
 800be3e:	bf00      	nop
 800be40:	200000ac 	.word	0x200000ac

0800be44 <memcpy>:
 800be44:	440a      	add	r2, r1
 800be46:	4291      	cmp	r1, r2
 800be48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800be4c:	d100      	bne.n	800be50 <memcpy+0xc>
 800be4e:	4770      	bx	lr
 800be50:	b510      	push	{r4, lr}
 800be52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be5a:	4291      	cmp	r1, r2
 800be5c:	d1f9      	bne.n	800be52 <memcpy+0xe>
 800be5e:	bd10      	pop	{r4, pc}

0800be60 <memset>:
 800be60:	4402      	add	r2, r0
 800be62:	4603      	mov	r3, r0
 800be64:	4293      	cmp	r3, r2
 800be66:	d100      	bne.n	800be6a <memset+0xa>
 800be68:	4770      	bx	lr
 800be6a:	f803 1b01 	strb.w	r1, [r3], #1
 800be6e:	e7f9      	b.n	800be64 <memset+0x4>

0800be70 <_free_r>:
 800be70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be72:	2900      	cmp	r1, #0
 800be74:	d044      	beq.n	800bf00 <_free_r+0x90>
 800be76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be7a:	9001      	str	r0, [sp, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f1a1 0404 	sub.w	r4, r1, #4
 800be82:	bfb8      	it	lt
 800be84:	18e4      	addlt	r4, r4, r3
 800be86:	f000 f8e3 	bl	800c050 <__malloc_lock>
 800be8a:	4a1e      	ldr	r2, [pc, #120]	; (800bf04 <_free_r+0x94>)
 800be8c:	9801      	ldr	r0, [sp, #4]
 800be8e:	6813      	ldr	r3, [r2, #0]
 800be90:	b933      	cbnz	r3, 800bea0 <_free_r+0x30>
 800be92:	6063      	str	r3, [r4, #4]
 800be94:	6014      	str	r4, [r2, #0]
 800be96:	b003      	add	sp, #12
 800be98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be9c:	f000 b8de 	b.w	800c05c <__malloc_unlock>
 800bea0:	42a3      	cmp	r3, r4
 800bea2:	d908      	bls.n	800beb6 <_free_r+0x46>
 800bea4:	6825      	ldr	r5, [r4, #0]
 800bea6:	1961      	adds	r1, r4, r5
 800bea8:	428b      	cmp	r3, r1
 800beaa:	bf01      	itttt	eq
 800beac:	6819      	ldreq	r1, [r3, #0]
 800beae:	685b      	ldreq	r3, [r3, #4]
 800beb0:	1949      	addeq	r1, r1, r5
 800beb2:	6021      	streq	r1, [r4, #0]
 800beb4:	e7ed      	b.n	800be92 <_free_r+0x22>
 800beb6:	461a      	mov	r2, r3
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	b10b      	cbz	r3, 800bec0 <_free_r+0x50>
 800bebc:	42a3      	cmp	r3, r4
 800bebe:	d9fa      	bls.n	800beb6 <_free_r+0x46>
 800bec0:	6811      	ldr	r1, [r2, #0]
 800bec2:	1855      	adds	r5, r2, r1
 800bec4:	42a5      	cmp	r5, r4
 800bec6:	d10b      	bne.n	800bee0 <_free_r+0x70>
 800bec8:	6824      	ldr	r4, [r4, #0]
 800beca:	4421      	add	r1, r4
 800becc:	1854      	adds	r4, r2, r1
 800bece:	42a3      	cmp	r3, r4
 800bed0:	6011      	str	r1, [r2, #0]
 800bed2:	d1e0      	bne.n	800be96 <_free_r+0x26>
 800bed4:	681c      	ldr	r4, [r3, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	6053      	str	r3, [r2, #4]
 800beda:	4421      	add	r1, r4
 800bedc:	6011      	str	r1, [r2, #0]
 800bede:	e7da      	b.n	800be96 <_free_r+0x26>
 800bee0:	d902      	bls.n	800bee8 <_free_r+0x78>
 800bee2:	230c      	movs	r3, #12
 800bee4:	6003      	str	r3, [r0, #0]
 800bee6:	e7d6      	b.n	800be96 <_free_r+0x26>
 800bee8:	6825      	ldr	r5, [r4, #0]
 800beea:	1961      	adds	r1, r4, r5
 800beec:	428b      	cmp	r3, r1
 800beee:	bf04      	itt	eq
 800bef0:	6819      	ldreq	r1, [r3, #0]
 800bef2:	685b      	ldreq	r3, [r3, #4]
 800bef4:	6063      	str	r3, [r4, #4]
 800bef6:	bf04      	itt	eq
 800bef8:	1949      	addeq	r1, r1, r5
 800befa:	6021      	streq	r1, [r4, #0]
 800befc:	6054      	str	r4, [r2, #4]
 800befe:	e7ca      	b.n	800be96 <_free_r+0x26>
 800bf00:	b003      	add	sp, #12
 800bf02:	bd30      	pop	{r4, r5, pc}
 800bf04:	20000a1c 	.word	0x20000a1c

0800bf08 <sbrk_aligned>:
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	4e0e      	ldr	r6, [pc, #56]	; (800bf44 <sbrk_aligned+0x3c>)
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	6831      	ldr	r1, [r6, #0]
 800bf10:	4605      	mov	r5, r0
 800bf12:	b911      	cbnz	r1, 800bf1a <sbrk_aligned+0x12>
 800bf14:	f000 f88c 	bl	800c030 <_sbrk_r>
 800bf18:	6030      	str	r0, [r6, #0]
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	f000 f887 	bl	800c030 <_sbrk_r>
 800bf22:	1c43      	adds	r3, r0, #1
 800bf24:	d00a      	beq.n	800bf3c <sbrk_aligned+0x34>
 800bf26:	1cc4      	adds	r4, r0, #3
 800bf28:	f024 0403 	bic.w	r4, r4, #3
 800bf2c:	42a0      	cmp	r0, r4
 800bf2e:	d007      	beq.n	800bf40 <sbrk_aligned+0x38>
 800bf30:	1a21      	subs	r1, r4, r0
 800bf32:	4628      	mov	r0, r5
 800bf34:	f000 f87c 	bl	800c030 <_sbrk_r>
 800bf38:	3001      	adds	r0, #1
 800bf3a:	d101      	bne.n	800bf40 <sbrk_aligned+0x38>
 800bf3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bf40:	4620      	mov	r0, r4
 800bf42:	bd70      	pop	{r4, r5, r6, pc}
 800bf44:	20000a20 	.word	0x20000a20

0800bf48 <_malloc_r>:
 800bf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4c:	1ccd      	adds	r5, r1, #3
 800bf4e:	f025 0503 	bic.w	r5, r5, #3
 800bf52:	3508      	adds	r5, #8
 800bf54:	2d0c      	cmp	r5, #12
 800bf56:	bf38      	it	cc
 800bf58:	250c      	movcc	r5, #12
 800bf5a:	2d00      	cmp	r5, #0
 800bf5c:	4607      	mov	r7, r0
 800bf5e:	db01      	blt.n	800bf64 <_malloc_r+0x1c>
 800bf60:	42a9      	cmp	r1, r5
 800bf62:	d905      	bls.n	800bf70 <_malloc_r+0x28>
 800bf64:	230c      	movs	r3, #12
 800bf66:	603b      	str	r3, [r7, #0]
 800bf68:	2600      	movs	r6, #0
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf70:	4e2e      	ldr	r6, [pc, #184]	; (800c02c <_malloc_r+0xe4>)
 800bf72:	f000 f86d 	bl	800c050 <__malloc_lock>
 800bf76:	6833      	ldr	r3, [r6, #0]
 800bf78:	461c      	mov	r4, r3
 800bf7a:	bb34      	cbnz	r4, 800bfca <_malloc_r+0x82>
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	4638      	mov	r0, r7
 800bf80:	f7ff ffc2 	bl	800bf08 <sbrk_aligned>
 800bf84:	1c43      	adds	r3, r0, #1
 800bf86:	4604      	mov	r4, r0
 800bf88:	d14d      	bne.n	800c026 <_malloc_r+0xde>
 800bf8a:	6834      	ldr	r4, [r6, #0]
 800bf8c:	4626      	mov	r6, r4
 800bf8e:	2e00      	cmp	r6, #0
 800bf90:	d140      	bne.n	800c014 <_malloc_r+0xcc>
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	4631      	mov	r1, r6
 800bf96:	4638      	mov	r0, r7
 800bf98:	eb04 0803 	add.w	r8, r4, r3
 800bf9c:	f000 f848 	bl	800c030 <_sbrk_r>
 800bfa0:	4580      	cmp	r8, r0
 800bfa2:	d13a      	bne.n	800c01a <_malloc_r+0xd2>
 800bfa4:	6821      	ldr	r1, [r4, #0]
 800bfa6:	3503      	adds	r5, #3
 800bfa8:	1a6d      	subs	r5, r5, r1
 800bfaa:	f025 0503 	bic.w	r5, r5, #3
 800bfae:	3508      	adds	r5, #8
 800bfb0:	2d0c      	cmp	r5, #12
 800bfb2:	bf38      	it	cc
 800bfb4:	250c      	movcc	r5, #12
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4638      	mov	r0, r7
 800bfba:	f7ff ffa5 	bl	800bf08 <sbrk_aligned>
 800bfbe:	3001      	adds	r0, #1
 800bfc0:	d02b      	beq.n	800c01a <_malloc_r+0xd2>
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	442b      	add	r3, r5
 800bfc6:	6023      	str	r3, [r4, #0]
 800bfc8:	e00e      	b.n	800bfe8 <_malloc_r+0xa0>
 800bfca:	6822      	ldr	r2, [r4, #0]
 800bfcc:	1b52      	subs	r2, r2, r5
 800bfce:	d41e      	bmi.n	800c00e <_malloc_r+0xc6>
 800bfd0:	2a0b      	cmp	r2, #11
 800bfd2:	d916      	bls.n	800c002 <_malloc_r+0xba>
 800bfd4:	1961      	adds	r1, r4, r5
 800bfd6:	42a3      	cmp	r3, r4
 800bfd8:	6025      	str	r5, [r4, #0]
 800bfda:	bf18      	it	ne
 800bfdc:	6059      	strne	r1, [r3, #4]
 800bfde:	6863      	ldr	r3, [r4, #4]
 800bfe0:	bf08      	it	eq
 800bfe2:	6031      	streq	r1, [r6, #0]
 800bfe4:	5162      	str	r2, [r4, r5]
 800bfe6:	604b      	str	r3, [r1, #4]
 800bfe8:	4638      	mov	r0, r7
 800bfea:	f104 060b 	add.w	r6, r4, #11
 800bfee:	f000 f835 	bl	800c05c <__malloc_unlock>
 800bff2:	f026 0607 	bic.w	r6, r6, #7
 800bff6:	1d23      	adds	r3, r4, #4
 800bff8:	1af2      	subs	r2, r6, r3
 800bffa:	d0b6      	beq.n	800bf6a <_malloc_r+0x22>
 800bffc:	1b9b      	subs	r3, r3, r6
 800bffe:	50a3      	str	r3, [r4, r2]
 800c000:	e7b3      	b.n	800bf6a <_malloc_r+0x22>
 800c002:	6862      	ldr	r2, [r4, #4]
 800c004:	42a3      	cmp	r3, r4
 800c006:	bf0c      	ite	eq
 800c008:	6032      	streq	r2, [r6, #0]
 800c00a:	605a      	strne	r2, [r3, #4]
 800c00c:	e7ec      	b.n	800bfe8 <_malloc_r+0xa0>
 800c00e:	4623      	mov	r3, r4
 800c010:	6864      	ldr	r4, [r4, #4]
 800c012:	e7b2      	b.n	800bf7a <_malloc_r+0x32>
 800c014:	4634      	mov	r4, r6
 800c016:	6876      	ldr	r6, [r6, #4]
 800c018:	e7b9      	b.n	800bf8e <_malloc_r+0x46>
 800c01a:	230c      	movs	r3, #12
 800c01c:	603b      	str	r3, [r7, #0]
 800c01e:	4638      	mov	r0, r7
 800c020:	f000 f81c 	bl	800c05c <__malloc_unlock>
 800c024:	e7a1      	b.n	800bf6a <_malloc_r+0x22>
 800c026:	6025      	str	r5, [r4, #0]
 800c028:	e7de      	b.n	800bfe8 <_malloc_r+0xa0>
 800c02a:	bf00      	nop
 800c02c:	20000a1c 	.word	0x20000a1c

0800c030 <_sbrk_r>:
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	4d06      	ldr	r5, [pc, #24]	; (800c04c <_sbrk_r+0x1c>)
 800c034:	2300      	movs	r3, #0
 800c036:	4604      	mov	r4, r0
 800c038:	4608      	mov	r0, r1
 800c03a:	602b      	str	r3, [r5, #0]
 800c03c:	f7f4 fb8e 	bl	800075c <_sbrk>
 800c040:	1c43      	adds	r3, r0, #1
 800c042:	d102      	bne.n	800c04a <_sbrk_r+0x1a>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	b103      	cbz	r3, 800c04a <_sbrk_r+0x1a>
 800c048:	6023      	str	r3, [r4, #0]
 800c04a:	bd38      	pop	{r3, r4, r5, pc}
 800c04c:	20000a24 	.word	0x20000a24

0800c050 <__malloc_lock>:
 800c050:	4801      	ldr	r0, [pc, #4]	; (800c058 <__malloc_lock+0x8>)
 800c052:	f000 b809 	b.w	800c068 <__retarget_lock_acquire_recursive>
 800c056:	bf00      	nop
 800c058:	20000a28 	.word	0x20000a28

0800c05c <__malloc_unlock>:
 800c05c:	4801      	ldr	r0, [pc, #4]	; (800c064 <__malloc_unlock+0x8>)
 800c05e:	f000 b804 	b.w	800c06a <__retarget_lock_release_recursive>
 800c062:	bf00      	nop
 800c064:	20000a28 	.word	0x20000a28

0800c068 <__retarget_lock_acquire_recursive>:
 800c068:	4770      	bx	lr

0800c06a <__retarget_lock_release_recursive>:
 800c06a:	4770      	bx	lr

0800c06c <_init>:
 800c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06e:	bf00      	nop
 800c070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c072:	bc08      	pop	{r3}
 800c074:	469e      	mov	lr, r3
 800c076:	4770      	bx	lr

0800c078 <_fini>:
 800c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07a:	bf00      	nop
 800c07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07e:	bc08      	pop	{r3}
 800c080:	469e      	mov	lr, r3
 800c082:	4770      	bx	lr
